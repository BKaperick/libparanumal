kernel void dcsrAXPY(const int outerDim0, const int innerDim0,
      const int   numRows,
      const datafloat   alpha,
      const datafloat   beta,
      const int *restrict rowStarts,
      const int *restrict cols,
      const datafloat *restrict coefs,
      const datafloat *restrict x,
      datafloat *restrict y){

  // y = alpha * A * x + beta * y
  for(int row=0;row<outerDim0*innerDim0;++row;tile(innerDim0)){

    if(row < numRows){
      const int start = rowStarts[row];
      const int   end = rowStarts[row+1];

      const datafloat betay = beta*y[row];

      datafloat result = (datafloat) 0.;
      for(int n=start; n<end; n++){
        // access column index
        const int col = cols[n];
        const datafloat coeff = coefs[n];

        const datafloat xn = x[col];

        result += coeff*xn;
      }

      y[row] = alpha*result + betay;//beta*y[row];
    }
  }
}

kernel void dcsrZeqAXPY(const int outerDim0, const int innerDim0,
      const int   numRows,
      const datafloat   alpha,
      const datafloat   beta,
      const int *restrict rowStarts,
      const int *restrict cols,
      const datafloat *restrict coefs,
      const datafloat *restrict x,
      const datafloat *restrict y,
      datafloat *restrict z){

  // y = alpha * A * x + beta * y
  for(int row=0;row<outerDim0*innerDim0;++row;tile(innerDim0)){

    if(row < numRows){
      const int start = rowStarts[row];
      const int   end = rowStarts[row+1];

      const datafloat betay = beta*y[row];

      datafloat result = (datafloat) 0.;
      for(int n=start; n<end; n++){
        // access column index
        const int col = cols[n];
        const datafloat coeff = coefs[n];

        const datafloat xn = x[col];

        result += coeff*xn;
      }

      z[row] = alpha*result + betay;//beta*y[row];
    }
  }
}

// z = r - (A-D)*x
kernel void dcsrJacobi(const int outerDim0, const int innerDim0,
          const int   numRows,
          const int *restrict rowStarts,
          const int *restrict cols,
          const datafloat *restrict coefs,
          const datafloat *restrict x,
          const datafloat *restrict r,
          datafloat *restrict z){

  // z = r - (A-D)*x
  for(int row=0;row<outerDim0*innerDim0;++row;tile(innerDim0)){

    if(row < numRows){
      const int start = rowStarts[row];
      const int end   = rowStarts[row+1];
      
      datafloat result = r[row];
      // skip the first entry since it corresponds to diag
      for(int n=start+1; n<end; n++){
        // access column index
        const int col = cols[n];
        const datafloat coeff = coefs[n];

        const datafloat xn = x[col];

        result -= coeff*xn;
      }

      z[row] = result;
    }
  }
}