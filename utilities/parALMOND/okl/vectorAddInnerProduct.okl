#define p_RDIMX 32
#define p_RDIMY 8

// used a macro since I am not sure what happens with exclusive variables in OpenMP mode
#define twoPhaseReduction(r_ip, s_ip, s_res, g_ip)		\
								\
  barrier(localMemFence);					\
								\
  for(int ty=0;ty<p_RDIMY;++ty;inner1){				\
    for(int tx=0;tx<p_RDIMX;++tx;inner0){			\
      s_ip[ty][tx] = r_ip;					\
      if(tx<p_RDIMX/2) s_ip[ty][tx] += s_ip[ty][tx+p_RDIMX/2];	\
      if(tx<p_RDIMX/4) s_ip[ty][tx] += s_ip[ty][tx+p_RDIMX/4];	\
      if(tx<p_RDIMX/8) s_ip[ty][tx] += s_ip[ty][tx+p_RDIMX/8];	\
      if(tx<p_RDIMX/16)s_ip[ty][tx] += s_ip[ty][tx+p_RDIMX/16];	\
      if(tx<p_RDIMX/32)s_ip[ty][tx] += s_ip[ty][tx+p_RDIMX/32];	\
      if(tx==0) s_res[ty] = s_ip[ty][tx];			\
    }								\
  }								\
								\
  barrier(localMemFence);					\
							\
  for(int ty=0;ty<p_RDIMY;++ty;inner1){				\
    for(int tx=0;tx<p_RDIMX;++tx;inner0){			\
      if(ty==0){						\
      	if(tx<p_RDIMY/2)  s_res[tx] += s_res[tx+p_RDIMY/2];	\
      	if(tx<p_RDIMY/4)  s_res[tx] += s_res[tx+p_RDIMY/4];	\
      	if(tx<p_RDIMY/8)  s_res[tx] += s_res[tx+p_RDIMY/8];	\
      	if(tx<p_RDIMY/16) s_res[tx] += s_res[tx+p_RDIMY/16];	\
      	if(tx<p_RDIMY/32) s_res[tx] += s_res[tx+p_RDIMY/32];	\
      	if(tx==0) atomicAdd(g_ip, s_res[0]);			\
      }								\
    }								\
  }

  
// y = beta*y + alpha*x
// ip = y.y 
kernel void vectorAddInnerProductKernel(const int outerDim0,
					const int   N,
					const datafloat   alpha,
					const datafloat   beta,
					const datafloat *restrict x,
				        datafloat *restrict y,
					datafloat *restrict ip){

  for(int b=0;b<outerDim0;++b;outer0){

    shared volatile datafloat s_ip[p_RDIMY][p_RDIMX];
    shared volatile datafloat s_res[p_RDIMY];

    exclusive datafloat res;
    
    for(int ty=0;ty<p_RDIMY;++ty;inner1){
      for(int tx=0;tx<p_RDIMX;++tx;inner0){
      	int i = tx + ty*p_RDIMX + b*p_RDIMX*p_RDIMY;
      	
      	res = 0;
      	while(i<N){ // scan through whole array
      	  datafloat yi =  beta*y[i] + alpha*x[i];
      	  res += yi*yi;
      	  y[i] = yi;
      	  i += outerDim0*p_RDIMX*p_RDIMY; 
      	}
      }
    }
    
    twoPhaseReduction(res, s_ip, s_res, ip);
  }
}

    
