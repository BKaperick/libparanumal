
// a.b, a.c, b.b
kernel void kcycleCombinedOp1Kernel(const int outerDim0,
					      const int   N,
					      const datafloat *restrict a,
					      const datafloat *restrict b,
					      const datafloat *restrict c,
					            datafloat *restrict ips){

  for(int g=0;g<outerDim0;++g;outer0){

    shared volatile datafloat s_ip[p_RDIMY][p_RDIMX];
    shared datafloat s_res[p_RDIMY];

    exclusive datafloat abi, aci, bbi, val;
    
    for(int ty=0;ty<p_RDIMY;++ty;inner1){
      for(int tx=0;tx<p_RDIMX;++tx;inner0){
	      int i = tx + ty*p_RDIMX + g*p_RDIMX*p_RDIMY;

      	abi = 0.f;
      	aci = 0.f;
      	bbi = 0.f;
      	
      	while(i<N){ // scan through whole array
      	  const datafloat ai =  a[i];
      	  const datafloat bi =  b[i];
      	  const datafloat ci =  c[i];
      	  abi += ai*bi;
      	  aci += ai*ci;
      	  bbi += bi*bi;
      	  i += outerDim0*p_RDIMX*p_RDIMY; 
      	}
      }
    }

    twoPhaseReduction(abi, s_ip, s_res, ips+0);
    twoPhaseReduction(aci, s_ip, s_res, ips+1);
    twoPhaseReduction(bbi, s_ip, s_res, ips+2);
  }
}

// a.b, a.c, b.b
kernel void kcycleCombinedOp2Kernel(const int outerDim0,
                const int   N,
                const datafloat *restrict a,
                const datafloat *restrict b,
                const datafloat *restrict c,
                const datafloat *restrict d,
                      datafloat *restrict ips){

  for(int g=0;g<outerDim0;++g;outer0){

    shared volatile datafloat s_ip[p_RDIMY][p_RDIMX];
    shared volatile datafloat s_res[p_RDIMY];

    exclusive datafloat abi, aci, adi, val;
    
    for(int ty=0;ty<p_RDIMY;++ty;inner1){
      for(int tx=0;tx<p_RDIMX;++tx;inner0){
        int i = tx + ty*p_RDIMX + g*p_RDIMX*p_RDIMY;

        abi = 0.f;
        aci = 0.f;
        adi = 0.f;
        
        while(i<N){ // scan through whole array
          const datafloat ai =  a[i];
          const datafloat bi =  b[i];
          const datafloat ci =  c[i];
          const datafloat di =  d[i];
          abi += ai*bi;
          aci += ai*ci;
          adi += ai*di;
          i += outerDim0*p_RDIMX*p_RDIMY; 
        }
      }
    }

    twoPhaseReduction(abi, s_ip, s_res, ips+0);
    twoPhaseReduction(aci, s_ip, s_res, ips+1);
    twoPhaseReduction(adi, s_ip, s_res, ips+2);
  }
}
    
