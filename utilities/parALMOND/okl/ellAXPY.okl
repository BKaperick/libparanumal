kernel void ellAXPY(const iint   numRows,
        const iint             nnzPerRow,
        const iint             strideLength,
        const dfloat           alpha,
        const dfloat           beta,
        const iint   *restrict cols,
        const dfloat *restrict coefs,
        const dfloat *restrict x,
              dfloat *restrict y){

  // y = alpha * A * x + beta * y
  for(iint i=0;i<numRows;++i;tile(256)){

    if(i < numRows){
      const dfloat betay = beta*y[i];

      dfloat result = 0.;
      for(iint c=0; c<nnzPerRow; c++){
        // location in the memory
        const iint address = c*strideLength+i;

        // access column index
        const iint col = cols[address];

        if (col >-1) {
          const dfloat coeffn = coefs[address];
          const dfloat xn = x[col];

          result += coeffn*xn;
        }
      }
      y[i] = alpha*result + betay;//beta*y[row];
    }
  }
}

kernel void ellZeqAXPY(const iint   numRows,
           const iint   nnzPerRow,
           const iint   strideLength,
           const dfloat   alpha,
           const dfloat   beta,
           const iint   *restrict cols,
           const dfloat *restrict coefs,
           const dfloat *restrict x,
           const dfloat *restrict y,
                 dfloat *restrict z){

  // z = alpha * A * x + beta * y
  for(iint i=0;i<numRows;++i;tile(256)){
    if(i < numRows){
      dfloat result = 0.;
      for(iint c=0; c<nnzPerRow; c++){
        // location in the memory
        const iint address = c*strideLength+i;

        // access column index
        const iint col = cols[address];

        // dont access coefs[address] if col is -ve
        if(col > -1) result += coefs[address]*x[col];
      }
      z[i] = alpha*result + beta*y[i];
    }
  }
}

kernel void ellJacobi(const iint   numRows,
           const iint   nnzPerRow,
           const iint   strideLength,
           const iint   *restrict cols,
           const dfloat *restrict coefs,
           const dfloat *restrict x,
           const dfloat *restrict r,
                 dfloat *restrict z){

  // z = r - (A-D)*x
  for(iint i=0;i<numRows;++i;tile(256)){
    if(i < numRows){
      dfloat result = r[i];

      // skip the first stride since it corresponds to diag
      for(iint c=1; c<nnzPerRow; c++){
        // location in the memory
        const iint address = c*strideLength+i;

        // access column index
        const iint col = cols[address];

        // dont access coefs[address] or x[col] if col is -ve
        if(col > -1) result -= coefs[address]*x[col];
      }
      z[i] = result;
    }
  }
}

