/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/



@kernel void acousticsMRABPmlUpdateP2D(const int pmlNelements,
           @restrict const  int   *  pmlElementIds,
           @restrict const  int   *  pmlIds,
           @restrict const  int   *  N,
           const dfloat dt,
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           @restrict const  int   *  EToE,
           @restrict const  dfloat *  BBLower,
           @restrict const  int   *  BBRaiseids,
           @restrict const  dfloat *  BBRaiseVals,  
           @restrict const  int   *  vmapM,
           @restrict const  dfloat *  rhsq,
           @restrict const  dfloat *  pmlrhsq,
           @restrict dfloat *  q,
           @restrict dfloat *  pmlq,
           @restrict dfloat *  fQM,
           @restrict dfloat *  fQP,
           const int   rhsShift){

  for(int et=0;et<pmlNelements;++et;@outer(0)){  // for all elements
    @shared dfloat s_q[p_Np*p_Nfields];

    @shared dfloat s_un[p_Nfaces*p_Nfp];
    @shared dfloat s_vn[p_Nfaces*p_Nfp];
    @shared dfloat s_pn[p_Nfaces*p_Nfp];

    @shared dfloat s_unp[p_Nfaces*p_Nfpp1];
    @shared dfloat s_vnp[p_Nfaces*p_Nfpp1];
    @shared dfloat s_pnp[p_Nfaces*p_Nfpp1];

    for(int n=0; n < p_maxNodes; ++n; @inner(0)){
      if (n < p_Np){
        const int e = pmlElementIds[et];
        const int pmlId = pmlIds[et];

        const int id = p_Nfields*(e*p_NpMax + n);
        const int pid = p_pmlNfields*(pmlId*p_NpMax + n);

        const int rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
        const int rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
        const int rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;
        const int pmlrhsId1 = 3*pid + ((rhsShift+0)%3)*p_pmlNfields;
        const int pmlrhsId2 = 3*pid + ((rhsShift+1)%3)*p_pmlNfields;
        const int pmlrhsId3 = 3*pid + ((rhsShift+2)%3)*p_pmlNfields;

        const dfloat px = pmlq[pid+0] + dt*(a1*pmlrhsq[pmlrhsId1+0] + a2*pmlrhsq[pmlrhsId2+0] + a3*pmlrhsq[pmlrhsId3+0]);
        const dfloat py = pmlq[pid+1] + dt*(a1*pmlrhsq[pmlrhsId1+1] + a2*pmlrhsq[pmlrhsId2+1] + a3*pmlrhsq[pmlrhsId3+1]);

        s_q[p_Nfields*n+0] = q[id+0] + dt*(a1*rhsq[rhsId1+0] + a2*rhsq[rhsId2+0] + a3*rhsq[rhsId3+0]);
        s_q[p_Nfields*n+1] = q[id+1] + dt*(a1*rhsq[rhsId1+1] + a2*rhsq[rhsId2+1] + a3*rhsq[rhsId3+1]);
        s_q[p_Nfields*n+2] = px+py;

        //write update
        pmlq[pid+0] = px;
        pmlq[pid+1] = py;
        q[id+0] = s_q[p_Nfields*n+0];
        q[id+1] = s_q[p_Nfields*n+1];
        q[id+2] = s_q[p_Nfields*n+2];
      }
    }
    @barrier("local");

    for(int n=0; n < p_maxNodes; ++n; @inner(0)){ 
      if (n<p_Nfaces*p_Nfp) {
        const int e = pmlElementIds[et];
        const int f = n / p_Nfp;
        const int iid = n % p_Nfp;
        const int id  = e*p_NfpMax*p_Nfaces + f*p_NfpMax + iid;
        const int qidM = p_Nfields*(vmapM[id]-e*p_NpMax);
        const int qid   = p_Nfields*id;

        //gather negative traces
        s_un[n] = s_q[qidM+0];
        s_vn[n] = s_q[qidM+1];
        s_pn[n] = s_q[qidM+2];

        //write negative traces
        fQM[qid+0] = s_un[n];
        fQM[qid+1] = s_vn[n];
        fQM[qid+2] = s_pn[n];
      }
    }

    @barrier("local");    

    for(int n=0; n < p_maxNodes; ++n; @inner(0)){  
      if (n < p_Nfp*p_Nfaces){
        const int e = pmlElementIds[et];
        const int f = n / p_Nfp;
              int id = n % p_Nfp;

        int eP = EToE[e*p_Nfaces+f];
        if (eP < 0) eP = e;
        const int NP = N[eP];

        if (NP > p_N) { 
          while (id<p_Nfpp1) {
            s_unp[f*p_Nfpp1+id] = 0.0;
            s_vnp[f*p_Nfpp1+id] = 0.0;
            s_pnp[f*p_Nfpp1+id] = 0.0;
            #pragma unroll 2
            for (int m=0;m<2;m++){ //apply raise operator sparsly
              const dfloat BBRaiseVal = BBRaiseVals[2*id+m];
              const int BBRaiseid = BBRaiseids[2*id+m] + f*p_Nfp;
              s_unp[f*p_Nfpp1+id] += BBRaiseVal*s_un[BBRaiseid];
              s_vnp[f*p_Nfpp1+id] += BBRaiseVal*s_vn[BBRaiseid];
              s_pnp[f*p_Nfpp1+id] += BBRaiseVal*s_pn[BBRaiseid];
            }
            
            //write positive trace
            const int qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
            fQP[qid+0] = s_unp[f*p_Nfpp1+id];
            fQP[qid+1] = s_vnp[f*p_Nfpp1+id];
            fQP[qid+2] = s_pnp[f*p_Nfpp1+id];

            id += p_Nfp;
          }
        } else if (NP < p_N) { 
          if (id < p_Nfpm1) {
            s_unp[f*p_Nfpp1+id] = 0.0;
            s_vnp[f*p_Nfpp1+id] = 0.0;
            s_pnp[f*p_Nfpp1+id] = 0.0;
            #pragma unroll p_Nfp
            for (int m=0;m<p_Nfp;m++){
              s_unp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_un[f*p_Nfp + m];
              s_vnp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_vn[f*p_Nfp + m];
              s_pnp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_pn[f*p_Nfp + m];
            }

            //write positive trace
            const int qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
            fQP[qid+0] = s_unp[f*p_Nfpp1+id];
            fQP[qid+1] = s_vnp[f*p_Nfpp1+id];
            fQP[qid+2] = s_pnp[f*p_Nfpp1+id];
          }
        } else { //equal order neighbor
          //write positive trace
          const int qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
          fQP[qid+0] = s_un[n];
          fQP[qid+1] = s_vn[n];
          fQP[qid+2] = s_pn[n];
        }        
      }
    }
  }
}

@kernel void acousticsMRABPmlTraceUpdateP2D(const int pmlNelements,
           @restrict const  int   *  pmlElementIds,
           @restrict const  int   *  pmlIds,
           @restrict const  int   *  N,
           const dfloat dt,
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           @restrict const  int   *  EToE,
           @restrict const  dfloat *  BBLower,
           @restrict const  int   *  BBRaiseids,
           @restrict const  dfloat *  BBRaiseVals,  
           @restrict const  int   *  vmapM,
           @restrict const  dfloat *  rhsq,
           @restrict const  dfloat *  pmlrhsq,
           @restrict const  dfloat *  q,
           @restrict const  dfloat *  pmlq,
           @restrict dfloat *  fQM,
           @restrict dfloat *  fQP,
           const int   rhsShift){

  for(int et=0;et<pmlNelements;++et;@outer(0)){  // for all elements
    @shared dfloat s_q[p_Np*p_Nfields];

    @shared dfloat s_un[p_Nfaces*p_Nfp];
    @shared dfloat s_vn[p_Nfaces*p_Nfp];
    @shared dfloat s_pn[p_Nfaces*p_Nfp];

    @shared dfloat s_unp[p_Nfaces*p_Nfpp1];
    @shared dfloat s_vnp[p_Nfaces*p_Nfpp1];
    @shared dfloat s_pnp[p_Nfaces*p_Nfpp1];

    for(int n=0; n < p_maxNodes; ++n; @inner(0)){
      if (n < p_Np){
        const int e = pmlElementIds[et];
        const int pmlId = pmlIds[et];

        const int id = p_Nfields*(e*p_NpMax + n);
        const int pid = p_pmlNfields*(pmlId*p_NpMax + n);

        const int rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
        const int rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
        const int rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;
        const int pmlrhsId1 = 3*pid + ((rhsShift+0)%3)*p_pmlNfields;
        const int pmlrhsId2 = 3*pid + ((rhsShift+1)%3)*p_pmlNfields;
        const int pmlrhsId3 = 3*pid + ((rhsShift+2)%3)*p_pmlNfields;

        const dfloat px = pmlq[pid+0] + dt*(a1*pmlrhsq[pmlrhsId1+0] + a2*pmlrhsq[pmlrhsId2+0] + a3*pmlrhsq[pmlrhsId3+0]);
        const dfloat py = pmlq[pid+1] + dt*(a1*pmlrhsq[pmlrhsId1+1] + a2*pmlrhsq[pmlrhsId2+1] + a3*pmlrhsq[pmlrhsId3+1]);

        s_q[p_Nfields*n+0] = q[id+0] + dt*(a1*rhsq[rhsId1+0] + a2*rhsq[rhsId2+0] + a3*rhsq[rhsId3+0]);
        s_q[p_Nfields*n+1] = q[id+1] + dt*(a1*rhsq[rhsId1+1] + a2*rhsq[rhsId2+1] + a3*rhsq[rhsId3+1]);
        s_q[p_Nfields*n+2] = px+py;
      }
    }
    @barrier("local");
    
    for(int n=0; n < p_maxNodes; ++n; @inner(0)){ 
      if (n<p_Nfaces*p_Nfp) {
        const int e = pmlElementIds[et];
        const int f = n / p_Nfp;
        const int iid = n % p_Nfp;
        const int id  = e*p_NfpMax*p_Nfaces + f*p_NfpMax + iid;
        const int qidM = p_Nfields*(vmapM[id]-e*p_NpMax);
        const int qid   = p_Nfields*id;

        //gather negative traces
        s_un[n] = s_q[qidM+0];
        s_vn[n] = s_q[qidM+1];
        s_pn[n] = s_q[qidM+2];

        //write negative traces
        fQM[qid+0] = s_un[n];
        fQM[qid+1] = s_vn[n];
        fQM[qid+2] = s_pn[n];
      }
    }

    @barrier("local");    

    for(int n=0; n < p_maxNodes; ++n; @inner(0)){  
      if (n < p_Nfp*p_Nfaces){
        const int e = pmlElementIds[et];
        const int f = n / p_Nfp;
              int id = n % p_Nfp;

        int eP = EToE[e*p_Nfaces+f];
        if (eP < 0) eP = e;
        const int NP = N[eP];

        if (NP > p_N) { 
          while (id<p_Nfpp1) {
            s_unp[f*p_Nfpp1+id] = 0.0;
            s_vnp[f*p_Nfpp1+id] = 0.0;
            s_pnp[f*p_Nfpp1+id] = 0.0;
            #pragma unroll 2
            for (int m=0;m<2;m++){ //apply raise operator sparsly
              const dfloat BBRaiseVal = BBRaiseVals[2*id+m];
              const int BBRaiseid = BBRaiseids[2*id+m] + f*p_Nfp;
              s_unp[f*p_Nfpp1+id] += BBRaiseVal*s_un[BBRaiseid];
              s_vnp[f*p_Nfpp1+id] += BBRaiseVal*s_vn[BBRaiseid];
              s_pnp[f*p_Nfpp1+id] += BBRaiseVal*s_pn[BBRaiseid];
            }
            
            //write positive trace
            const int qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
            fQP[qid+0] = s_unp[f*p_Nfpp1+id];
            fQP[qid+1] = s_vnp[f*p_Nfpp1+id];
            fQP[qid+2] = s_pnp[f*p_Nfpp1+id];

            id += p_Nfp;
          }
        } else if (NP < p_N) { 
          if (id < p_Nfpm1) {
            s_unp[f*p_Nfpp1+id] = 0.0;
            s_vnp[f*p_Nfpp1+id] = 0.0;
            s_pnp[f*p_Nfpp1+id] = 0.0;
            #pragma unroll p_Nfp
            for (int m=0;m<p_Nfp;m++){
              s_unp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_un[f*p_Nfp + m];
              s_vnp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_vn[f*p_Nfp + m];
              s_pnp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_pn[f*p_Nfp + m];
            }

            //write positive trace
            const int qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
            fQP[qid+0] = s_unp[f*p_Nfpp1+id];
            fQP[qid+1] = s_vnp[f*p_Nfpp1+id];
            fQP[qid+2] = s_pnp[f*p_Nfpp1+id];
          }
        } else { //equal order neighbor
          //write positive trace
          const int qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
          fQP[qid+0] = s_un[n];
          fQP[qid+1] = s_vn[n];
          fQP[qid+2] = s_pn[n];
        }        
      }
    }
  }
}

@kernel void acousticsMRABPmlUpdateP2D_wadg(const int pmlNelements,
           @restrict const  int   *  pmlElementIds,
           @restrict const  int   *  pmlIds,
           @restrict const  int   *  N,
           const dfloat dt,
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           @restrict const  dfloat *  cubInterp,
           @restrict const  dfloat *  cubProject,
           @restrict const  dfloat *  c2,
           @restrict const  int   *  EToE,
           @restrict const  dfloat *  BBLower,
           @restrict const  int   *  BBRaiseids,
           @restrict const  dfloat *  BBRaiseVals,  
           @restrict const  int   *  vmapM,
           @restrict dfloat *  rhsq,
           @restrict dfloat *  pmlrhsq,
           @restrict dfloat *  q,
           @restrict dfloat *  pmlq,
           @restrict dfloat *  fQM,
           @restrict dfloat *  fQP,
           const int   rhsShift){

  for(int et=0;et<pmlNelements;++et;@outer(0)){  // for all elements
    @shared dfloat s_q[p_Np*p_Nfields];
    @shared dfloat s_p[p_cubNp];

    @shared dfloat s_un[p_Nfaces*p_Nfp];
    @shared dfloat s_vn[p_Nfaces*p_Nfp];
    @shared dfloat s_pn[p_Nfaces*p_Nfp];

    @shared dfloat s_unp[p_Nfaces*p_Nfpp1];
    @shared dfloat s_vnp[p_Nfaces*p_Nfpp1];
    @shared dfloat s_pnp[p_Nfaces*p_Nfpp1];

    for(int n=0; n < p_maxCubNodes; ++n; @inner(0)){
      if (n < p_Np){
        const int e = pmlElementIds[et];
        const int pmlId = pmlIds[et];

        const int id = p_Nfields*(e*p_NpMax + n);
        const int pid = p_pmlNfields*(pmlId*p_NpMax + n);

        const int rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
        const int rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
        const int rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;
        const int pmlrhsId1 = 3*pid + ((rhsShift+0)%3)*p_pmlNfields;
        const int pmlrhsId2 = 3*pid + ((rhsShift+1)%3)*p_pmlNfields;
        const int pmlrhsId3 = 3*pid + ((rhsShift+2)%3)*p_pmlNfields;

        const dfloat px = pmlq[pid+0] + dt*(a1*pmlrhsq[pmlrhsId1+0] + a2*pmlrhsq[pmlrhsId2+0] + a3*pmlrhsq[pmlrhsId3+0]);
        const dfloat py = pmlq[pid+1] + dt*(a1*pmlrhsq[pmlrhsId1+1] + a2*pmlrhsq[pmlrhsId2+1] + a3*pmlrhsq[pmlrhsId3+1]);

        s_q[p_Nfields*n+0] = q[id+0] + dt*(a1*rhsq[rhsId1+0] + a2*rhsq[rhsId2+0] + a3*rhsq[rhsId3+0]);
        s_q[p_Nfields*n+1] = q[id+1] + dt*(a1*rhsq[rhsId1+1] + a2*rhsq[rhsId2+1] + a3*rhsq[rhsId3+1]);
        s_q[p_Nfields*n+2] = px+py;

        //write update
        pmlq[pid+0] = px;
        pmlq[pid+1] = py;
        q[id+0] = s_q[p_Nfields*n+0];
        q[id+1] = s_q[p_Nfields*n+1];
      }
    }
    @barrier("local");

    // Interpolate p to cubature nodes
    for(int n=0;n<p_maxCubNodes;++n;@inner(0)){
      if (n<p_cubNp) {
        const int e = pmlElementIds[et];
        // Prefetch value of c2
        const dfloat c2n = c2[n + e*p_cubNpMax];

        s_p[n] = 0.f;
        for (int i=0;i<p_Np;++i){
          s_p[n] += cubInterp[n + i*p_cubNp] * s_q[p_Nfields*i+2];
        }
        // Multiply result by wavespeed c2 at cubature node
        s_p[n] *= c2n;
      }
    }
    @barrier("local");

    // Project result back down
    for(int n=0;n<p_maxCubNodes;++n;@inner(0)){
      if (n < p_Np){
        const int e = pmlElementIds[et];
        const int id = p_Nfields*(e*p_NpMax + n);

        // Project scaled rhs down
        dfloat c2p = 0.f;
        for (int i=0;i<p_cubNp;++i){
          c2p += cubProject[n + i*p_Np] * s_p[i];
        }

        s_q[p_Nfields*n+2] = c2p;
        q[id+2] = c2p;
      }
    }
    @barrier("local");

    for(int n=0; n < p_maxCubNodes; ++n; @inner(0)){ 
      if (n<p_Nfaces*p_Nfp) {
        const int e = pmlElementIds[et];
        const int f = n / p_Nfp;
        const int iid = n % p_Nfp;
        const int id  = e*p_NfpMax*p_Nfaces + f*p_NfpMax + iid;
        const int qidM = p_Nfields*(vmapM[id]-e*p_NpMax);
        const int qid   = p_Nfields*id;

        //gather negative traces
        s_un[n] = s_q[qidM+0];
        s_vn[n] = s_q[qidM+1];
        s_pn[n] = s_q[qidM+2];

        //write negative traces
        fQM[qid+0] = s_un[n];
        fQM[qid+1] = s_vn[n];
        fQM[qid+2] = s_pn[n];
      }
    }

    @barrier("local");    

    for(int n=0; n < p_maxCubNodes; ++n; @inner(0)){  
      if (n < p_Nfp*p_Nfaces){
        const int e = pmlElementIds[et];
        const int f = n / p_Nfp;
              int id = n % p_Nfp;

        int eP = EToE[e*p_Nfaces+f];
        if (eP < 0) eP = e;
        const int NP = N[eP];

        if (NP > p_N) { 
          while (id<p_Nfpp1) {
            s_unp[f*p_Nfpp1+id] = 0.0;
            s_vnp[f*p_Nfpp1+id] = 0.0;
            s_pnp[f*p_Nfpp1+id] = 0.0;
            #pragma unroll 2
            for (int m=0;m<2;m++){ //apply raise operator sparsly
              const dfloat BBRaiseVal = BBRaiseVals[2*id+m];
              const int BBRaiseid = BBRaiseids[2*id+m] + f*p_Nfp;
              s_unp[f*p_Nfpp1+id] += BBRaiseVal*s_un[BBRaiseid];
              s_vnp[f*p_Nfpp1+id] += BBRaiseVal*s_vn[BBRaiseid];
              s_pnp[f*p_Nfpp1+id] += BBRaiseVal*s_pn[BBRaiseid];
            }
            
            //write positive trace
            const int qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
            fQP[qid+0] = s_unp[f*p_Nfpp1+id];
            fQP[qid+1] = s_vnp[f*p_Nfpp1+id];
            fQP[qid+2] = s_pnp[f*p_Nfpp1+id];

            id += p_Nfp;
          }
        } else if (NP < p_N) { 
          if (id < p_Nfpm1) {
            s_unp[f*p_Nfpp1+id] = 0.0;
            s_vnp[f*p_Nfpp1+id] = 0.0;
            s_pnp[f*p_Nfpp1+id] = 0.0;
            #pragma unroll p_Nfp
            for (int m=0;m<p_Nfp;m++){
              s_unp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_un[f*p_Nfp + m];
              s_vnp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_vn[f*p_Nfp + m];
              s_pnp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_pn[f*p_Nfp + m];
            }

            //write positive trace
            const int qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
            fQP[qid+0] = s_unp[f*p_Nfpp1+id];
            fQP[qid+1] = s_vnp[f*p_Nfpp1+id];
            fQP[qid+2] = s_pnp[f*p_Nfpp1+id];
          }
        } else { //equal order neighbor
          //write positive trace
          const int qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
          fQP[qid+0] = s_un[n];
          fQP[qid+1] = s_vn[n];
          fQP[qid+2] = s_pn[n];
        }        
      }
    }
  }
}

@kernel void acousticsMRABPmlTraceUpdateP2D_wadg(const int pmlNelements,
           @restrict const  int   *  pmlElementIds,
           @restrict const  int   *  pmlIds,
           @restrict const  int   *  N,
           const dfloat dt,
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           @restrict const  dfloat *  cubInterp,
           @restrict const  dfloat *  cubProject,
           @restrict const  dfloat *  c2,
           @restrict const  int   *  EToE,
           @restrict const  dfloat *  BBLower,
           @restrict const  int   *  BBRaiseids,
           @restrict const  dfloat *  BBRaiseVals,  
           @restrict const  int   *  vmapM,
           @restrict const  dfloat *  rhsq,
           @restrict const  dfloat *  pmlrhsq,
           @restrict const  dfloat *  q,
           @restrict const  dfloat *  pmlq,
           @restrict dfloat *  fQM,
           @restrict dfloat *  fQP,
           const int   rhsShift){

  for(int et=0;et<pmlNelements;++et;@outer(0)){  // for all elements
    @shared dfloat s_q[p_Np*p_Nfields];
    @shared dfloat s_p[p_cubNp];

    @shared dfloat s_un[p_Nfaces*p_Nfp];
    @shared dfloat s_vn[p_Nfaces*p_Nfp];
    @shared dfloat s_pn[p_Nfaces*p_Nfp];

    @shared dfloat s_unp[p_Nfaces*p_Nfpp1];
    @shared dfloat s_vnp[p_Nfaces*p_Nfpp1];
    @shared dfloat s_pnp[p_Nfaces*p_Nfpp1];

    for(int n=0; n < p_maxCubNodes; ++n; @inner(0)){
      if (n < p_Np){
        const int e = pmlElementIds[et];
        const int pmlId = pmlIds[et];

        const int id = p_Nfields*(e*p_NpMax + n);
        const int pid = p_pmlNfields*(pmlId*p_NpMax + n);

        const int rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
        const int rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
        const int rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;
        const int pmlrhsId1 = 3*pid + ((rhsShift+0)%3)*p_pmlNfields;
        const int pmlrhsId2 = 3*pid + ((rhsShift+1)%3)*p_pmlNfields;
        const int pmlrhsId3 = 3*pid + ((rhsShift+2)%3)*p_pmlNfields;

        const dfloat px = pmlq[pid+0] + dt*(a1*pmlrhsq[pmlrhsId1+0] + a2*pmlrhsq[pmlrhsId2+0] + a3*pmlrhsq[pmlrhsId3+0]);
        const dfloat py = pmlq[pid+1] + dt*(a1*pmlrhsq[pmlrhsId1+1] + a2*pmlrhsq[pmlrhsId2+1] + a3*pmlrhsq[pmlrhsId3+1]);

        s_q[p_Nfields*n+0] = q[id+0] + dt*(a1*rhsq[rhsId1+0] + a2*rhsq[rhsId2+0] + a3*rhsq[rhsId3+0]);
        s_q[p_Nfields*n+1] = q[id+1] + dt*(a1*rhsq[rhsId1+1] + a2*rhsq[rhsId2+1] + a3*rhsq[rhsId3+1]);
        s_q[p_Nfields*n+2] = px+py;
      }
    }
    @barrier("local");

    // Interpolate p to cubature nodes
    for(int n=0;n<p_maxCubNodes;++n;@inner(0)){
      if (n<p_cubNp) {
        const int e = pmlElementIds[et];
        // Prefetch value of c2
        const dfloat c2n = c2[n + e*p_cubNp];

        s_p[n] = 0.f;
        for (int i=0;i<p_Np;++i){
          s_p[n] += cubInterp[n + i*p_cubNp] * s_q[p_Nfields*i+2];
        }
        // Multiply result by wavespeed c2 at cubature node
        s_p[n] *= c2n;
      }
    }
    @barrier("local");

    // Project result back down
    for(int n=0;n<p_maxCubNodes;++n;@inner(0)){
      if (n < p_Np){
        // Project scaled rhs down
        dfloat c2p = 0.f;
        for (int i=0;i<p_cubNp;++i){
          c2p += cubProject[n + i*p_Np] * s_p[i];
        }
        s_q[p_Nfields*n+2] = c2p;
      }
    }
    @barrier("local");
    
    for(int n=0; n < p_maxCubNodes; ++n; @inner(0)){ 
      if (n<p_Nfaces*p_Nfp) {
        const int e = pmlElementIds[et];
        const int f = n / p_Nfp;
        const int iid = n % p_Nfp;
        const int id  = e*p_NfpMax*p_Nfaces + f*p_NfpMax + iid;
        const int qidM = p_Nfields*(vmapM[id]-e*p_NpMax);
        const int qid   = p_Nfields*id;

        //gather negative traces
        s_un[n] = s_q[qidM+0];
        s_vn[n] = s_q[qidM+1];
        s_pn[n] = s_q[qidM+2];

        //write negative traces
        fQM[qid+0] = s_un[n];
        fQM[qid+1] = s_vn[n];
        fQM[qid+2] = s_pn[n];
      }
    }

    @barrier("local");    

    for(int n=0; n < p_maxCubNodes; ++n; @inner(0)){  
      if (n < p_Nfp*p_Nfaces){
        const int e = pmlElementIds[et];
        const int f = n / p_Nfp;
              int id = n % p_Nfp;

        int eP = EToE[e*p_Nfaces+f];
        if (eP < 0) eP = e;
        const int NP = N[eP];

        if (NP > p_N) { 
          while (id<p_Nfpp1) {
            s_unp[f*p_Nfpp1+id] = 0.0;
            s_vnp[f*p_Nfpp1+id] = 0.0;
            s_pnp[f*p_Nfpp1+id] = 0.0;
            #pragma unroll 2
            for (int m=0;m<2;m++){ //apply raise operator sparsly
              const dfloat BBRaiseVal = BBRaiseVals[2*id+m];
              const int BBRaiseid = BBRaiseids[2*id+m] + f*p_Nfp;
              s_unp[f*p_Nfpp1+id] += BBRaiseVal*s_un[BBRaiseid];
              s_vnp[f*p_Nfpp1+id] += BBRaiseVal*s_vn[BBRaiseid];
              s_pnp[f*p_Nfpp1+id] += BBRaiseVal*s_pn[BBRaiseid];
            }
            
            //write positive trace
            const int qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
            fQP[qid+0] = s_unp[f*p_Nfpp1+id];
            fQP[qid+1] = s_vnp[f*p_Nfpp1+id];
            fQP[qid+2] = s_pnp[f*p_Nfpp1+id];

            id += p_Nfp;
          }
        } else if (NP < p_N) { 
          if (id < p_Nfpm1) {
            s_unp[f*p_Nfpp1+id] = 0.0;
            s_vnp[f*p_Nfpp1+id] = 0.0;
            s_pnp[f*p_Nfpp1+id] = 0.0;
            #pragma unroll p_Nfp
            for (int m=0;m<p_Nfp;m++){
              s_unp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_un[f*p_Nfp + m];
              s_vnp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_vn[f*p_Nfp + m];
              s_pnp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_pn[f*p_Nfp + m];
            }

            //write positive trace
            const int qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
            fQP[qid+0] = s_unp[f*p_Nfpp1+id];
            fQP[qid+1] = s_vnp[f*p_Nfpp1+id];
            fQP[qid+2] = s_pnp[f*p_Nfpp1+id];
          }
        } else { //equal order neighbor
          //write positive trace
          const int qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
          fQP[qid+0] = s_un[n];
          fQP[qid+1] = s_vn[n];
          fQP[qid+2] = s_pn[n];
        }        
      }
    }
  }
}
