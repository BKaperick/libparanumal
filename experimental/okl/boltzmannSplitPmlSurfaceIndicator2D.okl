/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


void boundaryConditions2D(const int bc,
			  const dfloat  t, const dfloat  x, const dfloat  y,
			  const dfloat  nx, const dfloat  ny,
			  const dfloat ramp,
			  const dfloat  q1M, const dfloat  q2M, const dfloat  q3M,
			  const dfloat  q4M, const dfloat  q5M, const dfloat  q6M,
			  @restrict dfloat * @restrict q1B, dfloat * @restrict q2B, dfloat *  q3B,
			  @restrict dfloat * @restrict q4B, dfloat * @restrict q5B, dfloat *  q6B){

  if(bc==1){
    *q1B = q1M; 
    *q2B = -q2M;
    *q3B = -q3M;
    *q4B = q4M;
    *q5B = q5M;
    *q6B = q6M;
  }
  if(bc>1){ // wall for non-mean flow
    *q1B = 2.f*p_q1bar - q1M; 
    *q2B = 2.f*ramp*p_q2bar - q2M; 
    *q3B = 2.f*ramp*p_q3bar - q3M; 
    *q4B = 2.f*ramp*ramp*p_q4bar - q4M;
    *q5B = 2.f*ramp*ramp*p_q5bar - q5M;
    *q6B = 2.f*ramp*ramp*p_q6bar - q6M;
  }
}


@kernel void boltzmannSplitPmlErrorIndicator2D(const int Nelements,		 
					      @restrict const  dfloat *  sgeo,	 
					      @restrict const  dfloat *  w, // 3Nfp surface node weighs	 
					      @restrict const  int   *  vmapM,	 
					      @restrict const  int   *  vmapP,	 
					      @restrict const  int   *  EToB,	 
					      const dfloat time,		 
					      @restrict const  dfloat *  x,	 
					      @restrict const  dfloat *  y,	 
					      const dfloat ramp,		 
					      @restrict const  dfloat4 *  q,
					      @restrict dfloat *  qindicator){


  for(int eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){
    @shared dfloat s_dq2[p_NblockS][p_NfpNfaces];

    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_NfpNfaces;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
	int e = eo + es;
	if(e<Nelements){

	  // find face that owns this node
	  const int face = n/p_Nfp;
	  
	  // load surface geofactors for this face
	  const int sid = p_Nsgeo*(element*p_Nfaces+face);
	  const dfloat nx = sgeo[sid+0];
	  const dfloat ny = sgeo[sid+1];
	  const dfloat sJ = sgeo[sid+2];
	  const dfloat invJ = sgeo[sid+3];
	  
	  // indices of negative and positive traces of face node
	  const int id  = element*p_Nfp*p_Nfaces + n;
	  int idM = vmapM[id];
	  int idP = vmapP[id];
	  
	  if(idP<0) idP = idM;
	  
	  // load negative and positive trace node values of q
	  const dfloat4 qMa = q[2*idM], qMb = q[2*idM+1];
	  const dfloat4 qPa = q[2*idP], qPb = q[2*idP+1];
	  
	  const dfloat q1M = qMa.x, q2M = qMa.y, q3M = qMa.z, q4M = qMa.w, q5M = qMb.x, q6M = qMb.y;
	  dfloat q1P = qPa.x, q2P = qPa.y, q3P = qPa.z, q4P = qPa.w, q5P = qPb.x, q6P = qPb.y;
	  
	  // apply boundary condition
	  int bc = EToB[face+p_Nfaces*element];
	  if(bc>0)
	    boundaryConditions2D(bc, time, x[idM], y[idM], nx, ny, ramp,
				 q1M, q2M, q3M, q4M, q5M, q6M,
				 &q1P, &q2P, &q3P, &q4P, &q5P, &q6P);
	  
	  // compute (q^*)
	  dfloat q1U, q2U, q3U, q4U, q5U, q6U;		    
	  
	  upwind1D(nx, ny, q1M, q2M, q3M, q4M, q5M, q6M, q1P, q2P, q3P, q4P, q5P, q6P, &q1U, &q2U, &q3U, &q4U, &q5U, &q6U);
	  
	  
	  // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
	  const dfloat sc = invJ*sJ*w[n];
	  dfloat res =
	    (q1U-q1M)*(q1U-q1M) + (q2U-q2M)*(q2U-q2M) + (q3U-q3M)*(q3U-q3M) +
	    (q4U-q4M)*(q4U-q4M) + (q5U-q5M)*(q5U-q5M) + (q6U-q6M)*(q6U-q6M);

	  s_dq2[es][n] = res*sc;
	  
	}
      }
    }

    @barrier("local");

    int alive = (p_NfpNfaces+1)/2;
    while(n<alive){
      
      for(int es=0;es<p_NblockS;++es;@inner(1)){
	for(int n=0;n<p_NfpNfaces;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
	  int e = eo + es;
	  if(e<Nelements){
	    if(n+alive<p_NfpNfaces)
	      s_dq2[es][n] += s_dq2[es][n+alive];
	  }
	  alive = alive/2;
	}
      }
    }

    @barrier("local");

    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_NfpNfaces;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
	int e = eo + es;
	if(e<Nelements){
	  if(n==0)
	    qindicator[e] = s_dq2[es][0];
	}
      }
    }
  }
}
