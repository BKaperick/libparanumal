/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

#define dfloat float
#define int unsigned int

kernel void applyWADG(const int Nelements,
                      const dfloat * restrict cubInterq,
                      const dfloat * restrict cubProject,
                      const dfloat * restrict weight,
                      dfloat * restrict q){

  for(int eo = 0; eo < Nelements; eo += p_Kblk; outer0){

    shared dfloat s_q[p_Kblk][p_cubNp];
    exclusive dfloat r_p;

    for(int es = 0; es < p_Kblk; ++es;inner1){
      for(int n=0; n < p_cubNp; ++n; inner0){

        const int e = es + eo;

        if (n < p_Np & e < Nelements){

          const int id = e*p_Np + n;
          s_q[es][n] = q[id]; // extract field var

          // Initialize register variable
          r_p = 0.f;
        }

      }
    }
    barrier(localMemFence);

    for(int es = 0; es < p_Kblk; ++es;inner1){

      // Interqolate to cubature nodes
      for(int n=0; n < p_cubNp; ++n; inner0){

        const int e = es + eo;

        if (e < Nelements){

          // Prefetch value of weight
          const dfloat weight_n = weight[n + e*p_cubNp];

          dfloat val = 0.f;
          for (int i=0;i<p_Np;++i){
            val += cubInterq[n + i*p_cubNp] * s_q[es][i];
          }

          // Multiply by weight at cubature node
          r_p = val * weight_n;
        }
      }
    }
    barrier(localMemFence);

    // Move temporary result back to shared memory
    for(int es = 0; es < p_Kblk; ++es;inner1){
      for(int n=0;n<p_cubNp;++n;inner0){
        const int e = es+eo;
        if (e < Nelements){
          s_q[es][n] = r_p;
        }
      }
    }
    barrier(localMemFence);

    // Increment solution, project result back down
    for(int es = 0; es < p_Kblk; ++es; inner1){
      for(int n=0; n<p_cubNp; ++n; inner0){
        const int e = es + eo;
        if (n < p_Np & e < Nelements){

          // Project scaled rhs down
          dfloat pp = 0.f;
          for (int i=0;i<p_cubNp;++i){
            pp += cubProject[n + i*p_Np] * s_q[es][i];
          }

          // Increment solutions
          q[n + e*p_Np] = pp;

        }

      }
    }

  }
}


kernel void applyPw(const int Nelements,
                    const dfloat * restrict Pw,
                    dfloat * restrict rhs){

  for(int eo = 0; eo < Nelements; eo += p_Kblk; outer0){

    shared dfloat s_q[p_Kblk][p_Np];

    for(int es = 0; es < p_Kblk; ++es; inner1){
      for(int n=0; n < p_Np; ++n; inner0){
        const int e = eo + es;
        if (e < Nelements){
          s_q[es][n] = q[n + e*p_Np];
        }
      }
    }
    barrier(localMemFence);

    for(int es = 0; es < p_Kblk; ++es; inner1){
      for(int n=0; n < p_Np; ++n; inner0){
        const int e = es+eo;
        if (e < Nelements){
          dfloat val = 0.f;
          for(int m=0; m < p_Np; ++m){
            const dfloat Pwm = Pw[n + m*p_Np + e*p_Np2];
            val += Pwm * s_q[es][m];
          }
          q[n + e*p_Np] = val;
        }
      }
    }

  }
}
