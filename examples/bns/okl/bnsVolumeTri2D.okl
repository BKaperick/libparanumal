// Only difference with boltzmannVolume2D is size of rhsq and shifting
kernel void bnsVolumeTri2D(const dlong Nelements,
                        const dlong * restrict elementIds,
                        const dfloat ramp,
                        const dfloat drampdt,
                        const int nrhs,
                        const int shift,
                        const dfloat * restrict vgeo,
                        const dfloat * restrict DrT,
                        const dfloat * restrict DsT,
                        const dfloat * restrict q,
                              dfloat * restrict rhsq){
  
  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;outer0){  // for all elements

    shared dfloat s_q[p_NblockV][p_Nfields][p_Np];
    exclusive dlong e;

  for(int es=0;es<p_NblockV;++es;inner1){// for all elements in block
    for(int n=0;n<p_Np;++n;inner0){     // for all nodes in this element

      dlong et = eo+es; // element in block

      if(et<Nelements){
        e = elementIds[et];
        const dlong id = e*p_Nfields*p_Np + n;
        
        occaUnroll(p_Nfields)
        for(int fld=0; fld<p_Nfields;++fld){
          s_q[es][fld][n] = q[id+fld*p_Np];
        }

      }
    }
  }

    // make sure all node data is loaded into shared
    barrier(localMemFence);

  for(int es=0;es<p_NblockV;++es;inner1){// for all elements in block
    for(int n=0;n<p_Np;++n;inner0){     // for all nodes in this element 
      int et = eo+es; // element in block
      if(et<Nelements){   
        // prefetch geometric factors (constant on triangle)
        const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
        const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
        const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
        const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];

        // compute 'r' and 's' derivatives of (q_m) at node n
        dfloat r_dqdr[p_Nfields], r_dqds[p_Nfields]; 
        dfloat r_dqdx[p_Nfields], r_dqdy[p_Nfields];
        dfloat r_rhsq[p_Nfields];
        
        occaUnroll(p_Nfields)
        for(int fld=0; fld<p_Nfields;++fld){
          r_dqdr[fld] = 0.f, r_dqds[fld] = 0.f;
          r_dqdx[fld] = 0.f, r_dqdy[fld] = 0.f;
          r_rhsq[fld] = 0.f;
         }

        occaUnroll(p_Np)
        for(int i=0;i<p_Np;++i){
          const dfloat Drni = DrT[n+i*p_Np];
          const dfloat Dsni = DsT[n+i*p_Np];
          occaUnroll(p_Nfields)
          for(int fld=0; fld<p_Nfields;++fld){
           r_dqdr[fld] += Drni*s_q[es][fld][i];
           r_dqds[fld] += Dsni*s_q[es][fld][i];
         }
        }
      
        // Compute derivatives in physical coordinates 
        occaUnroll(p_Nfields)
        for(int fld=0; fld<p_Nfields;++fld){
          r_dqdx[fld] = drdx*r_dqdr[fld] + dsdx*r_dqds[fld];
          r_dqdy[fld] = drdy*r_dqdr[fld] + dsdy*r_dqds[fld];
        }

         // transport operator
        r_rhsq[0] = -p_sqrtRT*(r_dqdx[1] + r_dqdy[2]);
        r_rhsq[1] = -p_sqrtRT*(r_dqdx[0] + p_sqrt2*r_dqdx[4] + r_dqdy[3]); 
        r_rhsq[2] = -p_sqrtRT*(r_dqdx[3] + r_dqdy[0] + p_sqrt2*r_dqdy[5]); 
        r_rhsq[3] = -p_sqrtRT*(r_dqdx[2] + r_dqdy[1]);   
        r_rhsq[4] = -p_sqrtRT*p_sqrt2*r_dqdx[1];     
        r_rhsq[5] = -p_sqrtRT*p_sqrt2*r_dqdy[2];        

        
        // Add mean flow forcing
        r_rhsq[1] += drampdt*p_q2bar;
        r_rhsq[2] += drampdt*p_q3bar;
        r_rhsq[3] += 2.f*ramp*drampdt*p_q4bar;
        r_rhsq[4] += 2.f*ramp*drampdt*p_q5bar;
        r_rhsq[5] += 2.f*ramp*drampdt*p_q6bar;

         // Update 
        const dlong id = e*p_Nfields*p_Np + n;

        // const int rhsId = nrhs*id + p_Nfields*shift;
        const dlong rhsId = id; 
       
        for(int fld=0; fld<p_Nfields;++fld){
          rhsq[rhsId + fld*p_Np] = r_rhsq[fld];
        }


      }
    }
  }
}
}




kernel void bnsPmlVolumeTri2D(const dlong pmlNelements,
              const dlong * restrict pmlElementIds,
              const dlong * restrict pmlIds,
              const dfloat ramp,
              const dfloat drampdt,
              const int nrhs, 
              const int shift,
              const dfloat * restrict vgeo,
              const dfloat * restrict DrT,
              const dfloat * restrict DsT,
              const dfloat * restrict q,
              const dfloat * restrict pmlqx,
              const dfloat * restrict pmlqy,
                    dfloat * restrict rhsq,
                    dfloat * restrict pmlrhsqx,
                    dfloat * restrict pmlrhsqy){
  
  for(dlong eo=0;eo<pmlNelements;eo+=p_NblockV;outer0){  // for all elements

    shared dfloat s_q[p_NblockV][p_Nfields][p_Np];
    exclusive dlong e, pmlId;

    for(int es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(int n=0;n<p_Np;++n;inner0){     // for all nodes in this element

      dlong et = eo+es; // element in block
      if(et<pmlNelements){
        e     = pmlElementIds[et];
        pmlId = pmlIds[et];

        const dlong id = e*p_Nfields*p_Np + n;
        occaUnroll(p_Nfields)
        for(int fld=0; fld<p_Nfields;++fld){
          s_q[es][fld][n] = q[id+fld*p_Np];
        }
      }
     }
    }

    // make sure all node data is loaded into shared
    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(int n=0;n<p_Np;++n;inner0){     // for all nodes in this element 
       dlong et = eo+es; // element in block
       if(et<pmlNelements){  

        // prefetch geometric factors 
        const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
        const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
        const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
        const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
        
        // Pack register variables into arrays 
        // dfloat r_pmlqx[p_Nfields], r_pmlqy[p_Nfields];
        dfloat r_dqdr[p_Nfields],  r_dqds[p_Nfields];
        dfloat r_dqdx[p_Nfields],  r_dqdy[p_Nfields];
        dfloat r_Aqx[p_Nfields],   r_Bqy[p_Nfields];
        dfloat r_N[p_Nfields];
        
        // Initialize
        occaUnroll(p_Nfields)
        for(int fld=0; fld<p_Nfields; ++fld){
          //r_pmlqx[fld] = 0.f, r_pmlqy[fld] = 0.f; 
          r_dqdr[fld]  = 0.f, r_dqds[fld]  = 0.f; 
          r_dqdx[fld]  = 0.f, r_dqdy[fld]  = 0.f; 
          r_N[fld]     = 0.f; 
        }
    
        // Compute Derivatives
        occaUnroll(p_Np)
        for(int i=0;i<p_Np;++i){
          const dfloat Drni = DrT[n+i*p_Np];
          const dfloat Dsni = DsT[n+i*p_Np];
          occaUnroll(p_Nfields)
          for(int fld=0; fld<p_Nfields; ++fld){
            r_dqdr[fld] += Drni*s_q[es][fld][i];
            r_dqds[fld] += Dsni*s_q[es][fld][i];
          }
        }
        
        occaUnroll(p_Nfields)
        for(int fld=0; fld<p_Nfields; ++fld){
          r_dqdx[fld] = drdx*r_dqdr[fld] + dsdx*r_dqds[fld];
          r_dqdy[fld] = drdy*r_dqdr[fld] + dsdy*r_dqds[fld];
        }
  
        // Compute volume flux for q, qx and qy
        // A*dQ/dx
        r_Aqx[0] = -p_sqrtRT*(r_dqdx[1]);
        r_Aqx[1] = -p_sqrtRT*(r_dqdx[0] + p_sqrt2*r_dqdx[4]);  
        r_Aqx[2] = -p_sqrtRT*(r_dqdx[3]);
        r_Aqx[3] = -p_sqrtRT*(r_dqdx[2]);
        r_Aqx[4] = -p_sqrtRT*p_sqrt2*r_dqdx[1];      
        r_Aqx[5] =  0.f;
        // B*dQ/dy
        r_Bqy[0] = -p_sqrtRT*(r_dqdy[2]);
        r_Bqy[1] = -p_sqrtRT*(r_dqdy[3]);  
        r_Bqy[2] = -p_sqrtRT*(r_dqdy[0] + p_sqrt2*r_dqdy[5]);  
        r_Bqy[3] = -p_sqrtRT*(r_dqdy[1]);    
        r_Bqy[4] =  0.f;
        r_Bqy[5] = -p_sqrtRT*p_sqrt2*r_dqdy[2];  

        // mean flow forcing 
        r_N[0] = 0.f;
        r_N[1] = drampdt*p_q2bar;
        r_N[2] = drampdt*p_q3bar;
        r_N[3] = 2.f*ramp*drampdt*p_q4bar;
        r_N[4] = 2.f*ramp*drampdt*p_q5bar;
        r_N[5] = 2.f*ramp*drampdt*p_q6bar;
 
        // Update
        // const dlong id       = p_Nfields*(e*p_Np + n);
        // const dlong rhsId    = nrhs*id + p_Nfields*shift;
        // const dlong pmlrhsId = nrhs*p_Nfields*(pmlId*p_Np + n) + p_Nfields*shift; 
        const dlong id       = e*p_Nfields*p_Np + n;
        const dlong rhsId    = id;
        const dlong pmlrhsId = p_Nfields*pmlId*p_Np + n; 
        
        occaUnroll(p_Nfields)
        for(int fld=0; fld<p_Nfields; ++fld){
          pmlrhsqx[pmlrhsId + fld*p_Np] =  r_Aqx[fld];
          pmlrhsqy[pmlrhsId + fld*p_Np] =  r_Bqy[fld];
          rhsq[rhsId +fld*p_Np]         =  r_Aqx[fld] + r_Bqy[fld] + r_N[fld];
         
        }

      }
    }
  }
  
}
}


