
// Roe averaged Riemann solver
void upwind(const dfloat nx,
	    const dfloat ny,
	    const dfloat nz,
	    const dfloat rM,
	    const dfloat uM,
	    const dfloat vM,
	    const dfloat wM,
	    const dfloat rP,
	    const dfloat uP,
	    const dfloat vP,
	    const dfloat wP,
	    dfloat *rflux,
	    dfloat *uflux,
	    dfloat *vflux,
	    dfloat *wflux){

  //subtract F(qM)
  dfloat ndotUM = nx*uM + ny*vM + nz*wM;
  dfloat ndotUP = nx*uP + ny*vP + nz*wP;
  *rflux   = p_half*(ndotUM+ndotUP-(rP-rM));
  *uflux  = p_half*nx*(rP+rM - (ndotUP-ndotUM));
  *vflux  = p_half*ny*(rP+rM - (ndotUP-ndotUM));
  *wflux  = p_half*nz*(rP+rM - (ndotUP-ndotUM));
  
}

#define surfaceTerms(sk,face, i, j, k)                                  \
  {									\
    const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];				\
    const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];				\
    const dfloat nz = sgeo[sk*p_Nsgeo+p_NZID];				\
    const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];				\
    const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];			\
                                                                        \
    const dlong idM = vmapM[sk];					\
    const dlong idP = vmapP[sk];					\
                                                                        \
    const dlong eM = e;							\
    const dlong eP = idP/p_Np;						\
    const int vidM = idM%p_Np;						\
    const int vidP = idP%p_Np;						\
                                                                        \
    const dlong qbaseM = eM*p_Np*p_Nfields + vidM;			\
    const dlong qbaseP = eP*p_Np*p_Nfields + vidP;			\
									\
    const dfloat rM  = q[qbaseM + 0*p_Np];				\
    const dfloat uM = q[qbaseM + 1*p_Np];				\
    const dfloat vM = q[qbaseM + 2*p_Np];				\
    const dfloat wM = q[qbaseM + 3*p_Np];				\
									\
    dfloat rP  = q[qbaseP + 0*p_Np];					\
    dfloat uP = q[qbaseP + 1*p_Np];					\
    dfloat vP = q[qbaseP + 2*p_Np];					\
    dfloat wP = q[qbaseP + 3*p_Np];					\
									\
    const int bc = EToB[face+p_Nfaces*e];				\
    if(bc>0){								\
      acousticsDirichletConditions3D(bc, time, x[idM], y[idM], z[idM], nx, ny, nz, rM, uM, vM, wM, &rP, &uP, &vP, &wP); \
    }									\
    									\
    const dfloat sc = invWJ*sJ;						\
    									\
    dfloat rflux, uflux, vflux, wflux;				\
    upwind(nx, ny, nz, rM, uM, vM, wM, rP, uP, vP, wP, &rflux, &uflux, &vflux, &wflux); \
									\
									\
    const dlong base = e*p_Np*p_Nfields+k*p_Nq*p_Nq + j*p_Nq+i;		\
    rhsq[base+0*p_Np] += sc*(-rflux);					\
    rhsq[base+1*p_Np] += sc*(-uflux);					\
    rhsq[base+2*p_Np] += sc*(-vflux);					\
    rhsq[base+3*p_Np] += sc*(-wflux);					\
  }

// batch process elements
kernel void acousticsSurfaceHex3D(const dlong Nelements,
				  const dfloat * restrict sgeo,
				  const dfloat * restrict LIFTT,	
				  const dlong  * restrict vmapM,
				  const dlong  * restrict vmapP,
				  const int    * restrict EToB,
				  const dfloat time,
				  const dfloat * restrict x,
				  const dfloat * restrict y,
				  const dfloat * restrict z,
				  const dfloat * restrict q,
				  dfloat * restrict rhsq){
  
  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;outer0){
    
    // for all face nodes of all elements
    // face 0 & 5
    for(int es=0;es<p_NblockS;++es;inner2){
      for(int j=0;j<p_Nq;++j;inner1){
	for(int i=0;i<p_Nq;++i;inner0){
	  const dlong e = eo + es;
	  if(e<Nelements){
	    const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + j*p_Nq + i;
	    const dlong sk5 = e*p_Nfp*p_Nfaces + 5*p_Nfp + j*p_Nq + i;
            
	    surfaceTerms(sk0,0,i,j,0     );
	    surfaceTerms(sk5,5,i,j,(p_Nq-1));
	  }
	}
      }
    }
    
    barrier(globalMemFence);
    
    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;inner2){
      for(int k=0;k<p_Nq;++k;inner1){
	for(int i=0;i<p_Nq;++i;inner0){
	  const dlong e = eo + es;
	  if(e<Nelements){
	    const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + k*p_Nq + i;
	    const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + k*p_Nq + i;
            
	    surfaceTerms(sk1,1,i,0     ,k);
	    surfaceTerms(sk3,3,i,(p_Nq-1),k);
	  }
	}
      }
    }
    
    barrier(globalMemFence);
    
    // face 2 & 4
    for(int es=0;es<p_NblockS;++es;inner2){
      for(int k=0;k<p_Nq;++k;inner1){
	for(int j=0;j<p_Nq;++j;inner0){
	  const dlong e = eo + es;
	  if(e<Nelements){
	    const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + k*p_Nq + j;
	    const dlong sk4 = e*p_Nfp*p_Nfaces + 4*p_Nfp + k*p_Nq + j;
            
	    surfaceTerms(sk2,2,(p_Nq-1),j,k);
	    surfaceTerms(sk4,4,0     ,j,k);
	  }
	}
      }
    }
  }
}

