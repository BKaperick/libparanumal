
// Roe averaged Riemann solver
void upwind(const dfloat nx,
	    const dfloat ny,
	    const dfloat rM,
	    const dfloat uM,
	    const dfloat vM,
	    const dfloat rP,
	    const dfloat uP,
	    const dfloat vP,
	    dfloat *rflux,
	    dfloat *uflux,
	    dfloat *vflux){

  //subtract F(qM)
  dfloat ndotUM = nx*uM + ny*vM;
  dfloat ndotUP = nx*uP + ny*vP;
  *rflux   = p_half*(ndotUM+ndotUP-(rP-rM));
  *uflux  = p_half*nx*(rP+rM - (ndotUP-ndotUM));
  *vflux  = p_half*ny*(rP+rM - (ndotUP-ndotUM));
  
}


#define surfaceTerms(sk,face,i, j)                                      \
  {									\
    const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];				\
    const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];				\
    const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];				\
    const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];			\
    									\
    const dlong idM = vmapM[sk];					\
    const dlong idP = vmapP[sk];					\
    									\
    const dlong eM = e;							\
    const dlong eP = idP/p_Np;						\
    const int vidM = idM%p_Np;						\
    const int vidP = idP%p_Np;						\
									\
    const dlong qbaseM = eM*p_Np*p_Nfields + vidM;			\
    const dlong qbaseP = eP*p_Np*p_Nfields + vidP;			\
									\
    const dfloat rM  = q[qbaseM + 0*p_Np];				\
    const dfloat uM = q[qbaseM + 1*p_Np];				\
    const dfloat vM = q[qbaseM + 2*p_Np];				\
									\
    dfloat rP = q[qbaseP + 0*p_Np];					\
    dfloat uP = q[qbaseP + 1*p_Np];					\
    dfloat vP = q[qbaseP + 2*p_Np];					\
    									\
    const int bc = EToB[face+p_Nfaces*e];				\
    if(bc>0){								\
      acousticsDirichletConditions2D(bc, time, x[idM], y[idM], nx, ny, rM, uM, vM, &rP, &uP, &vP); \
    }									\
    									\
    const dfloat sc = invWJ*sJ;						\
    									\
    dfloat rflux, uflux, vflux;						\
    upwind(nx, ny, rM, uM, vM, rP, uP, vP, &rflux, &uflux, &vflux);	\
    									\
    s_rflux[es][j][i] += sc*(-rflux);					\
    s_uflux[es][j][i] += sc*(-uflux);					\
    s_vflux[es][j][i] += sc*(-vflux);					\
  }
  
// batch process elements
kernel void acousticsSurfaceQuad2D(const dlong Nelements,
				   const dfloat * restrict sgeo,
				   const dfloat * restrict LIFTT,
				   const dlong  * restrict vmapM,
				   const dlong  * restrict vmapP,
				   const int    * restrict EToB,
				   const dfloat time,
				   const dfloat * restrict x,
				   const dfloat * restrict y,
				   const dfloat * restrict z,	
				   const dfloat * restrict q,
                                   dfloat * restrict rhsq){
  
  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;outer0){
    
    // shared storage for flux terms
    shared dfloat s_rflux [p_NblockS][p_Nq][p_Nq];
    shared dfloat s_uflux[p_NblockS][p_Nq][p_Nq];
    shared dfloat s_vflux[p_NblockS][p_Nq][p_Nq];

    for(int es=0;es<p_NblockS;++es;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
	  for(int j=0;j<p_Nq;++j){
	    s_rflux[es][j][i] = 0.;
	    s_uflux[es][j][i] = 0.;
	    s_vflux[es][j][i] = 0.;
	  }
      }
    }

    barrier(localMemFence);

    // for all face nodes of all elements
    // face 0 & 2
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong e = eo + es;
        if(e<Nelements){
          const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i;
          const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i;

          surfaceTerms(sk0,0,i,0     );
          surfaceTerms(sk2,2,i,p_Nq-1);
        }
      }
    }

    barrier(localMemFence);

    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int j=0;j<p_Nq;++j;inner0){
        const dlong e = eo + es;
        if(e<Nelements){
          const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
          const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

          surfaceTerms(sk1,1,p_Nq-1,j);
          surfaceTerms(sk3,3,0     ,j);
        }
      }
    }

    barrier(localMemFence);

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong e = eo + es;
        if(e<Nelements){
          occaUnroll(p_Nq)
	    for(int j=0;j<p_Nq;++j){
	      const dlong base = e*p_Np*p_Nfields+j*p_Nq+i;
	      rhsq[base+0*p_Np] += s_rflux [es][j][i];
	      rhsq[base+1*p_Np] += s_uflux[es][j][i];
	      rhsq[base+2*p_Np] += s_vflux[es][j][i];
	    }
        }
      }
    }
  }
}
