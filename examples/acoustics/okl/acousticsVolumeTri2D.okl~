
// isothermal Compressible Navier-Stokes
kernel void acousticsVolumeTri2D(const dlong Nelements,
                            const dfloat * restrict vgeo,
                            const dfloat * restrict DT,
                            const dfloat * restrict q,
                                  dfloat * restrict rhsq){
  
  for(dlong e=0;e<Nelements;++e;outer0){

    shared dfloat s_F[p_Nfields][p_Np];
    shared dfloat s_G[p_Nfields][p_Np];
    
    for(int n=0;n<p_Np;++n;inner0){

      // prefetch geometric factors (constant on triangle)
      const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
      const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
      const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
      const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];

      const dlong  qbase = e*p_Np*p_Nfields + n;
      const dfloat r  = q[qbase+0*p_Np];
      const dfloat u = q[qbase+1*p_Np];
      const dfloat v = q[qbase+2*p_Np];

      {
        const dfloat f = -u;
        const dfloat g = -v;
        s_F[0][n] = drdx*f + drdy*g;
        s_G[0][n] = dsdx*f + dsdy*g;
      }

      {
        const dfloat f = -p;
        const dfloat g = 0;
        s_F[1][n] = drdx*f + drdy*g;
        s_G[1][n] = dsdx*f + dsdy*g;
      }

      {
        const dfloat f = 0;
        const dfloat g = -p;
        s_F[2][n] = drdx*f + drdy*g;
        s_G[2][n] = dsdx*f + dsdy*g;
      }
    }

    barrier(localMemFence);
    
    for(int n=0;n<p_Np;++n;inner0){    

      dfloat rhsq0 = 0, rhsq1 = 0, rhsq2 = 0;

      for(int i=0;i<p_Np;++i){
        const dfloat Drni = DT[n+i*p_Np+0*p_Np*p_Np];
        const dfloat Dsni = DT[n+i*p_Np+1*p_Np*p_Np];

        rhsq0 += Drni*s_F[0][i]
                +Dsni*s_G[0][i];
        rhsq1 += Drni*s_F[1][i]
                +Dsni*s_G[1][i];
        rhsq2 += Drni*s_F[2][i]
                +Dsni*s_G[2][i];
      }
      
      const dlong base = e*p_Np*p_Nfields + n;
      
      // move to rhs
      rhsq[base+0*p_Np] = rhsq0;
      rhsq[base+1*p_Np] = rhsq1;
      rhsq[base+2*p_Np] = rhsq2;
    }
  }
}


