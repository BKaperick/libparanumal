
// rhsP = -MM*Div Uhat/ dt
kernel void insPressureRhsTri2D(const dlong Nelements,
                                const dfloat * restrict vgeo,
                                const dfloat * restrict MM,
                                const dfloat idt,
                                const dfloat g0,
                                      dfloat * restrict rhsP){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;outer0){  // for all elements

    shared dfloat s_rhsP[p_NblockV][p_Np];

    for(int es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(int n=0;n<p_Np;++n;inner0){     // for all nodes in this element
        const dlong e = eo+es; // element in block
        if(e<Nelements){
          const dlong id = e*p_Np+n;
          s_rhsP[es][n] = rhsP[id];
        }
      }
    }

    // Make sure all node data is loaded into shared
    barrier(localMemFence);

    // Multiply with Mass Matrix
    for(int es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(int n=0;n<p_Np;++n;inner0){     // for all nodes in this element
        const dlong e = eo+es; // element in block
        if(e<Nelements){
          const dfloat J = vgeo[e*p_Nvgeo + p_JID];
          dfloat rhsn = 0.f;

          occaUnroll(p_Np)
            for(int i=0;i<p_Np;++i){
              const dfloat M = MM[n+i*p_Np];
              rhsn += M*s_rhsP[es][i];
            }

          const dlong id = e*p_Np+n;
          rhsP[id] = -J*g0*rhsn*idt;
        }
      }
    }
  }
}
