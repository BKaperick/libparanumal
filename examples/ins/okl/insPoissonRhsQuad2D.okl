
// Computes volume contribution of div(UI)
kernel void insPoissonRhsForcingQuad2D(const dlong Nelements,
                                   const dfloat * restrict vgeo,
                                   const dfloat dt,
                                   const dfloat g0,
                                    dfloat * restrict rhs){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;outer0){  // for all elements

    for(int es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(int n=0;n<p_Np;++n;inner0){     // for all nodes in this element
        const dlong e = eo+es; // element in block
        if(e<Nelements){
          const dlong gid = n + e*p_Np*p_Nvgeo;
          const dfloat JW = vgeo[gid + p_JWID*p_Np];

          const dlong id = e*p_Np+n;
          rhs[id] = -JW*g0*rhs[id]/dt;
        }
      }
    }
  }
}


#define surfaceTermsIpdg(sk,face,i, j)                                  \
{                                                                       \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];                          \
  const dfloat hinv= sgeo[sk*p_Nsgeo+p_IHID];                           \
                                                                        \
  dfloat dpdxP=0.f, dpdyP=0.f, pP=0.f;                                  \
                                                                        \
  const int bc = EToB[face+p_Nfaces*e];                                 \
  if(bc>0) {                                                            \
    const dlong idM = vmapM[sk];                                        \
    insPressureDirichletConditions2D(bc,time, x[idM], y[idM], nx, ny, 0.f, &pP);\
    insPressureNeumannConditions2D(bc,time, x[idM], y[idM], nx, ny, 0.f, 0.f, &dpdxP, &dpdyP);\
    if(pressure_solve==0){                                              \
      dfloat pPm1, dpdxPm1, dpdyPm1;                                    \
      insPressureDirichletConditions2D(bc,time-dt, x[idM], y[idM], nx, ny, 0.f, &pPm1);\
      insPressureNeumannConditions2D(bc,time-dt, x[idM], y[idM], nx, ny, 0.f, 0.f, &dpdxPm1, &dpdyPm1);\
      pP = pP - pPm1;                                                   \
      dpdxP = dpdxP - dpdxPm1;                                          \
      dpdyP = dpdyP - dpdyPm1;                                          \
    }                                                                   \
  }                                                                     \
                                                                        \
  const dfloat dp = pP;                                                 \
                                                                        \
  s_dpdx[j][i] += WsJ*nx*dp;                                            \
  s_dpdy[j][i] += WsJ*ny*dp;                                            \
                                                                        \
  s_rhsp[j][i] -= WsJ*(nx*dpdxP + ny*dpdyP+ tau*dp*hinv);               \
}

// Actually solves for Pr increamnet not presssure
kernel void insPoissonRhsIpdgBCQuad2D(const dlong Nelements,
                                      const int pressure_solve,
                                      const dlong  * restrict vmapM,
                                      const dfloat tau,
                                      const dfloat time,
                                      const dfloat dt,
                                      const dfloat * restrict x,
                                      const dfloat * restrict y,
                                      const dfloat * restrict z,
                                      const dfloat * restrict vgeo,
                                      const dfloat * restrict sgeo,
                                      const int    * restrict EToB,
                                      const dfloat * restrict D,
                                            dfloat * restrict rhsP){
  
  for(dlong e=0;e<Nelements;++e;outer0){

    shared dfloat s_dpdx[p_Nq][p_Nq];
    shared dfloat s_dpdy[p_Nq][p_Nq];
    shared dfloat s_rhsp[p_Nq][p_Nq];
    shared dfloat s_D[p_Nq][p_Nq];

    // loop over slabs
    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;inner0){
        s_dpdx[j][i] = 0.f;
        s_dpdy[j][i] = 0.f;
        s_rhsp[j][i] = 0.f;

        s_D[j][i] = D[j*p_Nq+i];
      }
    }

    barrier(localMemFence);

    // loop over faces to add pseudo-gradient

    // face 0 & 2
    for(int i=0;i<p_Nq;++i;inner0){
      const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i ;
      const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i ;

      surfaceTermsIpdg(sk0,0,i,0);
      surfaceTermsIpdg(sk2,2,i,p_Nq-1);
    }

    barrier(localMemFence);

    // face 1 & 3
    for(int j=0;j<p_Nq;++j;inner0){
      const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
      const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

      surfaceTermsIpdg(sk1,1,p_Nq-1,j);
      surfaceTermsIpdg(sk3,3,0,j);
    }

    barrier(localMemFence);

    // prescale by geofacs
    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;inner0){
        // does need the nasty geofacs
        const dlong gid = i + j*p_Nq + e*p_Np*p_Nvgeo;
        const dfloat drdx = vgeo[gid + p_RXID*p_Np];
        const dfloat drdy = vgeo[gid + p_RYID*p_Np];
        const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
        const dfloat dsdy = vgeo[gid + p_SYID*p_Np];

        // chain rule (need to scale by wei
        const dfloat dpdx = s_dpdx[j][i];
        const dfloat dpdy = s_dpdy[j][i];

        s_dpdx[j][i] = (drdx*dpdx + drdy*dpdy);
        s_dpdy[j][i] = (dsdx*dpdx + dsdy*dpdy);
      }
    }

    barrier(localMemFence);

    // loop over slabs
    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;inner0){
        dfloat dpr = 0, dps = 0;

        for(int n=0;n<p_Nq;++n){
          dpr += s_D[n][i]*s_dpdx[j][n];
          dps += s_D[n][j]*s_dpdy[n][i];
        }

        const dlong id = e*p_Np + j*p_Nq + i;
        rhsP[id] -= s_rhsp[j][i]  + dpr + dps;
      }
    }
  }
}

#define surfaceTerms(sk,face,i, j)                                      \
{                                                                       \
  const dlong idM = vmapM[sk];                                          \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];                          \
                                                                        \
  dfloat dpdxP=0.f, dpdyP=0.f, pP=0.f;                                  \
                                                                        \
  const int bc = mapB[idM];                                             \
  if(bc>0) {                                                            \
    insPressureDirichletConditions2D(bc,time, x[idM], y[idM], nx, ny, 0.f, &pP);\
    insPressureNeumannConditions2D(bc,time, x[idM], y[idM], nx, ny, 0.f, 0.f, &dpdxP, &dpdyP);\
    if(pressure_solve==0){                                              \
      dfloat pPm1, dpdxPm1, dpdyPm1;                                    \
      insPressureDirichletConditions2D(bc,time-dt, x[idM], y[idM], nx, ny, 0.f, &pPm1);\
      insPressureNeumannConditions2D(bc,time-dt, x[idM], y[idM], nx, ny, 0.f, 0.f, &dpdxPm1, &dpdyPm1);\
      pP = pP - pPm1;                                                   \
      dpdxP = dpdxP - dpdxPm1;                                          \
      dpdyP = dpdyP - dpdyPm1;                                          \
    }                                                                   \
  }                                                                     \
                                                                        \
  s_p  [j][i]  = pP;                                                    \
  s_ndp[j][i] -= WsJ*(nx*dpdxP + ny*dpdyP);                             \
}

//RHS contributions for continuous solver
kernel void insPoissonRhsBCQuad2D(const dlong Nelements,
                              const int pressure_solve,
                              const dfloat * restrict ggeo,
                              const dfloat * restrict sgeo,
                              const dfloat * restrict D,
                              const dlong  * restrict vmapM,
                              const dfloat time,
                              const dfloat dt,
                              const dfloat * restrict x,
                              const dfloat * restrict y,
                              const dfloat * restrict z,
                              const int    * restrict mapB,
                                   dfloat  * restrict rhsP){
  
  for(dlong e=0;e<Nelements;e++;outer0){
    shared dfloat s_p[p_Nq][p_Nq];
    shared dfloat s_ndp[p_Nq][p_Nq];
    shared dfloat s_D[p_Nq][p_Nq];

    exclusive dfloat r_pr[p_Nq], r_ps[p_Nq], r_rhsp[p_Nq];
    exclusive dfloat r_G00[p_Nq], r_G01[p_Nq], r_G11[p_Nq], r_GwJ[p_Nq];

    // loop over slabs
    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;inner0){
        s_p  [j][i] = 0.;
        s_ndp[j][i] = 0.;

        s_D[j][i] = D[j*p_Nq+i];
      }
    }

    barrier(localMemFence);

    // face 0 & 2
    for(int i=0;i<p_Nq;++i;inner0){
      const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i;
      const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i;

      surfaceTerms(sk0,0,i,0     );
      surfaceTerms(sk2,2,i,p_Nq-1);
    }
  
    barrier(localMemFence);

    // face 1 & 3
    for(int j=0;j<p_Nq;++j;inner0){
      const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
      const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

      surfaceTerms(sk1,1,p_Nq-1,j);
      surfaceTerms(sk3,3,0     ,j);
    }

    barrier(localMemFence);
    
    // loop over slabs
    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong base = e*p_Nggeo*p_Np + j*p_Nq + i;

        // assumes w*J built into G entries
        r_GwJ[j] = ggeo[base+p_GWJID*p_Np];
        r_G00[j] = ggeo[base+p_G00ID*p_Np];
        r_G01[j] = ggeo[base+p_G01ID*p_Np];
        r_G11[j] = ggeo[base+p_G11ID*p_Np];

        dfloat pr = 0.f, ps = 0.f;
        
        occaUnroll(p_Nq)
          for(int n=0; n<p_Nq; ++n){
            pr += s_D[i][n]*s_p[j][n];
            ps += s_D[j][n]*s_p[n][i];
          }
        
        r_pr[j] = pr; r_ps[j] = ps; 
      }
    }

    // r term ----->
    barrier(localMemFence);

    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;inner0){
        s_p[j][i] = r_G00[j]*r_pr[j] + r_G01[j]*r_ps[j];
      }
    }
      
    barrier(localMemFence);

    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;inner0){
        dfloat tmp = 0.f;
        occaUnroll(p_Nq)
          for(int n=0;n<p_Nq;++n) {
            tmp += s_D[n][i]*s_p[j][n];
          }

        r_rhsp[j] = tmp;
      }
    }

    // s term ---->
    barrier(localMemFence);

    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;inner0){
        s_p[j][i] = r_G01[j]*r_pr[j] + r_G11[j]*r_ps[j];
      }
    }
      
    barrier(localMemFence);

    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;inner0){
        dfloat tmp = 0.f;

        occaUnroll(p_Nq) 
          for(int n=0;n<p_Nq;++n) {
            tmp += s_D[n][j]*s_p[n][i];
          }
        
        r_rhsp[j] += tmp;

        const dlong id = e*p_Np + j*p_Nq + i;
        rhsP[id] -= r_rhsp[j] + s_ndp[j][i];
      }
    }
  }
}

kernel void insPoissonAddBCQuad2D(const dlong Nelements,
                                  const int pressure_solve,
                                  const dfloat time,
                                  const dfloat dt,
                                  const dfloat * restrict x,
                                  const dfloat * restrict y,
                                  const dfloat * restrict z,
                                  const dlong  * restrict vmapM,
                                  const int    * restrict mapB,
                                        dfloat * restrict P){
  
  for(dlong e=0;e<Nelements;e++;outer0){
    for(int n=0;n<p_Nfp*p_Nfaces;++n;inner0){
      const dlong idM = vmapM[e*p_Nfp*p_Nfaces + n];
      const int bc = mapB[idM];

      if(bc>0) {
        const dfloat pM = P[idM];
        dfloat pP = 0.f;
        insPressureDirichletConditions2D(bc,time, x[idM], y[idM], nx, ny, pM, &pP);
        if(pressure_solve==0 && bc==3){ // if on an outflow BC and the pressure increment is in use
          dfloat pPm1 = 0.f;
          insPressureDirichletConditions2D(bc,time-dt, x[idM], y[idM], nx, ny, pM, &pPm1);
          pP = pP - pPm1;
        }
        P[idM] = pP;
      }    
    }
  }
}
