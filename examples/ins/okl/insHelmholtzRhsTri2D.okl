
// Compute RHS Forcing i.e. 1/nu*(-grad(Pr) + sum(a_i x u_i)^(n-i) -sum(b_i x N(u)^(n-i))
kernel void insHelmholtzRhsForcingTri2D(const dlong Nelements,
                                        const int subcycling,  
                                        const dfloat * restrict vgeo,
                                        const dfloat * restrict MM,
                                        const dfloat idt,
                                        const dfloat inu,
                                        const dfloat a0,
                                        const dfloat a1,
                                        const dfloat a2,
                                        const dfloat b0,
                                        const dfloat b1,
                                        const dfloat b2,
                                        const dfloat c0,
                                        const dfloat c1,
                                        const dfloat c2,
                                        const dlong offset,
                                        const dfloat * restrict U,
                                        const dfloat * restrict NU,
                                        const dfloat * restrict gradP,
                                              dfloat * restrict rhsU,
                                              dfloat * restrict rhsV,
                                              dfloat * restrict rhsW){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;outer0){

    shared dfloat s_rhsU[p_NblockV][p_Np];
    shared dfloat s_rhsV[p_NblockV][p_Np];

    for(int es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(int n=0;n<p_Np;++n;inner0){     // for all nodes in this element
        const dlong e = eo+es; // element in block
        if(e<Nelements){
          const dlong id = n + p_Np*e;

          //hard coded for 3 stages       
          const dlong id0   = id + 0*offset*p_NVfields;
          const dlong id1   = id + 1*offset*p_NVfields;
          const dlong id2   = id + 2*offset*p_NVfields;

          const dfloat J = vgeo[e*p_Nvgeo + p_JID];
          
          // gradP
          const dfloat Pxm0 = gradP[id0+0*offset];
          const dfloat Pxm1 = gradP[id1+0*offset];
          const dfloat Pxm2 = gradP[id2+0*offset];

          const dfloat Pym0 = gradP[id0+1*offset];
          const dfloat Pym1 = gradP[id1+1*offset];
          const dfloat Pym2 = gradP[id2+1*offset];

          if(subcycling==0){ //no subcycling
            //U
            const dfloat Um0  = U[id0+0*offset];
            const dfloat Um1  = U[id1+0*offset];
            const dfloat Um2  = U[id2+0*offset];
            //V
            const dfloat Vm0  = U[id0+1*offset];
            const dfloat Vm1  = U[id1+1*offset];
            const dfloat Vm2  = U[id2+1*offset];
            
            // NU
            const dfloat NUm0 = NU[id0+0*offset];
            const dfloat NUm1 = NU[id1+0*offset];
            const dfloat NUm2 = NU[id2+0*offset];
            // NV
            const dfloat NVm0 = NU[id0+1*offset];
            const dfloat NVm1 = NU[id1+1*offset];
            const dfloat NVm2 = NU[id2+1*offset];  

            // // -> (-L + gamma/dt*nu I)U = 1/nu*[sum(b_i*U_i)/dt - sum(a_i*NU_i) - sum(a_i*gradP_i)]
            s_rhsU[es][n]  = J*inu*( + (b0*Um0 +b1*Um1 +b2*Um2 )*idt 
                                       - (c0*Pxm0+c1*Pxm1+c2*Pxm2) 
                                       - (a0*NUm0+a1*NUm1+a2*NUm2) );

            s_rhsV[es][n]  = J*inu*( + (b0*Vm0 +b1*Vm1 +b2*Vm2 )*idt 
                                       - (c0*Pym0+c1*Pym1+c2*Pym2) 
                                       - (a0*NVm0+a1*NVm1+a2*NVm2) );
          } else{ //with subcycling
            //NU holds \hat{U} after subcycling
            const dfloat NUm0 = NU[id+0*offset];
            const dfloat NVm0 = NU[id+1*offset];

            // New Substeping Update
            s_rhsU[es][n]  = J*inu*(NUm0*idt - (c0*Pxm0+c1*Pxm1+c2*Pxm2));     
            s_rhsV[es][n]  = J*inu*(NVm0*idt - (c0*Pym0+c1*Pym1+c2*Pym2));                                                
          }

        }
      }
    }

    // make sure all node data is loaded into shared
    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(int n=0;n<p_Np;++n;inner0){     // for all nodes in this element
        const dlong e = eo+es; // element in block
        if(e<Nelements){
          // Multiplay with Mass Matrix
          const dlong id = e*p_Np+n;

          dfloat rhsu = 0.f, rhsv = 0.f;
          occaUnroll(p_Np)
            for(int i=0;i<p_Np;++i){
              const dfloat M = MM[n+i*p_Np];
              rhsu  += M*s_rhsU[es][i];
              rhsv  += M*s_rhsV[es][i];
            }
          // Update
          rhsU[id] = rhsu;
          rhsV[id] = rhsv;
        }
      }
    }
  }
}



kernel void insHelmholtzRhsIpdgBCTri2D(const dlong Nelements,
                                       const dlong * restrict vmapM,
                                       const dfloat tau,
                                       const dfloat t,
                                       const dfloat * restrict x,
                                       const dfloat * restrict y,
                                       const dfloat * restrict z,
                                       const dfloat * restrict vgeo,
                                       const dfloat * restrict sgeo,
                                       const int    * restrict EToB,
                                       const dfloat * restrict Dmatrices,
                                       const dfloat * restrict LIFTT,
                                       const dfloat * restrict MM,
                                             dfloat * restrict rhsU,
                                             dfloat * restrict rhsV,
                                             dfloat * restrict rhsW){

  for(dlong e=0;e<Nelements;++e;outer0){
    shared  dfloat s_dudx[p_Np];
    shared  dfloat s_dudy[p_Np];

    shared  dfloat s_dvdx[p_Np];
    shared  dfloat s_dvdy[p_Np];

    shared  dfloat s_lapu[p_Np];
    shared  dfloat s_lapv[p_Np];

    shared  dfloat s_nxdu[p_NfacesNfp];
    shared  dfloat s_nydu[p_NfacesNfp];
    shared  dfloat s_nxdv[p_NfacesNfp];
    shared  dfloat s_nydv[p_NfacesNfp];

    shared  dfloat s_lapuflux[p_NfacesNfp];
    shared  dfloat s_lapvflux[p_NfacesNfp];

    shared  dfloat s_Lnxdu[p_Np];
    shared  dfloat s_Lnydu[p_Np];
    shared  dfloat s_Lnxdv[p_Np];
    shared  dfloat s_Lnydv[p_Np];

    exclusive dlong idM;
    exclusive dfloat nx, ny, sJ, invJ, hinv;

    for(int n=0;n<p_maxNodes;++n;inner0){
      if(n<p_NfacesNfp){
        const dlong id  = n + e*p_Nfaces*p_Nfp;
        idM = vmapM[id];
        const int face = n/p_Nfp;
        dfloat dudxP=0, dudyP=0, uP=0;
        dfloat dvdxP=0, dvdyP=0, vP=0;
        
        // load surface geofactors for this face
        const dlong sid = p_Nsgeo*(e*p_Nfaces+face);
        nx = sgeo[sid+p_NXID];
        ny = sgeo[sid+p_NYID];
        sJ = sgeo[sid+p_SJID];
        invJ = sgeo[sid+p_IJID];
        hinv = sgeo[sid+p_IHID];

        const int bc = EToB[face+p_Nfaces*e];
        if(bc>0) {
          insVelocityDirichletConditions2D(bc, t, x[idM], y[idM], nx, ny, 0.f, 0.f, &uP, &vP);
          insVelocityNeumannConditions2D(bc, t, x[idM], y[idM], nx, ny, 0.f, 0.f, 0.f, 0.f, &dudxP, &dudyP, &dvdxP, &dvdyP);
        }

        const dfloat du = uP;
        const dfloat dv = vP;

        s_nxdu[n] = sJ*invJ*nx*du;
        s_nydu[n] = sJ*invJ*ny*du;
        s_nxdv[n] = sJ*invJ*nx*dv;
        s_nydv[n] = sJ*invJ*ny*dv;

        s_lapuflux[n] = sJ*invJ*(-nx*(dudxP)-ny*(dudyP) -tau*hinv*du);
        s_lapvflux[n] = sJ*invJ*(-nx*(dvdxP)-ny*(dvdyP) -tau*hinv*dv);
      }
    }

    barrier(localMemFence);

    // dqdx += LIFT*(sJ/J)*nx*dq
    for(int n=0;n<p_maxNodes;++n;inner0){
      if(n<p_Np){
        const dlong gid = e*p_Nvgeo;
        const dfloat drdx = vgeo[gid + p_RXID];
        const dfloat drdy = vgeo[gid + p_RYID];
        const dfloat dsdx = vgeo[gid + p_SXID];
        const dfloat dsdy = vgeo[gid + p_SYID];

        dfloat Lnxdu = 0;
        dfloat Lnydu = 0;
        dfloat Lnxdv = 0;
        dfloat Lnydv = 0;

        occaUnroll(p_NfacesNfp)
          for(int i=0;i<p_NfacesNfp;++i){
            Lnxdu += LIFTT[n+i*p_Np]*s_nxdu[i];
            Lnydu += LIFTT[n+i*p_Np]*s_nydu[i];
            Lnxdv += LIFTT[n+i*p_Np]*s_nxdv[i];
            Lnydv += LIFTT[n+i*p_Np]*s_nydv[i];
          }

        const dfloat dudx = Lnxdu;
        const dfloat dudy = Lnydu;
        const dfloat dvdx = Lnxdv;
        const dfloat dvdy = Lnydv;
        s_dudx[n] = drdx*dudx + drdy*dudy; // abuse of notation
        s_dudy[n] = dsdx*dudx + dsdy*dudy;
        s_dvdx[n] = drdx*dvdx + drdy*dvdy; // abuse of notation
        s_dvdy[n] = dsdx*dvdx + dsdy*dvdy;

        s_Lnxdu[n] = Lnxdu;
        s_Lnydu[n] = Lnydu;
        s_Lnxdv[n] = Lnxdv;
        s_Lnydv[n] = Lnydv;
      }
    }

    barrier(localMemFence);

    for(int n=0;n<p_maxNodes;++n;inner0){
      if(n<p_NfacesNfp){
        const int id = idM%p_Np;
        s_lapuflux[n] += sJ*invJ*(nx*s_Lnxdu[id]+ny*s_Lnydu[id]);
        s_lapvflux[n] += sJ*invJ*(nx*s_Lnxdv[id]+ny*s_Lnydv[id]);
      }

      if(n<p_Np){
        dfloat laur = 0, laus = 0;
        dfloat lavr = 0, lavs = 0;

        occaUnroll(p_Np)
          for(int i=0;i<p_Np;++i) {
              const dfloat Drn = Dmatrices[n+i*p_Np+0*p_Np*p_Np];
              const dfloat Dsn = Dmatrices[n+i*p_Np+1*p_Np*p_Np];
              laur += Drn*s_dudx[i];
              laus += Dsn*s_dudy[i];
              lavr += Drn*s_dvdx[i];
              lavs += Dsn*s_dvdy[i];
            }

        s_lapu[n] = -(laur+laus);
        s_lapv[n] = -(lavr+lavs);
      }
    }

    barrier(localMemFence);

    for(int n=0;n<p_maxNodes;++n;inner0){
      if(n<p_Np){
        dfloat lau = 0;
        dfloat lav = 0;

        // lift remaining surface terms
        occaUnroll(p_NfacesNfp)
          for(int i=0;i<p_NfacesNfp;++i){
            lau += LIFTT[n+i*p_Np]*s_lapuflux[i];
            lav += LIFTT[n+i*p_Np]*s_lapvflux[i];
          }

        s_lapu[n] += lau;
        s_lapv[n] += lav;
      }
    }

    barrier(localMemFence);

    for(int n=0;n<p_maxNodes;++n;inner0){
      if(n<p_Np){
        const dlong id = e*p_Np+n;
        const dfloat J = vgeo[e*p_Nvgeo + p_JID];

        dfloat Mlapu = 0;
        dfloat Mlapv = 0;

        // multiply by mass matrix
        occaUnroll(p_Np)
          for(int i=0;i<p_Np;++i){
            Mlapu += MM[n+i*p_Np]*s_lapu[i];
            Mlapv += MM[n+i*p_Np]*s_lapv[i];
          }

        rhsU[id] -=  J*Mlapu;
        rhsV[id] -=  J*Mlapv;
      }
    }
  }
}

//RHS contributions for continuous solver
kernel void insHelmholtzRhsBCTri2D(const dlong Nelements,
                                   const dfloat * restrict ggeo,
                                   const dfloat * restrict sgeo,
                                   const dfloat * restrict Dmatrices,
                                   const dfloat * restrict Smatrices,
                                   const dfloat * restrict MM,
                                   const dlong  * restrict vmapM,
                                   const dfloat * restrict sMT,
                                   const dfloat lambda,
                                   const dfloat time,
                                   const dfloat * restrict x,
                                   const dfloat * restrict y,
                                   const dfloat * restrict z,
                                   const int    * restrict mapB,
                                         dfloat  * restrict rhsU,
                                         dfloat  * restrict rhsV,
                                         dfloat  * restrict rhsW){
  
  for(dlong e=0;e<Nelements;e++;outer0){
    shared dfloat s_u[p_Np];
    shared dfloat s_v[p_Np];
    shared dfloat s_ndu[p_Nfp*p_Nfaces];
    shared dfloat s_ndv[p_Nfp*p_Nfaces];

    for(int n=0;n<p_maxNodes;++n;inner0){
      if(n<p_Np){
        s_u[n] = 0.;
        s_v[n] = 0.;
      }
      if(n<p_NfacesNfp){
        s_ndu[n] = 0.;
        s_ndv[n] = 0.;
      }
    }

    barrier(localMemFence);

    for(int n=0;n<p_maxNodes;++n;inner0){
      if(n<p_NfacesNfp){
        const dlong id  = n + e*p_Nfaces*p_Nfp;
        const dlong idM = vmapM[id];          
        const int nid = idM%p_Np; 

        const int face = n/p_Nfp;
        
        // load surface geofactors for this face
        const dlong sid = p_Nsgeo*(e*p_Nfaces+face);
        const dfloat nx = sgeo[sid+p_NXID];
        const dfloat ny = sgeo[sid+p_NYID];
        const dfloat sJ = sgeo[sid+p_SJID];

        dfloat dudxP=0, dudyP=0, uP=0;
        dfloat dvdxP=0, dvdyP=0, vP=0;

        const int bc = mapB[idM];
        if(bc>0) {
          insVelocityDirichletConditions2D(bc, t, x[idM], y[idM], nx, ny, 0.f, 0.f, &uP, &vP);
          insVelocityNeumannConditions2D(bc, t, x[idM], y[idM], nx, ny, 0.f, 0.f, 0.f, 0.f, &dudxP, &dudyP, &dvdxP, &dvdyP);
        }

        s_u[nid] = uP;
        s_v[nid] = vP;
        s_ndu[n] = sJ*(nx*dudxP + ny*dudyP);
        s_ndv[n] = sJ*(nx*dvdxP + ny*dvdyP);
      }
    }

    barrier(localMemFence);
    
    for(int n=0;n<p_maxNodes;++n;inner0){ 
      if(n<p_Np){
        //volume Dirichlet data
        const dlong id = n + e*p_Np;
        const dlong gid = e*p_Nggeo;
        const dfloat Grr = ggeo[gid + p_G00ID];
        const dfloat Grs = ggeo[gid + p_G01ID];
        const dfloat Gss = ggeo[gid + p_G11ID];
        const dfloat J   = ggeo[gid + p_GWJID];

        dfloat MMu = 0., MMv = 0.;
        dfloat urr = 0., vrr = 0.;
        dfloat urs = 0., vrs = 0.;
        dfloat uss = 0., vss = 0.;

        occaUnroll(p_Np)
          for (int k=0;k<p_Np;k++) {
            const dfloat MMn = MM[n+k*p_Np];
            const dfloat Srr = Smatrices[n+k*p_Np+0*p_Np*p_Np];
            const dfloat Srs = Smatrices[n+k*p_Np+1*p_Np*p_Np];
            const dfloat Sss = Smatrices[n+k*p_Np+2*p_Np*p_Np];
            MMu += MMn*s_u[k];
            urr += Srr*s_u[k];
            urs += Srs*s_u[k];
            uss += Sss*s_u[k];

            MMv += MMn*s_v[k];
            vrr += Srr*s_v[k];
            vrs += Srs*s_v[k];
            vss += Sss*s_v[k];
          }

        dfloat Lndu = 0;            
        dfloat Lndv = 0;            
        // surface mass * surface terms
        occaUnroll(p_NfacesNfp)
          for(int i=0;i<p_NfacesNfp;++i){
            const dfloat sMTn = sMT[n+i*p_Np];
            Lndu += sMTn*s_ndu[i];
            Lndv += sMTn*s_ndv[i];
          }

        rhsU[id] -= Grr*urr+Grs*urs+Gss*uss + J*lambda*MMu - Lndu;
        rhsV[id] -= Grr*vrr+Grs*vrs+Gss*vss + J*lambda*MMv - Lndv;
      }
    }
  }
}

kernel void insHelmholtzAddBCTri2D(const dlong Nelements,
                                   const dfloat time,
                                   const dfloat * restrict x,
                                   const dfloat * restrict y,
                                   const dfloat * restrict z,
                                   const dlong  * restrict vmapM,
                                   const int    * restrict mapB,
                                         dfloat * restrict U,
                                         dfloat * restrict V,
                                         dfloat * restrict W){
  
  for(dlong e=0;e<Nelements;e++;outer0){
    for(int n=0;n<p_Nfp*p_Nfaces;++n;inner0){
      const dlong idM = vmapM[e*p_Nfp*p_Nfaces + n];
      const int bc = mapB[idM];

      if(bc>0) {
        const dfloat uM = U[idM];
        const dfloat vM = V[idM];
        dfloat uP = 0.f;
        dfloat vP = 0.f;
        insVelocityDirichletConditions2D(bc, t, x[idM], y[idM], nx, ny, uM, vM, &uP, &vP);
        U[idM] = uP;
        V[idM] = vP;
      }    
    }
  }
}
