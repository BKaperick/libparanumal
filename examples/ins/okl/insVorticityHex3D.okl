
// compute div(NU)  = div(uxu) in collocation way (weak form)
kernel void insVorticityVolumeHex3D(const dlong Nelements,
                                     const dfloat * restrict vgeo,
                                     const dfloat * restrict D,
                                     const dlong offset,
                                     const dfloat * restrict U,
                                     const dfloat * restrict V,
                                     const dfloat * restrict W,
                                           dfloat * restrict Vx,
                                           dfloat * restrict Vy,
                                           dfloat * restrict Vz){

  for(dlong e=0; e<Nelements; ++e; outer0) {

    shared dfloat s_F11[p_Nq][p_Nq];
    shared dfloat s_F12[p_Nq][p_Nq];
    shared dfloat s_F13[p_Nq][p_Nq];
    shared dfloat s_F21[p_Nq][p_Nq];
    shared dfloat s_F22[p_Nq][p_Nq];
    shared dfloat s_F23[p_Nq][p_Nq];
    shared dfloat s_F31[p_Nq][p_Nq];
    shared dfloat s_F32[p_Nq][p_Nq];
    shared dfloat s_F33[p_Nq][p_Nq];

    shared dfloat s_D[p_Nq][p_Nq];

    exclusive dfloat r_Vx[p_Nq], r_Vy[p_Nq], r_Vz[p_Nq];

    for(int j=0;j<p_Nq;++j;inner1){ 
      for(int i=0;i<p_Nq;++i;inner0){
        const int id = i+j*p_Nq;
        s_D[0][id] = D[id];

        occaUnroll(p_Nq)
          for(int k=0;k<p_Nq;++k){         
            r_Vx[k] = 0.;
            r_Vy[k] = 0.;
            r_Vz[k] = 0.;
          }
      }
    }

    barrier(localMemFence);

    occaUnroll(p_Nq)
    for(int k=0;k<p_Nq;++k){ 

      //fetch slice
      for(int j=0;j<p_Nq;++j;inner1){ 
        for(int i=0;i<p_Nq;++i;inner0){
          const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
          const dfloat drdx = vgeo[gid + p_RXID*p_Np];
          const dfloat drdy = vgeo[gid + p_RYID*p_Np];
          const dfloat drdz = vgeo[gid + p_RZID*p_Np];
          const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
          const dfloat dsdy = vgeo[gid + p_SYID*p_Np];
          const dfloat dsdz = vgeo[gid + p_SZID*p_Np];
          const dfloat dtdx = vgeo[gid + p_TXID*p_Np];
          const dfloat dtdy = vgeo[gid + p_TYID*p_Np];
          const dfloat dtdz = vgeo[gid + p_TZID*p_Np];
          const dfloat JW   = vgeo[gid + p_JWID*p_Np];

          const dlong id = (e+offset)*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
          const dfloat Un = U[id];
          const dfloat Vn = V[id];
          const dfloat Wn = W[id];

          s_F11[j][i] = JW*( drdy*Wn-drdz*Vn);
          s_F12[j][i] = JW*( dsdy*Wn-dsdz*Vn);
          s_F13[j][i] = JW*( dtdy*Wn-dtdz*Vn);
          s_F21[j][i] = JW*(-drdx*Wn+drdz*Un);
          s_F22[j][i] = JW*(-dsdx*Wn+dsdz*Un);
          s_F23[j][i] = JW*(-dtdx*Wn+dtdz*Un);
          s_F31[j][i] = JW*( drdx*Vn-drdy*Un);
          s_F32[j][i] = JW*( dsdx*Vn-dsdy*Un);
          s_F33[j][i] = JW*( dtdx*Vn-dtdy*Un);
        }
      }

      barrier(localMemFence);

      for(int j=0;j<p_Nq;++j;inner1){ 
        for(int i=0;i<p_Nq;++i;inner0){
          occaUnroll(p_Nq)
            for (int n=0;n<p_Nq;n++) {
              const dfloat Dr = s_D[n][i];
              const dfloat Ds = s_D[n][j];
              const dfloat Dt = s_D[k][n];
              r_Vx[k] += Dr*s_F11[j][n];
              r_Vy[k] += Dr*s_F21[j][n];
              r_Vz[k] += Dr*s_F31[j][n];

              r_Vx[k] += Ds*s_F12[n][i];
              r_Vy[k] += Ds*s_F22[n][i];
              r_Vz[k] += Ds*s_F32[n][i];

              r_Vx[n] += Dt*s_F13[j][i];
              r_Vy[n] += Dt*s_F23[j][i];
              r_Vz[n] += Dt*s_F33[j][i];
            }
        }
      }

      barrier(localMemFence);
    } //k loop

    //write out
    for(int j=0;j<p_Nq;++j;inner1){ 
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
          for(int k=0;k<p_Nq;++k){
            const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

            const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
            Vx[id] = -invJW*r_Vx[k];
            Vy[id] = -invJW*r_Vy[k];
            Vz[id] = -invJW*r_Vz[k];
          }
      }
    }
  }
}


#define surfaceTerms(sk,face,m, i, j)                                   \
{                                                                       \
  const dlong  idM = vmapM[sk]+offset*p_Np;                             \
  const dlong  idP = vmapP[sk]+offset*p_Np;                             \
                                                                        \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat nz = sgeo[sk*p_Nsgeo+p_NZID];                            \
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];                            \
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];                        \
                                                                        \
  const dfloat uM = U[idM], vM = V[idM], wM = W[idM];                   \
        dfloat uP = U[idP], vP = V[idP], wP = W[idP];                   \
                                                                        \
  const int bc = EToB[face+p_Nfaces*e];                                 \
  if(bc>0) {                                                            \
    insVelocityDirichletConditions3D(bc, time, x[vmapM[sk]], y[vmapM[sk]], z[vmapM[sk]], nx, ny, nz, uM, vM, wM, &uP, &vP, &wP); \
    uP = 2.f*uP-uM;                                                     \
    vP = 2.f*vP-vM;                                                     \
    wP = 2.f*wP-wM;                                                     \
  }                                                                     \
                                                                        \
  const dfloat sc = invWJ * sJ;                                         \
  s_fluxVx[m][j][i] = sc*(.5f*( ny*(wP + wM) - nz*(vP + vM) ));         \
  s_fluxVy[m][j][i] = sc*(.5f*( nz*(uP + uM) - nx*(wP + wM) ));         \
  s_fluxVz[m][j][i] = sc*(.5f*( nx*(vP + vM) - ny*(uP + uM) ));         \
}

kernel void insVorticitySurfaceHex3D(const dlong Nelements,
                                      const dfloat * restrict sgeo,
                                      const dlong  * restrict vmapM,
                                      const dlong  * restrict vmapP,
                                      const int    * restrict EToB,
                                      const dfloat time,
                                      const dfloat * restrict x,
                                      const dfloat * restrict y,
                                      const dfloat * restrict z,
                                      const dlong offset,
                                      const dfloat * restrict U,
                                      const dfloat * restrict V,
                                      const dfloat * restrict W,
                                            dfloat * restrict Vx,
                                            dfloat * restrict Vy,
                                            dfloat * restrict Vz){

  // for all elements
  for(dlong e=0;e<Nelements;e++;outer0){
    // shared storage for flux terms
    shared dfloat s_fluxVx[2][p_Nq][p_Nq];
    shared dfloat s_fluxVy[2][p_Nq][p_Nq];
    shared dfloat s_fluxVz[2][p_Nq][p_Nq];

    exclusive dfloat r_Vx[p_Nq], r_Vy[p_Nq], r_Vz[p_Nq];

    // for all face nodes of all elements
    // face 0 & 5
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
        for(int k=0;k<p_Nq;++k){
          r_Vx[k] = 0.;
          r_Vy[k] = 0.;
          r_Vz[k] = 0.;
        }

        const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i + j*p_Nq;
        const dlong sk5 = e*p_Nfp*p_Nfaces + 5*p_Nfp + i + j*p_Nq;

        surfaceTerms(sk0,0,0,i,j);
        surfaceTerms(sk5,5,1,i,j);
      }
    }

    barrier(localMemFence);

    // face 0 & 5
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        //face 0
        r_Vx[0] += s_fluxVx[0][j][i];
        r_Vy[0] += s_fluxVy[0][j][i];
        r_Vz[0] += s_fluxVz[0][j][i];

        //face 5
        r_Vx[p_Nq-1] += s_fluxVx[1][j][i];
        r_Vy[p_Nq-1] += s_fluxVy[1][j][i];
        r_Vz[p_Nq-1] += s_fluxVz[1][j][i];
      }
    }

    barrier(localMemFence);    

    // face 1 & 3
    for(int k=0;k<p_Nq;++k;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + i + k*p_Nq;
        const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + i + k*p_Nq;

        surfaceTerms(sk1,1,0,i,k);
        surfaceTerms(sk3,3,1,i,k);
      }
    }

    barrier(localMemFence);

    // face 1 & 3
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        if (j==0) {//face 1
          occaUnroll(p_Nq)
          for (int n=0;n<p_Nq;n++) {
            r_Vx[n] += s_fluxVx[0][n][i];
            r_Vy[n] += s_fluxVy[0][n][i];
            r_Vz[n] += s_fluxVz[0][n][i];
          }
        }
        if (j==p_Nq-1) {//face 3
          occaUnroll(p_Nq)
          for (int n=0;n<p_Nq;n++) {
            r_Vx[n] += s_fluxVx[1][n][i];
            r_Vy[n] += s_fluxVy[1][n][i];
            r_Vz[n] += s_fluxVz[1][n][i];
          }
        }
      }
    }

    barrier(localMemFence);    

    // face 2 & 4
    for(int k=0;k<p_Nq;++k;inner1){
      for(int j=0;j<p_Nq;++j;inner0){
        const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + j + k*p_Nq;
        const dlong sk4 = e*p_Nfp*p_Nfaces + 4*p_Nfp + j + k*p_Nq;

        surfaceTerms(sk2,2,0,j,k);
        surfaceTerms(sk4,4,1,j,k);
      }
    }

    barrier(localMemFence);

    // face 2 & 4
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        if (i==p_Nq-1) {//face 2
          occaUnroll(p_Nq)
          for (int n=0;n<p_Nq;n++) {
            r_Vx[n] += s_fluxVx[0][n][j];
            r_Vy[n] += s_fluxVy[0][n][j];
            r_Vz[n] += s_fluxVz[0][n][j];
          }
        }
        if (i==0) {//face 4
          occaUnroll(p_Nq)
          for (int n=0;n<p_Nq;n++) {
            r_Vx[n] += s_fluxVx[1][n][j];
            r_Vy[n] += s_fluxVy[1][n][j];
            r_Vz[n] += s_fluxVz[1][n][j];
          }
        }
      }
    }

    barrier(localMemFence);   

    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
        for(int k=0;k<p_Nq;++k){
          const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

          Vx[id] += r_Vx[k];
          Vy[id] += r_Vy[k];
          Vz[id] += r_Vz[k];
        }
      }
    }
  }
}
#undef surfaceTerms