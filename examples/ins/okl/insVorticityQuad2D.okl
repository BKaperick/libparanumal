kernel void insVorticityQuad2D(const dlong Nelements,
                              const dfloat * restrict vgeo,
                              const dfloat * restrict const D,
                              const dlong offset,
                              const dfloat * restrict U,
                                    dfloat * restrict Vort){  
  
  // block partition of elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;outer0){
    
    shared dfloat s_U[p_NblockV][p_Nq][p_Nq];
    shared dfloat s_V[p_NblockV][p_Nq][p_Nq];
    shared dfloat s_D[p_Nq][p_Nq];

    for(int es=0;es<p_NblockV;++es;inner2){   
      for(int j=0;j<p_Nq;++j;inner1){ 
        for(int i=0;i<p_Nq;++i;inner0){    
          const dlong e = eo+es; // element in block
          if(e<Nelements){ 
            const dlong id = e*p_Np + j*p_Nq+i;

            s_U[es][j][i]  = U[id+0*offset];
            s_V[es][j][i]  = U[id+1*offset];

            if (es==0)
              s_D[j][i] = D[j*p_Nq+i];
          }
        }
      }
    }
          
    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner2){ 
      for(int j=0;j<p_Nq;++j;inner1){ 
        for(int i=0;i<p_Nq;++i;inner0){  
          const dlong e = eo+es; 
          if(e<Nelements){ 
            const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
            const dfloat drdx = vgeo[gid + p_RXID*p_Np];
            const dfloat drdy = vgeo[gid + p_RYID*p_Np];
            const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
            const dfloat dsdy = vgeo[gid + p_SYID*p_Np];

            // compute 'r' and 's' derivatives of (q_m) at node n
            dfloat dudr  = 0.f, duds  = 0.f;
            dfloat dvdr  = 0.f, dvds  = 0.f;

            occaUnroll(p_Nq)
              for(int n=0;n<p_Nq;++n){
                const dfloat Dr = s_D[i][n];
                const dfloat Ds = s_D[j][n];

                dudr += Dr*s_U[es][j][n];
                duds += Ds*s_U[es][n][i];
                dvdr += Dr*s_V[es][j][n];
                dvds += Ds*s_V[es][n][i];
              }

            const dfloat uy = drdy*dudr + dsdy*duds;
            const dfloat vx = drdx*dvdr + dsdx*dvds;

            const dlong id = e*p_Np+j*p_Nq +i; 
            Vort[id] = vx-uy;
          }
        }
      }
    }
  }
}