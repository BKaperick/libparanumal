boltzmannRunMRSAABQuad3D.c~:9:  iint haloBytes = mesh->totalHaloPairs*mesh->Np*mesh->Nfields*sizeof(dfloat);
boltzmannRunMRSAABQuad3D.c~:16:  occa::initTimer(mesh->device);
boltzmannRunMRSAABQuad3D.c~:19:  for(iint tstep=0;tstep<mesh->NtimeSteps;++tstep){
boltzmannRunMRSAABQuad3D.c~:21:    for(iint rk=0;rk<mesh->Nrk;++rk){
boltzmannRunMRSAABQuad3D.c~:26:      dfloat t = tstep*mesh->dt + mesh->dt*mesh->rkc[rk];
boltzmannRunMRSAABQuad3D.c~:28:      if(mesh->totalHaloPairs>0){
boltzmannRunMRSAABQuad3D.c~:30:	iint Nentries = mesh->Np*mesh->Nfields;
boltzmannRunMRSAABQuad3D.c~:32:	mesh->haloExtractKernel(mesh->totalHaloPairs,
boltzmannRunMRSAABQuad3D.c~:34:				mesh->o_haloElementList,
boltzmannRunMRSAABQuad3D.c~:35:				mesh->o_q,
boltzmannRunMRSAABQuad3D.c~:36:				mesh->o_haloBuffer);
boltzmannRunMRSAABQuad3D.c~:39:	mesh->o_haloBuffer.copyTo(sendBuffer);      
boltzmannRunMRSAABQuad3D.c~:43:			      mesh->Np*mesh->Nfields*sizeof(dfloat),
boltzmannRunMRSAABQuad3D.c~:50:      mesh->volumeKernel(mesh->Nelements,
boltzmannRunMRSAABQuad3D.c~:51:			 mesh->o_vgeo,
boltzmannRunMRSAABQuad3D.c~:52:			 mesh->o_D,
boltzmannRunMRSAABQuad3D.c~:53:			 mesh->o_x,
boltzmannRunMRSAABQuad3D.c~:54:			 mesh->o_y,
boltzmannRunMRSAABQuad3D.c~:55:			 mesh->o_z,
boltzmannRunMRSAABQuad3D.c~:56:			 mesh->o_q,
boltzmannRunMRSAABQuad3D.c~:57:			 mesh->o_rhsq);
boltzmannRunMRSAABQuad3D.c~:59:      if(mesh->totalHaloPairs>0){
boltzmannRunMRSAABQuad3D.c~:64:	size_t offset = mesh->Np*mesh->Nfields*mesh->Nelements*sizeof(dfloat); // offset for halo data
boltzmannRunMRSAABQuad3D.c~:65:	mesh->o_q.copyFrom(recvBuffer, haloBytes, offset);
boltzmannRunMRSAABQuad3D.c~:68:      mesh->device.finish();
boltzmannRunMRSAABQuad3D.c~:73:      mesh->surfaceKernel(mesh->Nelements,
boltzmannRunMRSAABQuad3D.c~:74:			  mesh->o_sgeo,
boltzmannRunMRSAABQuad3D.c~:75:			  mesh->o_LIFTT,
boltzmannRunMRSAABQuad3D.c~:76:			  mesh->o_vmapM,
boltzmannRunMRSAABQuad3D.c~:77:			  mesh->o_vmapP,
boltzmannRunMRSAABQuad3D.c~:79:			  mesh->o_x,
boltzmannRunMRSAABQuad3D.c~:80:			  mesh->o_y,
boltzmannRunMRSAABQuad3D.c~:81:			  mesh->o_z,
boltzmannRunMRSAABQuad3D.c~:82:			  mesh->o_q,
boltzmannRunMRSAABQuad3D.c~:83:			  mesh->o_rhsq);
boltzmannRunMRSAABQuad3D.c~:86:      mesh->device.finish();
boltzmannRunMRSAABQuad3D.c~:89:      dfloat tupdate = tstep*mesh->dt + mesh->dt*mesh->rkc[rk+1];
boltzmannRunMRSAABQuad3D.c~:91:      mesh->device.finish();
boltzmannRunMRSAABQuad3D.c~:94:      mesh->updateKernel(mesh->Nelements,
boltzmannRunMRSAABQuad3D.c~:95:			 mesh->dt,
boltzmannRunMRSAABQuad3D.c~:96:			 mesh->rka[rk],
boltzmannRunMRSAABQuad3D.c~:97:			 mesh->rkb[rk],
boltzmannRunMRSAABQuad3D.c~:98:			 mesh->o_rhsq,
boltzmannRunMRSAABQuad3D.c~:99:			 mesh->o_resq,
boltzmannRunMRSAABQuad3D.c~:100:			 mesh->o_q);
boltzmannRunMRSAABQuad3D.c~:102:      mesh->device.finish();
boltzmannRunMRSAABQuad3D.c~:107:    if((tstep%mesh->errorStep)==0){
boltzmannRunMRSAABQuad3D.c~:108:      dfloat t = (tstep+1)*mesh->dt;
boltzmannRunMRSAABQuad3D.c~:113:      mesh->o_q.copyTo(mesh->q);
boltzmannRunMRSAABQuad3D.c~:116:      for(int n=0;n<mesh->Nfields*mesh->Nelements*mesh->Np;++n){
boltzmannRunMRSAABQuad3D.c~:117:	if(isnan(mesh->q[n])){
boltzmannRunMRSAABQuad3D.c~:125:      //      boltzmannErrorQuad2D(mesh, mesh->dt*(tstep+1));
boltzmannRunMRSAABQuad3D.c~:128:      //      boltzmannComputeVorticityQuad2D(mesh, mesh->q, 0, mesh->Nfields);
boltzmannRunMRSAABQuad3D.c~:133:      //      sprintf(fname, "foo_T%04d.vtu", tstep/mesh->errorStep);
boltzmannRunMRSAABQuad3D.c~:135:      //      sprintf(fname, "foo_T%04d", tstep/mesh->errorStep);
boltzmannRunMRSAABQuad3D.c~:136:      boltzmannPlotVTUQuad3DV2(mesh, "foo", tstep/mesh->errorStep);
boltzmannSetupMRQuad3D.c:31:  iint Nlevels = mesh->MRABNlevels;
boltzmannSetupMRQuad3D.c:44:  mesh->MRSAAB_A = (dfloat *) calloc(3*3*Nlevels,sizeof(dfloat));
boltzmannSetupMRQuad3D.c:45:  mesh->MRSAAB_B = (dfloat *) calloc(3*3*Nlevels,sizeof(dfloat));
boltzmannSetupMRQuad3D.c:46:  mesh->MRSAAB_C = (dfloat *) calloc(    Nlevels,sizeof(dfloat));
boltzmannSetupMRQuad3D.c:47:  mesh->MRAB_A   = (dfloat *) calloc(3*3*Nlevels,sizeof(dfloat));
boltzmannSetupMRQuad3D.c:48:  mesh->MRAB_B   = (dfloat *) calloc(3*3*Nlevels,sizeof(dfloat));
boltzmannSetupMRQuad3D.c:49:  mesh->MRAB_C   = (dfloat *) calloc(    Nlevels,sizeof(dfloat));
boltzmannSetupMRQuad3D.c:51:  iint MRABorder = mesh->Nrhs; 
boltzmannSetupMRQuad3D.c:55:    dfloat alpha = -mesh->tauInv*mesh->dt*pow(2,l);
boltzmannSetupMRQuad3D.c:56:    dfloat h  = mesh->dt * pow(2,l); 
boltzmannSetupMRQuad3D.c:72:	      mesh->MRSAAB_A[id + 0] = creal(a1)/Nr;
boltzmannSetupMRQuad3D.c:73:	      mesh->MRSAAB_A[id + 1] = 0.f;
boltzmannSetupMRQuad3D.c:74:	      mesh->MRSAAB_A[id + 2] = 0.f;
boltzmannSetupMRQuad3D.c:76:	      mesh->MRSAAB_B[id + 0] = creal(b1)/Nr;
boltzmannSetupMRQuad3D.c:77:	      mesh->MRSAAB_B[id + 1] = 0.f;
boltzmannSetupMRQuad3D.c:78:	      mesh->MRSAAB_B[id + 2] = 0.f;
boltzmannSetupMRQuad3D.c:81:	      mesh->MRAB_A[id + 0]   =  h ;
boltzmannSetupMRQuad3D.c:82:	      mesh->MRAB_A[id + 1]   =  0.f ;
boltzmannSetupMRQuad3D.c:83:	      mesh->MRAB_A[id + 2]   =  0.f ;
boltzmannSetupMRQuad3D.c:85:	      mesh->MRAB_B[id+0]     =  h/2. ;
boltzmannSetupMRQuad3D.c:86:	      mesh->MRAB_B[id+1]     =  0.f ;
boltzmannSetupMRQuad3D.c:87:	      mesh->MRAB_B[id+2]     =  0.f ;
boltzmannSetupMRQuad3D.c:105:	      mesh->MRSAAB_A[id + 0] = creal(a1)/Nr;
boltzmannSetupMRQuad3D.c:106:	      mesh->MRSAAB_A[id + 1] = creal(a2)/Nr;
boltzmannSetupMRQuad3D.c:107:	      mesh->MRSAAB_A[id + 2] = 0.f;
boltzmannSetupMRQuad3D.c:109:	      mesh->MRSAAB_B[id + 0] = creal(b1)/Nr;
boltzmannSetupMRQuad3D.c:110:	      mesh->MRSAAB_B[id + 1] = creal(b2)/Nr;
boltzmannSetupMRQuad3D.c:111:	      mesh->MRSAAB_B[id + 2] = 0.f;
boltzmannSetupMRQuad3D.c:115:	      mesh->MRAB_A[id + 0]   =  3.*h/2. ;
boltzmannSetupMRQuad3D.c:116:	      mesh->MRAB_A[id + 1]   = -1.*h/2. ;
boltzmannSetupMRQuad3D.c:117:	      mesh->MRAB_A[id + 2]   =  0.f ;
boltzmannSetupMRQuad3D.c:119:	      mesh->MRAB_B[id + 0]   =  5.*h/8. ;
boltzmannSetupMRQuad3D.c:120:	      mesh->MRAB_B[id + 1]   = -1.*h/8. ;
boltzmannSetupMRQuad3D.c:121:	      mesh->MRAB_B[id + 2]   =   0.f ;
boltzmannSetupMRQuad3D.c:144:	      mesh->MRSAAB_A[id+0] = creal(a1)/Nr;
boltzmannSetupMRQuad3D.c:145:	      mesh->MRSAAB_A[id+1] = creal(a2)/Nr;
boltzmannSetupMRQuad3D.c:146:	      mesh->MRSAAB_A[id+2] = creal(a3)/Nr;
boltzmannSetupMRQuad3D.c:148:	      mesh->MRSAAB_B[id+0] = creal(b1)/Nr;
boltzmannSetupMRQuad3D.c:149:	      mesh->MRSAAB_B[id+1] = creal(b2)/Nr;
boltzmannSetupMRQuad3D.c:150:	      mesh->MRSAAB_B[id+2] = creal(b3)/Nr;
boltzmannSetupMRQuad3D.c:153:	      mesh->MRAB_A[id+0]   =  23.*h/12. ;
boltzmannSetupMRQuad3D.c:154:	      mesh->MRAB_A[id+1]   = -16.*h/12. ;
boltzmannSetupMRQuad3D.c:155:	      mesh->MRAB_A[id+2]   =  5. *h/12. ;
boltzmannSetupMRQuad3D.c:157:	      mesh->MRAB_B[id+0]   =  17.*h/24. ;
boltzmannSetupMRQuad3D.c:158:	      mesh->MRAB_B[id+1]   = - 7.*h/24. ;
boltzmannSetupMRQuad3D.c:159:	      mesh->MRAB_B[id+2]   =   2.*h/24. ;
boltzmannSetupMRQuad3D.c:164:	    printf("%.14e\t%.14e\t%.14e\t%.14e\t%.14e\t%.14e\n",mesh->MRSAAB_A[id+0],mesh->MRSAAB_A[id+1],mesh->MRSAAB_A[id+2],
boltzmannSetupMRQuad3D.c:165:		   mesh->MRSAAB_B[id+0], mesh->MRSAAB_B[id+1],mesh->MRSAAB_B[id+2]);  
boltzmannSetupMRQuad3D.c:170:    mesh->MRSAAB_C[l]    = exp(alpha);
boltzmannSetupMRQuad3D.c:171:    mesh->MRAB_C[l]      =   h ;
boltzmannSetupMRQuad3D.c:181:  mesh->Nrhs = 3; //hardcoded order of multirate solver  
boltzmannSetupMRQuad3D.c:183:  mesh->Nfields = 10;
boltzmannSetupMRQuad3D.c:186:  mesh->q    = (dfloat*) calloc((mesh->totalHaloPairs+mesh->Nelements)*mesh->Np*mesh->Nfields,
boltzmannSetupMRQuad3D.c:188:  mesh->rhsq = (dfloat*) calloc(mesh->Nelements*mesh->Nrhs*mesh->Np*mesh->Nfields,
boltzmannSetupMRQuad3D.c:190:  mesh->resq = (dfloat*) calloc(mesh->Nelements*mesh->Np*mesh->Nfields,
boltzmannSetupMRQuad3D.c:194:  mesh->RT = 9.;
boltzmannSetupMRQuad3D.c:195:  mesh->sqrtRT = sqrt(mesh->RT);
boltzmannSetupMRQuad3D.c:199:  dfloat sR = mesh->sphereRadius;
boltzmannSetupMRQuad3D.c:202:  for(iint e=0;e<mesh->Nelements;++e){
boltzmannSetupMRQuad3D.c:203:    for(iint n=0;n<mesh->Np;++n){
boltzmannSetupMRQuad3D.c:205:      dfloat x = mesh->x[n + mesh->Np*e];
boltzmannSetupMRQuad3D.c:206:      dfloat y = mesh->y[n + mesh->Np*e];
boltzmannSetupMRQuad3D.c:207:      dfloat z = mesh->z[n + mesh->Np*e];
boltzmannSetupMRQuad3D.c:223:      brownMinion(bmRho, bmDelta, mesh->sphereRadius, x+delta, y, z, &uP, &vP, &wP);
boltzmannSetupMRQuad3D.c:224:      brownMinion(bmRho, bmDelta, mesh->sphereRadius, x-delta, y, z, &uM, &vM, &wM);
boltzmannSetupMRQuad3D.c:230:      brownMinion(bmRho, bmDelta, mesh->sphereRadius, x, y+delta, z, &uP, &vP, &wP);
boltzmannSetupMRQuad3D.c:231:      brownMinion(bmRho, bmDelta, mesh->sphereRadius, x, y-delta, z, &uM, &vM, &wM);
boltzmannSetupMRQuad3D.c:237:      brownMinion(bmRho, bmDelta, mesh->sphereRadius, x, y, z+delta, &uP, &vP, &wP);
boltzmannSetupMRQuad3D.c:238:      brownMinion(bmRho, bmDelta, mesh->sphereRadius, x, y, z-delta, &uM, &vM, &wM);
boltzmannSetupMRQuad3D.c:262:      dfloat q2bar = rho*umod/mesh->sqrtRT;
boltzmannSetupMRQuad3D.c:263:      dfloat q3bar = rho*vmod/mesh->sqrtRT;
boltzmannSetupMRQuad3D.c:264:      dfloat q4bar = rho*wmod/mesh->sqrtRT;
boltzmannSetupMRQuad3D.c:265:      dfloat q5bar = (rho*umod*umod - sigma11)/(sqrt(2.)*mesh->RT);
boltzmannSetupMRQuad3D.c:266:      dfloat q6bar = (rho*vmod*vmod - sigma22)/(sqrt(2.)*mesh->RT);
boltzmannSetupMRQuad3D.c:267:      dfloat q7bar = (rho*wmod*wmod - sigma33)/(sqrt(2.)*mesh->RT);
boltzmannSetupMRQuad3D.c:268:      dfloat q8bar  = (rho*umod*vmod - sigma12)/mesh->RT;
boltzmannSetupMRQuad3D.c:269:      dfloat q9bar =  (rho*umod*wmod - sigma13)/mesh->RT;
boltzmannSetupMRQuad3D.c:270:      dfloat q10bar = (rho*vmod*wmod - sigma23)/mesh->RT;
boltzmannSetupMRQuad3D.c:274:      int base = n + e*mesh->Np*mesh->Nfields;
boltzmannSetupMRQuad3D.c:282:      mesh->q[base+0*mesh->Np] = q1bar; // uniform density, zero flow
boltzmannSetupMRQuad3D.c:284:      mesh->q[base+1*mesh->Np] = q2bar;
boltzmannSetupMRQuad3D.c:285:      mesh->q[base+2*mesh->Np] = q3bar;
boltzmannSetupMRQuad3D.c:286:      mesh->q[base+3*mesh->Np] = q4bar;
boltzmannSetupMRQuad3D.c:288:      mesh->q[base+4*mesh->Np] = q5bar;
boltzmannSetupMRQuad3D.c:289:      mesh->q[base+5*mesh->Np] = q6bar;
boltzmannSetupMRQuad3D.c:290:      mesh->q[base+6*mesh->Np] = q7bar;
boltzmannSetupMRQuad3D.c:292:      mesh->q[base+7*mesh->Np] = q8bar;
boltzmannSetupMRQuad3D.c:293:      mesh->q[base+8*mesh->Np] = q9bar;
boltzmannSetupMRQuad3D.c:294:      mesh->q[base+9*mesh->Np] = q10bar;
boltzmannSetupMRQuad3D.c:305:  dfloat *EtoDT = (dfloat *) calloc(mesh->Nelements,sizeof(dfloat));
boltzmannSetupMRQuad3D.c:307:  mesh->tauInv = mesh->RT/nu; // TW
boltzmannSetupMRQuad3D.c:311:  for(iint e=0;e<mesh->Nelements;++e){
boltzmannSetupMRQuad3D.c:315:    for(iint f=0;f<mesh->Nfaces;++f){
boltzmannSetupMRQuad3D.c:316:      for(iint n=0;n<mesh->Nfp;++n){
boltzmannSetupMRQuad3D.c:317:	iint sid = mesh->Nsgeo*mesh->Nfp*mesh->Nfaces*e + mesh->Nsgeo*mesh->Nfp*f+n;
boltzmannSetupMRQuad3D.c:319:	dfloat sJ   = mesh->sgeo[sid + mesh->Nq*SJID];
boltzmannSetupMRQuad3D.c:320:	dfloat invJ = mesh->sgeo[sid + mesh->Nq*IJID];
boltzmannSetupMRQuad3D.c:337:  dfloat dt = cfl*hmin/((mesh->N+1.)*(mesh->N+1.)*sqrt(3.)*mesh->sqrtRT);
boltzmannSetupMRQuad3D.c:339:  //dt = mymin(dt, cfl/mesh->tauInv);
boltzmannSetupMRQuad3D.c:344:  mesh->shiftIndex=0;
boltzmannSetupMRQuad3D.c:350:  printf("max wave speed = %g\n", sqrt(3.)*mesh->sqrtRT);
boltzmannSetupMRQuad3D.c:353:  MPI_Allreduce(&dt, &(mesh->dt), 1, MPI_DFLOAT, MPI_MIN, MPI_COMM_WORLD);
boltzmannSetupMRQuad3D.c:356:  mesh->finalTime = 10;
boltzmannSetupMRQuad3D.c:357:  mesh->NtimeSteps = mesh->finalTime/mesh->dt;
boltzmannSetupMRQuad3D.c:358:  mesh->dt = mesh->finalTime/mesh->NtimeSteps;
boltzmannSetupMRQuad3D.c:361:  mesh->errorStep = 100*mesh->Nq;
boltzmannSetupMRQuad3D.c:363:  printf("dt = %g\n", mesh->dt);
boltzmannSetupMRQuad3D.c:384:  kernelInfo.addDefine("p_Nq", mesh->Nq);
boltzmannSetupMRQuad3D.c:386:  printf("mesh->Nq = %d\n", mesh->Nq);
boltzmannSetupMRQuad3D.c:387:  mesh->o_D  = mesh->device.malloc(mesh->Nq*mesh->Nq*sizeof(dfloat), mesh->D);
boltzmannSetupMRQuad3D.c:389:    mesh->o_vgeo =
boltzmannSetupMRQuad3D.c:390:      mesh->device.malloc(mesh->Nelements*mesh->Np*mesh->Nvgeo*sizeof(dfloat),
boltzmannSetupMRQuad3D.c:391:			  mesh->vgeo);
boltzmannSetupMRQuad3D.c:393:      mesh->o_sgeo =
boltzmannSetupMRQuad3D.c:394:	mesh->device.malloc(mesh->Nelements*mesh->Nfp*mesh->Nfaces*mesh->Nsgeo*sizeof(dfloat),
boltzmannSetupMRQuad3D.c:395:			    mesh->sgeo);
boltzmannSetupMRQuad3D.c:397:      mesh->o_MRABelementIds = (occa::memory *) malloc(mesh->MRABNlevels*sizeof(occa::memory));
boltzmannSetupMRQuad3D.c:398:      mesh->o_MRABhaloIds = (occa::memory *) malloc(mesh->MRABNlevels*sizeof(occa::memory));
boltzmannSetupMRQuad3D.c:399:      for (iint lev = 0; lev < mesh->MRABNlevels;lev++) {
boltzmannSetupMRQuad3D.c:400:	if (mesh->MRABNelements[lev])
boltzmannSetupMRQuad3D.c:401:	  mesh->o_MRABelementIds[lev]
boltzmannSetupMRQuad3D.c:402:	    = mesh->device.malloc(mesh->MRABNelements[lev]*sizeof(iint),
boltzmannSetupMRQuad3D.c:403:				  mesh->MRABelementIds[lev]);
boltzmannSetupMRQuad3D.c:404:	if (mesh->MRABNhaloElements[lev])
boltzmannSetupMRQuad3D.c:405:	  mesh->o_MRABhaloIds[lev]
boltzmannSetupMRQuad3D.c:406:	    = mesh->device.malloc(mesh->MRABNhaloElements[lev]*sizeof(iint),
boltzmannSetupMRQuad3D.c:407:				  mesh->MRABhaloIds[lev]);
boltzmannSetupMRQuad3D.c:417:      kernelInfo.addDefine("p_maxNodesVolume", mymax(mesh->cubNp,mesh->Np));
boltzmannSetupMRQuad3D.c:419:      int maxNodes = mesh->Nfp;
boltzmannSetupMRQuad3D.c:422:      int NblockV = 256/mesh->Np; // works for CUDA
boltzmannSetupMRQuad3D.c:429:      kernelInfo.addDefine("p_sqrtRT", mesh->sqrtRT);
boltzmannSetupMRQuad3D.c:430:      kernelInfo.addDefine("p_invsqrtRT", (dfloat)(1./mesh->sqrtRT));
boltzmannSetupMRQuad3D.c:435:      kernelInfo.addDefine("p_tauInv", mesh->tauInv);
boltzmannSetupMRQuad3D.c:437:      kernelInfo.addDefine("p_invRadiusSq", 1./(mesh->sphereRadius*mesh->sphereRadius));
boltzmannSetupMRQuad3D.c:441:        mesh->volumeKernel =
boltzmannSetupMRQuad3D.c:442:	  mesh->device.buildKernelFromSource(DHOLMES "/okl/boltzmannVolumeQuad3D.okl",
boltzmannSetupMRQuad3D.c:446:	  mesh->surfaceKernel =
boltzmannSetupMRQuad3D.c:447:	    mesh->device.buildKernelFromSource(DHOLMES "/okl/boltzmannSurfaceQuad3D.okl",
boltzmannSetupMRQuad3D.c:452:	    mesh->updateKernel =
boltzmannSetupMRQuad3D.c:453:	      mesh->device.buildKernelFromSource(DHOLMES "/okl/boltzmannUpdateQuad3D.okl",
boltzmannSetupMRQuad3D.c:457:	    mesh->traceUpdateKernel =
boltzmannSetupMRQuad3D.c:458:	      mesh->device.buildKernelFromSource(DHOLMES "/okl/boltzmannUpdateQuad3D.okl",
boltzmannSetupMRQuad3D.c:462:	      mesh->haloExtractKernel =
boltzmannSetupMRQuad3D.c:463:		mesh->device.buildKernelFromSource(DHOLMES "/okl/meshHaloExtract2D.okl",
Binary file boltzmannMainQuad3D matches
boltzmannPlotVTUQuad3D.c:24:	  mesh->Nelements*mesh->plotNp, 
boltzmannPlotVTUQuad3D.c:25:	  mesh->Nelements*mesh->plotNelements);
boltzmannPlotVTUQuad3D.c:32:  for(iint e=0;e<mesh->Nelements;++e){
boltzmannPlotVTUQuad3D.c:33:    for(iint n=0;n<mesh->plotNp;++n){
boltzmannPlotVTUQuad3D.c:35:      for(iint m=0;m<mesh->Np;++m){
boltzmannPlotVTUQuad3D.c:36:	plotxn += mesh->plotInterp[n*mesh->Np+m]*mesh->x[m+e*mesh->Np];
boltzmannPlotVTUQuad3D.c:37:	plotyn += mesh->plotInterp[n*mesh->Np+m]*mesh->y[m+e*mesh->Np];
boltzmannPlotVTUQuad3D.c:38:	plotzn += mesh->plotInterp[n*mesh->Np+m]*mesh->z[m+e*mesh->Np];
boltzmannPlotVTUQuad3D.c:52:  for(iint e=0;e<mesh->Nelements;++e){
boltzmannPlotVTUQuad3D.c:53:    for(iint n=0;n<mesh->plotNp;++n){
boltzmannPlotVTUQuad3D.c:56:      for(iint m=0;m<mesh->Np;++m){
boltzmannPlotVTUQuad3D.c:57:        dfloat pm = mesh->q[m + mesh->Np*fld + mesh->Nfields*e*mesh->Np];
boltzmannPlotVTUQuad3D.c:58:        //dfloat pm = mesh->invTau[m+e*mesh->Np];
boltzmannPlotVTUQuad3D.c:59:        plotpn += mesh->plotInterp[n*mesh->Np+m]*pm;
boltzmannPlotVTUQuad3D.c:73:  for(iint e=0;e<mesh->Nelements;++e){
boltzmannPlotVTUQuad3D.c:74:    for(iint n=0;n<mesh->plotNelements;++n){
boltzmannPlotVTUQuad3D.c:76:      for(int m=0;m<mesh->plotNverts;++m){
boltzmannPlotVTUQuad3D.c:77:	fprintf(fp, "%d ", e*mesh->plotNp + mesh->plotEToV[n*mesh->plotNverts+m]);
boltzmannPlotVTUQuad3D.c:87:  for(iint e=0;e<mesh->Nelements;++e){
boltzmannPlotVTUQuad3D.c:88:    for(iint n=0;n<mesh->plotNelements;++n){
boltzmannPlotVTUQuad3D.c:89:      cnt += mesh->plotNverts;
boltzmannPlotVTUQuad3D.c:97:  for(iint e=0;e<mesh->Nelements;++e){
boltzmannPlotVTUQuad3D.c:98:    for(iint n=0;n<mesh->plotNelements;++n){
Binary file boltzmannSetupMRQuad3D.o matches
#boltzmannRunQuad3D.c#:9:  iint haloBytes = mesh->totalHaloPairs*mesh->Np*mesh->Nfields*sizeof(dfloat);
#boltzmannRunQuad3D.c#:16:  occa::initTimer(mesh->device);
#boltzmannRunQuad3D.c#:18:  test_q    = (dfloat*) calloc((mesh->totalHaloPairs+mesh->Nelements)*mesh->Np*mesh->Nfields,
#boltzmannRunQuad3D.c#:22:  for(iint tstep=0;tstep<mesh->NtimeSteps;++tstep){
#boltzmannRunQuad3D.c#:24:    for(iint rk=0;rk<mesh->Nrk;++rk){
#boltzmannRunQuad3D.c#:29:      dfloat t = tstep*mesh->dt + mesh->dt*mesh->rkc[rk];
#boltzmannRunQuad3D.c#:31:      if(mesh->totalHaloPairs>0){
#boltzmannRunQuad3D.c#:33:	iint Nentries = mesh->Np*mesh->Nfields;
#boltzmannRunQuad3D.c#:35:	for (int i = 0; i < (mesh->totalHaloPairs+mesh->Nelements)*mesh->Np*mesh->Nfields; ++i)
#boltzmannRunQuad3D.c#:36:	  test_q[i] = mesh->o_q[i];
#boltzmannRunQuad3D.c#:38:	mesh->haloExtractKernel(mesh->totalHaloPairs,
#boltzmannRunQuad3D.c#:40:				mesh->o_haloElementList,
#boltzmannRunQuad3D.c#:41:				mesh->o_q,
#boltzmannRunQuad3D.c#:42:				mesh->o_haloBuffer);
#boltzmannRunQuad3D.c#:44:	for (int i = 0; i < (mesh->totalHaloPairs+mesh->Nelements)*mesh->Np*mesh->Nfields; ++i)
#boltzmannRunQuad3D.c#:45:	  if (mesh->o_q[i] > test_q[i] + 100) printf("blame halo code\n");
#boltzmannRunQuad3D.c#:48:	mesh->o_haloBuffer.copyTo(sendBuffer);      
#boltzmannRunQuad3D.c#:52:			      mesh->Np*mesh->Nfields*sizeof(dfloat),
#boltzmannRunQuad3D.c#:58:      for (int i = 0; i < (mesh->totalHaloPairs+mesh->Nelements)*mesh->Np*mesh->Nfields; ++i)
#boltzmannRunQuad3D.c#:59:	test_q[i] = mesh->o_q[i];
#boltzmannRunQuad3D.c#:62:      mesh->volumeKernel(mesh->Nelements,
#boltzmannRunQuad3D.c#:63:			 mesh->o_vgeo,
#boltzmannRunQuad3D.c#:64:			 mesh->o_D,
#boltzmannRunQuad3D.c#:65:			 mesh->o_x,
#boltzmannRunQuad3D.c#:66:			 mesh->o_y,
#boltzmannRunQuad3D.c#:67:			 mesh->o_z,
#boltzmannRunQuad3D.c#:68:			 mesh->o_q,
#boltzmannRunQuad3D.c#:69:			 mesh->o_rhsq);
#boltzmannRunQuad3D.c#:71:      for (int i = 0; i < (mesh->totalHaloPairs+mesh->Nelements)*mesh->Np*mesh->Nfields; ++i)
#boltzmannRunQuad3D.c#:72:	if (mesh->o_q[i] > test_q[i] + 100) printf("blame volume code\n");
#boltzmannRunQuad3D.c#:74:      if(mesh->totalHaloPairs>0){
#boltzmannRunQuad3D.c#:79:	size_t offset = mesh->Np*mesh->Nfields*mesh->Nelements*sizeof(dfloat); // offset for halo data
#boltzmannRunQuad3D.c#:80:	mesh->o_q.copyFrom(recvBuffer, haloBytes, offset);
#boltzmannRunQuad3D.c#:83:      mesh->device.finish();
#boltzmannRunQuad3D.c#:87:      for (int i = 0; i < (mesh->totalHaloPairs+mesh->Nelements)*mesh->Np*mesh->Nfields; ++i)
#boltzmannRunQuad3D.c#:88:	test_q[i] = mesh->o_q[i];
#boltzmannRunQuad3D.c#:92:      mesh->surfaceKernel(mesh->Nelements,
#boltzmannRunQuad3D.c#:93:			  mesh->o_sgeo,
#boltzmannRunQuad3D.c#:94:			  mesh->o_LIFTT,
#boltzmannRunQuad3D.c#:95:			  mesh->o_vmapM,
#boltzmannRunQuad3D.c#:96:			  mesh->o_vmapP,
#boltzmannRunQuad3D.c#:98:			  mesh->o_x,
#boltzmannRunQuad3D.c#:99:			  mesh->o_y,
#boltzmannRunQuad3D.c#:100:			  mesh->o_z,
#boltzmannRunQuad3D.c#:101:			  mesh->o_q,
#boltzmannRunQuad3D.c#:102:			  mesh->o_rhsq);
#boltzmannRunQuad3D.c#:104:      for (int i = 0; i < (mesh->totalHaloPairs+mesh->Nelements)*mesh->Np*mesh->Nfields; ++i)
#boltzmannRunQuad3D.c#:105:	if (mesh->o_q[i] > test_q[i] + 100) printf("blame surface code\n");
#boltzmannRunQuad3D.c#:107:      mesh->device.finish();
#boltzmannRunQuad3D.c#:110:      dfloat tupdate = tstep*mesh->dt + mesh->dt*mesh->rkc[rk+1];
#boltzmannRunQuad3D.c#:112:      mesh->device.finish();
#boltzmannRunQuad3D.c#:115:      for (int i = 0; i < (mesh->totalHaloPairs+mesh->Nelements)*mesh->Np*mesh->Nfields; ++i)
#boltzmannRunQuad3D.c#:116:	test_q[i] = mesh->o_q[i];
#boltzmannRunQuad3D.c#:118:      mesh->updateKernel(mesh->Nelements,
#boltzmannRunQuad3D.c#:119:			 mesh->dt,
#boltzmannRunQuad3D.c#:120:			 mesh->rka[rk],
#boltzmannRunQuad3D.c#:121:			 mesh->rkb[rk],
#boltzmannRunQuad3D.c#:122:			 mesh->o_rhsq,
#boltzmannRunQuad3D.c#:123:			 mesh->o_resq,
#boltzmannRunQuad3D.c#:124:			 mesh->o_q);
#boltzmannRunQuad3D.c#:126:      for (int i = 0; i < (mesh->totalHaloPairs+mesh->Nelements)*mesh->Np*mesh->Nfields; ++i)
#boltzmannRunQuad3D.c#:127:	if (mesh->o_q[i] > test_q[i] + 100) printf("blame surface code\n");
#boltzmannRunQuad3D.c#:130:      mesh->device.finish();
#boltzmannRunQuad3D.c#:135:    if((tstep%mesh->errorStep)==0){
#boltzmannRunQuad3D.c#:136:      dfloat t = (tstep+1)*mesh->dt;
#boltzmannRunQuad3D.c#:141:      mesh->o_q.copyTo(mesh->q);
#boltzmannRunQuad3D.c#:144:      for(int n=0;n<mesh->Nfields*mesh->Nelements*mesh->Np;++n){
#boltzmannRunQuad3D.c#:145:	if(isnan(mesh->q[n])){
#boltzmannRunQuad3D.c#:153:      //      boltzmannErrorQuad2D(mesh, mesh->dt*(tstep+1));
#boltzmannRunQuad3D.c#:156:      //      boltzmannComputeVorticityQuad2D(mesh, mesh->q, 0, mesh->Nfields);
#boltzmannRunQuad3D.c#:161:      //      sprintf(fname, "foo_T%04d.vtu", tstep/mesh->errorStep);
#boltzmannRunQuad3D.c#:163:      //      sprintf(fname, "foo_T%04d", tstep/mesh->errorStep);
#boltzmannRunQuad3D.c#:164:      boltzmannPlotVTUQuad3DV2(mesh, "foo", tstep/mesh->errorStep);
boltzmannRunMRSAABQuad3D.c:8:  occa::initTimer(mesh->device);
boltzmannRunMRSAABQuad3D.c:11:  iint haloBytes = mesh->totalHaloPairs*mesh->Np*mesh->Nfields*sizeof(dfloat);
boltzmannRunMRSAABQuad3D.c:15:  dfloat * test_q = (dfloat *) calloc(mesh->Nelements*mesh->Np*mesh->Nfields*mesh->Nrhs,sizeof(dfloat));
boltzmannRunMRSAABQuad3D.c:17:  for(iint tstep=0;tstep<mesh->NtimeSteps;++tstep){
boltzmannRunMRSAABQuad3D.c:18:    for (iint Ntick=0; Ntick < pow(2,mesh->MRABNlevels-1);Ntick++) {
boltzmannRunMRSAABQuad3D.c:31:      dfloat t = mesh->dt*(tstep*pow(2,mesh->MRABNlevels-1) + Ntick);
boltzmannRunMRSAABQuad3D.c:34:      for (lev=0;lev<mesh->MRABNlevels;lev++)
boltzmannRunMRSAABQuad3D.c:37:      if(mesh->totalHaloPairs>0){
boltzmannRunMRSAABQuad3D.c:39:	iint Nentries = mesh->Np*mesh->Nfields;
boltzmannRunMRSAABQuad3D.c:41:	mesh->o_q.copyTo(test_q);
boltzmannRunMRSAABQuad3D.c:43:	mesh->haloExtractKernel(mesh->totalHaloPairs,
boltzmannRunMRSAABQuad3D.c:45:				mesh->o_haloElementList,
boltzmannRunMRSAABQuad3D.c:46:				mesh->o_q,
boltzmannRunMRSAABQuad3D.c:47:				mesh->o_haloBuffer);
boltzmannRunMRSAABQuad3D.c:49:	for (int i = 0; i < (mesh->totalHaloPairs+mesh->Nelements)*mesh->Np*mesh->Nfields; ++i)
boltzmannRunMRSAABQuad3D.c:53:	mesh->o_haloBuffer.copyTo(sendBuffer);      
boltzmannRunMRSAABQuad3D.c:57:			      mesh->Np*mesh->Nfields*sizeof(dfloat),
boltzmannRunMRSAABQuad3D.c:62:       mesh->o_q.copyTo(test_q);
boltzmannRunMRSAABQuad3D.c:63:      for (int j = 0; j < mesh->Nfields; ++j) {
boltzmannRunMRSAABQuad3D.c:64:	for (int i = 0; i < mesh->Np; ++i) {
boltzmannRunMRSAABQuad3D.c:65:	  printf("  %lf",test_q[i + j*mesh->Np + 40*mesh->Np*mesh->Nfields]);
boltzmannRunMRSAABQuad3D.c:72:	if (mesh->MRABNelements[l]) {
boltzmannRunMRSAABQuad3D.c:74:	  mesh->volumeKernel(mesh->MRABNelements[l],
boltzmannRunMRSAABQuad3D.c:75:			     mesh->o_MRABelementIds[l],
boltzmannRunMRSAABQuad3D.c:76:			     mesh->MRABshiftIndex[l],
boltzmannRunMRSAABQuad3D.c:77:			     mesh->Nrhs,
boltzmannRunMRSAABQuad3D.c:78:			     mesh->o_vgeo,
boltzmannRunMRSAABQuad3D.c:79:			     mesh->o_D,
boltzmannRunMRSAABQuad3D.c:80:			     mesh->o_x,
boltzmannRunMRSAABQuad3D.c:81:			     mesh->o_y,
boltzmannRunMRSAABQuad3D.c:82:			     mesh->o_z,
boltzmannRunMRSAABQuad3D.c:83:			     mesh->o_q,
boltzmannRunMRSAABQuad3D.c:84:			     mesh->o_rhsq);
boltzmannRunMRSAABQuad3D.c:85:	  mesh->o_rhsq.copyTo(test_q);
boltzmannRunMRSAABQuad3D.c:86:	  /*for (int j = 0; j < mesh->Nfields; ++j) {
boltzmannRunMRSAABQuad3D.c:87:	    for (int i = 0; i < mesh->Np; ++i) {
boltzmannRunMRSAABQuad3D.c:88:	      printf("  %lf",test_q[i + j*mesh->Np + mesh->MRABshiftIndex[l]*mesh->Np*mesh->Nfields + 40*mesh->Np*mesh->Nrhs*mesh->Nfields]);
boltzmannRunMRSAABQuad3D.c:96:      if(mesh->totalHaloPairs>0){
boltzmannRunMRSAABQuad3D.c:101:	size_t offset = mesh->Np*mesh->Nfields*mesh->Nelements*sizeof(dfloat); // offset for halo data
boltzmannRunMRSAABQuad3D.c:102:	mesh->o_q.copyFrom(recvBuffer, haloBytes, offset);
boltzmannRunMRSAABQuad3D.c:105:      mesh->device.finish();
boltzmannRunMRSAABQuad3D.c:111:	if (mesh->MRABNelements[l]) {
boltzmannRunMRSAABQuad3D.c:113:	  mesh->surfaceKernel(mesh->MRABNelements[l],
boltzmannRunMRSAABQuad3D.c:114:			      mesh->o_MRABelementIds[l],
boltzmannRunMRSAABQuad3D.c:115:			      mesh->Nrhs,
boltzmannRunMRSAABQuad3D.c:116:			      mesh->MRABshiftIndex[l],
boltzmannRunMRSAABQuad3D.c:117:			      mesh->o_sgeo,
boltzmannRunMRSAABQuad3D.c:118:			      mesh->o_LIFTT,
boltzmannRunMRSAABQuad3D.c:119:			      mesh->o_vmapM,
boltzmannRunMRSAABQuad3D.c:120:			      mesh->o_vmapP,
boltzmannRunMRSAABQuad3D.c:122:			      mesh->o_x,
boltzmannRunMRSAABQuad3D.c:123:			      mesh->o_y,
boltzmannRunMRSAABQuad3D.c:124:			      mesh->o_z,
boltzmannRunMRSAABQuad3D.c:125:			      mesh->o_q,
boltzmannRunMRSAABQuad3D.c:126:			      mesh->o_rhsq);
boltzmannRunMRSAABQuad3D.c:132:      for (lev=0;lev<mesh->MRABNlevels;lev++)
boltzmannRunMRSAABQuad3D.c:136:	const iint id = mrab_order*mesh->MRABNlevels*mesh->Nrhs + l*mesh->Nrhs;
boltzmannRunMRSAABQuad3D.c:140:	if (mesh->MRABNelements[l]) {
boltzmannRunMRSAABQuad3D.c:141:	  mesh->o_q.copyTo(test_q);
boltzmannRunMRSAABQuad3D.c:143:	  mesh->updateKernel(mesh->MRABNelements[l],
boltzmannRunMRSAABQuad3D.c:144:			     mesh->o_MRABelementIds[l],
boltzmannRunMRSAABQuad3D.c:145:			     mesh->MRSAAB_C[l],
boltzmannRunMRSAABQuad3D.c:146:			     mesh->MRAB_A[id+0],
boltzmannRunMRSAABQuad3D.c:147:			     mesh->MRAB_A[id+1],
boltzmannRunMRSAABQuad3D.c:148:			     mesh->MRAB_A[id+2],
boltzmannRunMRSAABQuad3D.c:149:			     mesh->MRSAAB_A[id+0],
boltzmannRunMRSAABQuad3D.c:150:			     mesh->MRSAAB_A[id+1],
boltzmannRunMRSAABQuad3D.c:151:			     mesh->MRSAAB_A[id+2],
boltzmannRunMRSAABQuad3D.c:152:			     mesh->MRABshiftIndex[l],
boltzmannRunMRSAABQuad3D.c:153:			     mesh->o_rhsq,
boltzmannRunMRSAABQuad3D.c:154:			     mesh->o_q);
boltzmannRunMRSAABQuad3D.c:158:	  mesh->MRABshiftIndex[l] = (mesh->MRABshiftIndex[l]+1)%mesh->Nrhs;
boltzmannRunMRSAABQuad3D.c:164:      if (lev<mesh->MRABNlevels) {
boltzmannRunMRSAABQuad3D.c:166:	const iint id = mrab_order*mesh->MRABNlevels*mesh->Nrhs + (lev-1)*mesh->Nrhs;
boltzmannRunMRSAABQuad3D.c:168:	if (mesh->MRABNhaloElements[lev]) {
boltzmannRunMRSAABQuad3D.c:169:	  mesh->o_q.copyTo(test_q);
boltzmannRunMRSAABQuad3D.c:171:	  mesh->traceUpdateKernel(mesh->MRABNhaloElements[lev],
boltzmannRunMRSAABQuad3D.c:172:				  mesh->o_MRABhaloIds[lev],
boltzmannRunMRSAABQuad3D.c:173:				  mesh->MRSAAB_C[lev-1], //
boltzmannRunMRSAABQuad3D.c:174:				  mesh->MRAB_B[id+0], //
boltzmannRunMRSAABQuad3D.c:175:				  mesh->MRAB_B[id+1],
boltzmannRunMRSAABQuad3D.c:176:				  mesh->MRAB_B[id+2], //
boltzmannRunMRSAABQuad3D.c:177:				  mesh->MRSAAB_B[id+0], //
boltzmannRunMRSAABQuad3D.c:178:				  mesh->MRSAAB_B[id+1],
boltzmannRunMRSAABQuad3D.c:179:				  mesh->MRSAAB_B[id+2], 
boltzmannRunMRSAABQuad3D.c:180:				  mesh->MRABshiftIndex[lev],
boltzmannRunMRSAABQuad3D.c:181:				  mesh->o_rhsq,
boltzmannRunMRSAABQuad3D.c:182:				  mesh->o_q);
boltzmannRunMRSAABQuad3D.c:190:      if((tstep%mesh->errorStep)==0){
boltzmannRunMRSAABQuad3D.c:191:	dfloat t = (tstep+1)*mesh->dt;
boltzmannRunMRSAABQuad3D.c:196:	mesh->o_q.copyTo(mesh->q);
boltzmannRunMRSAABQuad3D.c:199:	for(int n=0;n<mesh->Nfields*mesh->Nelements*mesh->Np;++n){
boltzmannRunMRSAABQuad3D.c:200:	  if(isnan(mesh->q[n])){
boltzmannRunMRSAABQuad3D.c:208:	//      boltzmannErrorQuad2D(mesh, mesh->dt*(tstep+1));
boltzmannRunMRSAABQuad3D.c:211:	//      boltzmannComputeVorticityQuad2D(mesh, mesh->q, 0, mesh->Nfields);
boltzmannRunMRSAABQuad3D.c:216:	//      sprintf(fname, "foo_T%04d.vtu", tstep/mesh->errorStep);
boltzmannRunMRSAABQuad3D.c:218:	//      sprintf(fname, "foo_T%04d", tstep/mesh->errorStep);
boltzmannRunMRSAABQuad3D.c:219:	boltzmannPlotVTUQuad3DV2(mesh, "foo", tstep/mesh->errorStep);
boltzmannSetupMRQuad3D.c~:34:  mesh->Nfields = 10;
boltzmannSetupMRQuad3D.c~:37:  mesh->q    = (dfloat*) calloc((mesh->totalHaloPairs+mesh->Nelements)*mesh->Np*mesh->Nfields,
boltzmannSetupMRQuad3D.c~:39:  mesh->rhsq = (dfloat*) calloc(mesh->Nelements*msh->nrhs*mesh->Np*mesh->Nfields,
boltzmannSetupMRQuad3D.c~:41:  mesh->resq = (dfloat*) calloc(mesh->Nelements*mesh->Np*mesh->Nfields,
boltzmannSetupMRQuad3D.c~:45:  mesh->RT = 9.;
boltzmannSetupMRQuad3D.c~:46:  mesh->sqrtRT = sqrt(mesh->RT);
boltzmannSetupMRQuad3D.c~:50:  dfloat sR = mesh->sphereRadius;
boltzmannSetupMRQuad3D.c~:53:  for(iint e=0;e<mesh->Nelements;++e){
boltzmannSetupMRQuad3D.c~:54:    for(iint n=0;n<mesh->Np;++n){
boltzmannSetupMRQuad3D.c~:56:      dfloat x = mesh->x[n + mesh->Np*e];
boltzmannSetupMRQuad3D.c~:57:      dfloat y = mesh->y[n + mesh->Np*e];
boltzmannSetupMRQuad3D.c~:58:      dfloat z = mesh->z[n + mesh->Np*e];
boltzmannSetupMRQuad3D.c~:74:      brownMinion(bmRho, bmDelta, mesh->sphereRadius, x+delta, y, z, &uP, &vP, &wP);
boltzmannSetupMRQuad3D.c~:75:      brownMinion(bmRho, bmDelta, mesh->sphereRadius, x-delta, y, z, &uM, &vM, &wM);
boltzmannSetupMRQuad3D.c~:81:      brownMinion(bmRho, bmDelta, mesh->sphereRadius, x, y+delta, z, &uP, &vP, &wP);
boltzmannSetupMRQuad3D.c~:82:      brownMinion(bmRho, bmDelta, mesh->sphereRadius, x, y-delta, z, &uM, &vM, &wM);
boltzmannSetupMRQuad3D.c~:88:      brownMinion(bmRho, bmDelta, mesh->sphereRadius, x, y, z+delta, &uP, &vP, &wP);
boltzmannSetupMRQuad3D.c~:89:      brownMinion(bmRho, bmDelta, mesh->sphereRadius, x, y, z-delta, &uM, &vM, &wM);
boltzmannSetupMRQuad3D.c~:113:      dfloat q2bar = rho*umod/mesh->sqrtRT;
boltzmannSetupMRQuad3D.c~:114:      dfloat q3bar = rho*vmod/mesh->sqrtRT;
boltzmannSetupMRQuad3D.c~:115:      dfloat q4bar = rho*wmod/mesh->sqrtRT;
boltzmannSetupMRQuad3D.c~:116:      dfloat q5bar = (rho*umod*umod - sigma11)/(sqrt(2.)*mesh->RT);
boltzmannSetupMRQuad3D.c~:117:      dfloat q6bar = (rho*vmod*vmod - sigma22)/(sqrt(2.)*mesh->RT);
boltzmannSetupMRQuad3D.c~:118:      dfloat q7bar = (rho*wmod*wmod - sigma33)/(sqrt(2.)*mesh->RT);
boltzmannSetupMRQuad3D.c~:119:      dfloat q8bar  = (rho*umod*vmod - sigma12)/mesh->RT;
boltzmannSetupMRQuad3D.c~:120:      dfloat q9bar =  (rho*umod*wmod - sigma13)/mesh->RT;
boltzmannSetupMRQuad3D.c~:121:      dfloat q10bar = (rho*vmod*wmod - sigma23)/mesh->RT;
boltzmannSetupMRQuad3D.c~:125:      int base = n + e*mesh->Np*mesh->Nfields;
boltzmannSetupMRQuad3D.c~:133:      mesh->q[base+0*mesh->Np] = q1bar; // uniform density, zero flow
boltzmannSetupMRQuad3D.c~:135:      mesh->q[base+1*mesh->Np] = q2bar;
boltzmannSetupMRQuad3D.c~:136:      mesh->q[base+2*mesh->Np] = q3bar;
boltzmannSetupMRQuad3D.c~:137:      mesh->q[base+3*mesh->Np] = q4bar;
boltzmannSetupMRQuad3D.c~:139:      mesh->q[base+4*mesh->Np] = q5bar;
boltzmannSetupMRQuad3D.c~:140:      mesh->q[base+5*mesh->Np] = q6bar;
boltzmannSetupMRQuad3D.c~:141:      mesh->q[base+6*mesh->Np] = q7bar;
boltzmannSetupMRQuad3D.c~:143:      mesh->q[base+7*mesh->Np] = q8bar;
boltzmannSetupMRQuad3D.c~:144:      mesh->q[base+8*mesh->Np] = q9bar;
boltzmannSetupMRQuad3D.c~:145:      mesh->q[base+9*mesh->Np] = q10bar;
boltzmannSetupMRQuad3D.c~:156:  mesh->tauInv = mesh->RT/nu; // TW
boltzmannSetupMRQuad3D.c~:160:  for(iint e=0;e<mesh->Nelements;++e){
boltzmannSetupMRQuad3D.c~:162:    for(iint f=0;f<mesh->Nfaces;++f){
boltzmannSetupMRQuad3D.c~:163:      for(iint n=0;n<mesh->Nfp;++n){
boltzmannSetupMRQuad3D.c~:164:	iint sid = mesh->Nsgeo*mesh->Nfp*mesh->Nfaces*e + mesh->Nsgeo*mesh->Nfp*f+n;
boltzmannSetupMRQuad3D.c~:166:	dfloat sJ   = mesh->sgeo[sid + mesh->Nq*SJID];
boltzmannSetupMRQuad3D.c~:167:	dfloat invJ = mesh->sgeo[sid + mesh->Nq*IJID];
boltzmannSetupMRQuad3D.c~:184:  dfloat dt = cfl*hmin/((mesh->N+1.)*(mesh->N+1.)*sqrt(3.)*mesh->sqrtRT);
boltzmannSetupMRQuad3D.c~:186:  dt = mymin(dt, cfl/mesh->tauInv);
boltzmannSetupMRQuad3D.c~:192:  printf("max wave speed = %g\n", sqrt(3.)*mesh->sqrtRT);
boltzmannSetupMRQuad3D.c~:195:  MPI_Allreduce(&dt, &(mesh->dt), 1, MPI_DFLOAT, MPI_MIN, MPI_COMM_WORLD);
boltzmannSetupMRQuad3D.c~:198:  mesh->finalTime = 10;
boltzmannSetupMRQuad3D.c~:199:  mesh->NtimeSteps = mesh->finalTime/mesh->dt;
boltzmannSetupMRQuad3D.c~:200:  mesh->dt = mesh->finalTime/mesh->NtimeSteps;
boltzmannSetupMRQuad3D.c~:203:  mesh->errorStep = 100*mesh->Nq;
boltzmannSetupMRQuad3D.c~:205:  printf("dt = %g\n", mesh->dt);
boltzmannSetupMRQuad3D.c~:226:  kernelInfo.addDefine("p_Nq", mesh->Nq);
boltzmannSetupMRQuad3D.c~:228:  printf("mesh->Nq = %d\n", mesh->Nq);
boltzmannSetupMRQuad3D.c~:229:  mesh->o_D  = mesh->device.malloc(mesh->Nq*mesh->Nq*sizeof(dfloat), mesh->D);
boltzmannSetupMRQuad3D.c~:231:    mesh->o_vgeo =
boltzmannSetupMRQuad3D.c~:232:      mesh->device.malloc(mesh->Nelements*mesh->Np*mesh->Nvgeo*sizeof(dfloat),
boltzmannSetupMRQuad3D.c~:233:			  mesh->vgeo);
boltzmannSetupMRQuad3D.c~:235:      mesh->o_sgeo =
boltzmannSetupMRQuad3D.c~:236:	mesh->device.malloc(mesh->Nelements*mesh->Nfp*mesh->Nfaces*mesh->Nsgeo*sizeof(dfloat),
boltzmannSetupMRQuad3D.c~:237:			    mesh->sgeo);
boltzmannSetupMRQuad3D.c~:241:      kernelInfo.addDefine("p_maxNodesVolume", mymax(mesh->cubNp,mesh->Np));
boltzmannSetupMRQuad3D.c~:243:      int maxNodes = mesh->Nfp;
boltzmannSetupMRQuad3D.c~:246:      int NblockV = 256/mesh->Np; // works for CUDA
boltzmannSetupMRQuad3D.c~:253:      kernelInfo.addDefine("p_sqrtRT", mesh->sqrtRT);
boltzmannSetupMRQuad3D.c~:254:      kernelInfo.addDefine("p_invsqrtRT", (dfloat)(1./mesh->sqrtRT));
boltzmannSetupMRQuad3D.c~:259:      kernelInfo.addDefine("p_tauInv", mesh->tauInv);
boltzmannSetupMRQuad3D.c~:261:      kernelInfo.addDefine("p_invRadiusSq", 1./(mesh->sphereRadius*mesh->sphereRadius));
boltzmannSetupMRQuad3D.c~:265:        mesh->volumeKernel =
boltzmannSetupMRQuad3D.c~:266:	  mesh->device.buildKernelFromSource(DHOLMES "/okl/boltzmannVolumeQuad3D.okl",
boltzmannSetupMRQuad3D.c~:270:	  mesh->surfaceKernel =
boltzmannSetupMRQuad3D.c~:271:	    mesh->device.buildKernelFromSource(DHOLMES "/okl/boltzmannSurfaceQuad3D.okl",
boltzmannSetupMRQuad3D.c~:276:	    mesh->updateKernel =
boltzmannSetupMRQuad3D.c~:277:	      mesh->device.buildKernelFromSource(DHOLMES "/okl/boltzmannUpdateQuad3D.okl",
boltzmannSetupMRQuad3D.c~:281:	      mesh->haloExtractKernel =
boltzmannSetupMRQuad3D.c~:282:		mesh->device.buildKernelFromSource(DHOLMES "/okl/meshHaloExtract2D.okl",
boltzmannSetupQuad3D.c:34:  mesh->Nfields = 10;
boltzmannSetupQuad3D.c:37:  mesh->q    = (dfloat*) calloc((mesh->totalHaloPairs+mesh->Nelements)*mesh->Np*mesh->Nfields,
boltzmannSetupQuad3D.c:39:  mesh->rhsq = (dfloat*) calloc(mesh->Nelements*mesh->Np*mesh->Nfields,
boltzmannSetupQuad3D.c:41:  mesh->resq = (dfloat*) calloc(mesh->Nelements*mesh->Np*mesh->Nfields,
boltzmannSetupQuad3D.c:45:  mesh->RT = 9.;
boltzmannSetupQuad3D.c:46:  mesh->sqrtRT = sqrt(mesh->RT);
boltzmannSetupQuad3D.c:50:  dfloat sR = mesh->sphereRadius;
boltzmannSetupQuad3D.c:53:  for(iint e=0;e<mesh->Nelements;++e){
boltzmannSetupQuad3D.c:54:    for(iint n=0;n<mesh->Np;++n){
boltzmannSetupQuad3D.c:56:      dfloat x = mesh->x[n + mesh->Np*e];
boltzmannSetupQuad3D.c:57:      dfloat y = mesh->y[n + mesh->Np*e];
boltzmannSetupQuad3D.c:58:      dfloat z = mesh->z[n + mesh->Np*e];
boltzmannSetupQuad3D.c:74:      brownMinion(bmRho, bmDelta, mesh->sphereRadius, x+delta, y, z, &uP, &vP, &wP);
boltzmannSetupQuad3D.c:75:      brownMinion(bmRho, bmDelta, mesh->sphereRadius, x-delta, y, z, &uM, &vM, &wM);
boltzmannSetupQuad3D.c:81:      brownMinion(bmRho, bmDelta, mesh->sphereRadius, x, y+delta, z, &uP, &vP, &wP);
boltzmannSetupQuad3D.c:82:      brownMinion(bmRho, bmDelta, mesh->sphereRadius, x, y-delta, z, &uM, &vM, &wM);
boltzmannSetupQuad3D.c:88:      brownMinion(bmRho, bmDelta, mesh->sphereRadius, x, y, z+delta, &uP, &vP, &wP);
boltzmannSetupQuad3D.c:89:      brownMinion(bmRho, bmDelta, mesh->sphereRadius, x, y, z-delta, &uM, &vM, &wM);
boltzmannSetupQuad3D.c:113:      dfloat q2bar = rho*umod/mesh->sqrtRT;
boltzmannSetupQuad3D.c:114:      dfloat q3bar = rho*vmod/mesh->sqrtRT;
boltzmannSetupQuad3D.c:115:      dfloat q4bar = rho*wmod/mesh->sqrtRT;
boltzmannSetupQuad3D.c:116:      dfloat q5bar = (rho*umod*umod - sigma11)/(sqrt(2.)*mesh->RT);
boltzmannSetupQuad3D.c:117:      dfloat q6bar = (rho*vmod*vmod - sigma22)/(sqrt(2.)*mesh->RT);
boltzmannSetupQuad3D.c:118:      dfloat q7bar = (rho*wmod*wmod - sigma33)/(sqrt(2.)*mesh->RT);
boltzmannSetupQuad3D.c:119:      dfloat q8bar  = (rho*umod*vmod - sigma12)/mesh->RT;
boltzmannSetupQuad3D.c:120:      dfloat q9bar =  (rho*umod*wmod - sigma13)/mesh->RT;
boltzmannSetupQuad3D.c:121:      dfloat q10bar = (rho*vmod*wmod - sigma23)/mesh->RT;
boltzmannSetupQuad3D.c:125:      int base = n + e*mesh->Np*mesh->Nfields;
boltzmannSetupQuad3D.c:133:      mesh->q[base+0*mesh->Np] = q1bar; // uniform density, zero flow
boltzmannSetupQuad3D.c:135:      mesh->q[base+1*mesh->Np] = q2bar;
boltzmannSetupQuad3D.c:136:      mesh->q[base+2*mesh->Np] = q3bar;
boltzmannSetupQuad3D.c:137:      mesh->q[base+3*mesh->Np] = q4bar;
boltzmannSetupQuad3D.c:139:      mesh->q[base+4*mesh->Np] = q5bar;
boltzmannSetupQuad3D.c:140:      mesh->q[base+5*mesh->Np] = q6bar;
boltzmannSetupQuad3D.c:141:      mesh->q[base+6*mesh->Np] = q7bar;
boltzmannSetupQuad3D.c:143:      mesh->q[base+7*mesh->Np] = q8bar;
boltzmannSetupQuad3D.c:144:      mesh->q[base+8*mesh->Np] = q9bar;
boltzmannSetupQuad3D.c:145:      mesh->q[base+9*mesh->Np] = q10bar;
boltzmannSetupQuad3D.c:156:  mesh->tauInv = mesh->RT/nu; // TW
boltzmannSetupQuad3D.c:160:  for(iint e=0;e<mesh->Nelements;++e){
boltzmannSetupQuad3D.c:162:    for(iint f=0;f<mesh->Nfaces;++f){
boltzmannSetupQuad3D.c:163:      for(iint n=0;n<mesh->Nfp;++n){
boltzmannSetupQuad3D.c:164:	iint sid = mesh->Nsgeo*mesh->Nfp*mesh->Nfaces*e + mesh->Nsgeo*mesh->Nfp*f+n;
boltzmannSetupQuad3D.c:166:	dfloat sJ   = mesh->sgeo[sid + mesh->Nq*SJID];
boltzmannSetupQuad3D.c:167:	dfloat invJ = mesh->sgeo[sid + mesh->Nq*IJID];
boltzmannSetupQuad3D.c:184:  dfloat dt = cfl*hmin/((mesh->N+1.)*(mesh->N+1.)*sqrt(3.)*mesh->sqrtRT);
boltzmannSetupQuad3D.c:186:  dt = mymin(dt, cfl/mesh->tauInv);
boltzmannSetupQuad3D.c:192:  printf("max wave speed = %g\n", sqrt(3.)*mesh->sqrtRT);
boltzmannSetupQuad3D.c:195:  MPI_Allreduce(&dt, &(mesh->dt), 1, MPI_DFLOAT, MPI_MIN, MPI_COMM_WORLD);
boltzmannSetupQuad3D.c:198:  mesh->finalTime = 10;
boltzmannSetupQuad3D.c:199:  mesh->NtimeSteps = mesh->finalTime/mesh->dt;
boltzmannSetupQuad3D.c:200:  mesh->dt = mesh->finalTime/mesh->NtimeSteps;
boltzmannSetupQuad3D.c:203:  mesh->errorStep = 100*mesh->Nq;
boltzmannSetupQuad3D.c:205:  printf("dt = %g\n", mesh->dt);
boltzmannSetupQuad3D.c:226:  kernelInfo.addDefine("p_Nq", mesh->Nq);
boltzmannSetupQuad3D.c:228:  printf("mesh->Nq = %d\n", mesh->Nq);
boltzmannSetupQuad3D.c:229:  mesh->o_D  = mesh->device.malloc(mesh->Nq*mesh->Nq*sizeof(dfloat), mesh->D);
boltzmannSetupQuad3D.c:231:    mesh->o_vgeo =
boltzmannSetupQuad3D.c:232:      mesh->device.malloc(mesh->Nelements*mesh->Np*mesh->Nvgeo*sizeof(dfloat),
boltzmannSetupQuad3D.c:233:			  mesh->vgeo);
boltzmannSetupQuad3D.c:235:      mesh->o_sgeo =
boltzmannSetupQuad3D.c:236:	mesh->device.malloc(mesh->Nelements*mesh->Nfp*mesh->Nfaces*mesh->Nsgeo*sizeof(dfloat),
boltzmannSetupQuad3D.c:237:			    mesh->sgeo);
boltzmannSetupQuad3D.c:241:      kernelInfo.addDefine("p_maxNodesVolume", mymax(mesh->cubNp,mesh->Np));
boltzmannSetupQuad3D.c:243:      int maxNodes = mesh->Nfp;
boltzmannSetupQuad3D.c:246:      int NblockV = 256/mesh->Np; // works for CUDA
boltzmannSetupQuad3D.c:253:      kernelInfo.addDefine("p_sqrtRT", mesh->sqrtRT);
boltzmannSetupQuad3D.c:254:      kernelInfo.addDefine("p_invsqrtRT", (dfloat)(1./mesh->sqrtRT));
boltzmannSetupQuad3D.c:259:      kernelInfo.addDefine("p_tauInv", mesh->tauInv);
boltzmannSetupQuad3D.c:261:      kernelInfo.addDefine("p_invRadiusSq", 1./(mesh->sphereRadius*mesh->sphereRadius));
boltzmannSetupQuad3D.c:265:        mesh->volumeKernel =
boltzmannSetupQuad3D.c:266:	  mesh->device.buildKernelFromSource(DHOLMES "/okl/boltzmannVolumeQuad3D.okl",
boltzmannSetupQuad3D.c:270:	  mesh->surfaceKernel =
boltzmannSetupQuad3D.c:271:	    mesh->device.buildKernelFromSource(DHOLMES "/okl/boltzmannSurfaceQuad3D.okl",
boltzmannSetupQuad3D.c:276:	    mesh->updateKernel =
boltzmannSetupQuad3D.c:277:	      mesh->device.buildKernelFromSource(DHOLMES "/okl/boltzmannUpdateQuad3D.okl",
boltzmannSetupQuad3D.c:281:	      mesh->haloExtractKernel =
boltzmannSetupQuad3D.c:282:		mesh->device.buildKernelFromSource(DHOLMES "/okl/meshHaloExtract2D.okl",
boltzmannPlotVTUQuad3DV2.c:25:	  mesh->Nelements*mesh->plotNp, 
boltzmannPlotVTUQuad3DV2.c:26:	  mesh->Nelements*mesh->plotNelements);
boltzmannPlotVTUQuad3DV2.c:34:  for(iint e=0;e<mesh->Nelements;++e){
boltzmannPlotVTUQuad3DV2.c:35:    for(iint n=0;n<mesh->plotNp;++n){
boltzmannPlotVTUQuad3DV2.c:37:      for(iint m=0;m<mesh->Np;++m){
boltzmannPlotVTUQuad3DV2.c:38:	plotxn += mesh->plotInterp[n*mesh->Np+m]*mesh->x[m+e*mesh->Np];
boltzmannPlotVTUQuad3DV2.c:39:	plotyn += mesh->plotInterp[n*mesh->Np+m]*mesh->y[m+e*mesh->Np];
boltzmannPlotVTUQuad3DV2.c:40:	plotzn += mesh->plotInterp[n*mesh->Np+m]*mesh->z[m+e*mesh->Np];
boltzmannPlotVTUQuad3DV2.c:57:  for(iint e=0;e<mesh->Nelements;++e){
boltzmannPlotVTUQuad3DV2.c:58:    for(iint n=0;n<mesh->plotNp;++n){
boltzmannPlotVTUQuad3DV2.c:60:      for(iint m=0;m<mesh->Np;++m){
boltzmannPlotVTUQuad3DV2.c:61:	int id = m + 0*mesh->Np + mesh->Nfields*mesh->Np*e;
boltzmannPlotVTUQuad3DV2.c:62:        dfloat pm = mesh->q[id];
boltzmannPlotVTUQuad3DV2.c:63:        plotpn += mesh->plotInterp[n*mesh->Np+m]*pm;
boltzmannPlotVTUQuad3DV2.c:66:      //      plotpn = plotpn*mesh->rho; // Get Pressure
boltzmannPlotVTUQuad3DV2.c:75:  for(iint e=0;e<mesh->Nelements;++e){
boltzmannPlotVTUQuad3DV2.c:76:    for(iint n=0;n<mesh->plotNp;++n){
boltzmannPlotVTUQuad3DV2.c:78:      for(iint m=0;m<mesh->Np;++m){
boltzmannPlotVTUQuad3DV2.c:79:	int uid = m + 1*mesh->Np + mesh->Nfields*mesh->Np*e;
boltzmannPlotVTUQuad3DV2.c:80:	int vid = m + 2*mesh->Np + mesh->Nfields*mesh->Np*e;
boltzmannPlotVTUQuad3DV2.c:81:	int wid = m + 3*mesh->Np + mesh->Nfields*mesh->Np*e;
boltzmannPlotVTUQuad3DV2.c:83:        dfloat um = mesh->q[uid];
boltzmannPlotVTUQuad3DV2.c:84:        dfloat vm = mesh->q[vid];
boltzmannPlotVTUQuad3DV2.c:85:	dfloat wm = mesh->q[vid];
boltzmannPlotVTUQuad3DV2.c:87:        plotun += mesh->plotInterp[n*mesh->Np+m]*um;
boltzmannPlotVTUQuad3DV2.c:88:        plotvn += mesh->plotInterp[n*mesh->Np+m]*vm;
boltzmannPlotVTUQuad3DV2.c:89:	plotwn += mesh->plotInterp[n*mesh->Np+m]*wm;
boltzmannPlotVTUQuad3DV2.c:101:  dfloat *vort = (dfloat*) calloc(mesh->Np*mesh->dim, sizeof(dfloat));
boltzmannPlotVTUQuad3DV2.c:102:  dfloat *plotVortRadial = (dfloat*) calloc(mesh->plotNp*mesh->Nelements, sizeof(dfloat));
boltzmannPlotVTUQuad3DV2.c:103:  for(iint e=0;e<mesh->Nelements;++e){
boltzmannPlotVTUQuad3DV2.c:106:    for(iint j=0;j<mesh->Nq;++j){
boltzmannPlotVTUQuad3DV2.c:107:      for(iint i=0;i<mesh->Nq;++i){
boltzmannPlotVTUQuad3DV2.c:109:	int n = i+mesh->Nq*j;
boltzmannPlotVTUQuad3DV2.c:110:	iint gbase = e*mesh->Np*mesh->Nvgeo + n;
boltzmannPlotVTUQuad3DV2.c:111:	dfloat rx = mesh->vgeo[gbase+mesh->Np*RXID];
boltzmannPlotVTUQuad3DV2.c:112:	dfloat sx = mesh->vgeo[gbase+mesh->Np*SXID];
boltzmannPlotVTUQuad3DV2.c:113:	dfloat tx = mesh->vgeo[gbase+mesh->Np*TXID];
boltzmannPlotVTUQuad3DV2.c:115:	dfloat ry = mesh->vgeo[gbase+mesh->Np*RYID];
boltzmannPlotVTUQuad3DV2.c:116:	dfloat sy = mesh->vgeo[gbase+mesh->Np*SYID];
boltzmannPlotVTUQuad3DV2.c:117:	dfloat ty = mesh->vgeo[gbase+mesh->Np*TYID];
boltzmannPlotVTUQuad3DV2.c:119:	dfloat rz = mesh->vgeo[gbase+mesh->Np*RZID];
boltzmannPlotVTUQuad3DV2.c:120:	dfloat sz = mesh->vgeo[gbase+mesh->Np*SZID];
boltzmannPlotVTUQuad3DV2.c:121:	dfloat tz = mesh->vgeo[gbase+mesh->Np*TZID];
boltzmannPlotVTUQuad3DV2.c:127:	for(iint m=0;m<mesh->Nq;++m){
boltzmannPlotVTUQuad3DV2.c:128:	  int basejm = m + j*mesh->Nq + mesh->Nfields*mesh->Np*e;
boltzmannPlotVTUQuad3DV2.c:129:	  int basemi = i + m*mesh->Nq + mesh->Nfields*mesh->Np*e;
boltzmannPlotVTUQuad3DV2.c:130:	  dfloat Dim = mesh->D[i*mesh->Nq+m];
boltzmannPlotVTUQuad3DV2.c:131:	  dfloat Djm = mesh->D[j*mesh->Nq+m];
boltzmannPlotVTUQuad3DV2.c:132:	  dudr += Dim*mesh->q[basejm + 1*mesh->Np]/mesh->q[basejm];
boltzmannPlotVTUQuad3DV2.c:133:	  duds += Djm*mesh->q[basemi + 1*mesh->Np]/mesh->q[basemi];
boltzmannPlotVTUQuad3DV2.c:134:	  dvdr += Dim*mesh->q[basejm + 2*mesh->Np]/mesh->q[basejm];
boltzmannPlotVTUQuad3DV2.c:135:	  dvds += Djm*mesh->q[basemi + 2*mesh->Np]/mesh->q[basemi];
boltzmannPlotVTUQuad3DV2.c:136:	  dwdr += Dim*mesh->q[basejm + 3*mesh->Np]/mesh->q[basejm];
boltzmannPlotVTUQuad3DV2.c:137:	  dwds += Djm*mesh->q[basemi + 3*mesh->Np]/mesh->q[basemi];
boltzmannPlotVTUQuad3DV2.c:139:	int base = i + j*mesh->Nq + e*mesh->Np*mesh->Nfields;
boltzmannPlotVTUQuad3DV2.c:140:	dfloat dudx = rx*dudr + sx*duds + tx*mesh->q[base + 1*mesh->Np]/mesh->q[base];
boltzmannPlotVTUQuad3DV2.c:141:	dfloat dudy = ry*dudr + sy*duds + ty*mesh->q[base + 1*mesh->Np]/mesh->q[base];
boltzmannPlotVTUQuad3DV2.c:142:	dfloat dudz = rz*dudr + sz*duds + tz*mesh->q[base + 1*mesh->Np]/mesh->q[base];
boltzmannPlotVTUQuad3DV2.c:144:	dfloat dvdx = rx*dvdr + sx*dvds + tx*mesh->q[base + 2*mesh->Np]/mesh->q[base];
boltzmannPlotVTUQuad3DV2.c:145:	dfloat dvdy = ry*dvdr + sy*dvds + ty*mesh->q[base + 2*mesh->Np]/mesh->q[base];
boltzmannPlotVTUQuad3DV2.c:146:	dfloat dvdz = rz*dvdr + sz*dvds + tz*mesh->q[base + 2*mesh->Np]/mesh->q[base];
boltzmannPlotVTUQuad3DV2.c:148:	dfloat dwdx = rx*dwdr + sx*dwds + tx*mesh->q[base + 3*mesh->Np]/mesh->q[base];
boltzmannPlotVTUQuad3DV2.c:149:	dfloat dwdy = ry*dwdr + sy*dwds + ty*mesh->q[base + 3*mesh->Np]/mesh->q[base];
boltzmannPlotVTUQuad3DV2.c:150:	dfloat dwdz = rz*dwdr + sz*dwds + tz*mesh->q[base + 3*mesh->Np]/mesh->q[base];
boltzmannPlotVTUQuad3DV2.c:152:	base = i + j*mesh->Nq;
boltzmannPlotVTUQuad3DV2.c:153:	vort[base+0*mesh->Np] = dwdy - dvdz;
boltzmannPlotVTUQuad3DV2.c:154:	vort[base+1*mesh->Np] = dudz - dwdx;
boltzmannPlotVTUQuad3DV2.c:155:	vort[base+2*mesh->Np] = dvdx - dudy;
boltzmannPlotVTUQuad3DV2.c:160:    for(iint n=0;n<mesh->plotNp;++n){
boltzmannPlotVTUQuad3DV2.c:163:      for(iint m=0;m<mesh->Np;++m){
boltzmannPlotVTUQuad3DV2.c:164:	int uid = m + 1*mesh->Np + mesh->Nfields*mesh->Np*e;
boltzmannPlotVTUQuad3DV2.c:165:	int vid = m + 2*mesh->Np + mesh->Nfields*mesh->Np*e;
boltzmannPlotVTUQuad3DV2.c:166:	int wid = m + 3*mesh->Np + mesh->Nfields*mesh->Np*e;
boltzmannPlotVTUQuad3DV2.c:168:        dfloat vort1m = vort[m+0*mesh->Np];
boltzmannPlotVTUQuad3DV2.c:169:	dfloat vort2m = vort[m+1*mesh->Np];
boltzmannPlotVTUQuad3DV2.c:170:	dfloat vort3m = vort[m+2*mesh->Np];
boltzmannPlotVTUQuad3DV2.c:172:        plotvort1n += mesh->plotInterp[n*mesh->Np+m]*vort1m;
boltzmannPlotVTUQuad3DV2.c:173:        plotvort2n += mesh->plotInterp[n*mesh->Np+m]*vort2m;
boltzmannPlotVTUQuad3DV2.c:174:	plotvort3n += mesh->plotInterp[n*mesh->Np+m]*vort3m;
boltzmannPlotVTUQuad3DV2.c:181:      for(iint m=0;m<mesh->Np;++m){
boltzmannPlotVTUQuad3DV2.c:182:	plotxn += mesh->plotInterp[n*mesh->Np+m]*mesh->x[m+e*mesh->Np];
boltzmannPlotVTUQuad3DV2.c:183:	plotyn += mesh->plotInterp[n*mesh->Np+m]*mesh->y[m+e*mesh->Np];
boltzmannPlotVTUQuad3DV2.c:184:	plotzn += mesh->plotInterp[n*mesh->Np+m]*mesh->z[m+e*mesh->Np];
boltzmannPlotVTUQuad3DV2.c:187:      plotVortRadial[n + mesh->plotNp*e] =
boltzmannPlotVTUQuad3DV2.c:198:  for(iint e=0;e<mesh->Nelements;++e){
boltzmannPlotVTUQuad3DV2.c:201:    for(iint n=0;n<mesh->plotNp;++n){
boltzmannPlotVTUQuad3DV2.c:203:      fprintf(fp, "%g\n", plotVortRadial[n+e*mesh->plotNp]);
boltzmannPlotVTUQuad3DV2.c:213:  // for(iint e=0;e<mesh->Nelements;++e){
boltzmannPlotVTUQuad3DV2.c:214:  //   for(iint n=0;n<mesh->plotNp;++n){
boltzmannPlotVTUQuad3DV2.c:216:  //     for(iint m=0;m<mesh->Np;++m){
boltzmannPlotVTUQuad3DV2.c:217:  //       dfloat wx = mesh->q[4 + mesh->Nfields*(m+e*mesh->Np)];
boltzmannPlotVTUQuad3DV2.c:218:  //       dfloat wy = mesh->q[5 + mesh->Nfields*(m+e*mesh->Np)];
boltzmannPlotVTUQuad3DV2.c:219:  //       dfloat wz = mesh->q[6 + mesh->Nfields*(m+e*mesh->Np)];
boltzmannPlotVTUQuad3DV2.c:221:  //       plotwxn += mesh->plotInterp[n*mesh->Np+m]*wx;
boltzmannPlotVTUQuad3DV2.c:222:  //       plotwyn += mesh->plotInterp[n*mesh->Np+m]*wy;
boltzmannPlotVTUQuad3DV2.c:223:  //       plotwzn += mesh->plotInterp[n*mesh->Np+m]*wz;
boltzmannPlotVTUQuad3DV2.c:239:  for(iint e=0;e<mesh->Nelements;++e){
boltzmannPlotVTUQuad3DV2.c:240:    for(iint n=0;n<mesh->plotNelements;++n){
boltzmannPlotVTUQuad3DV2.c:242:      for(int m=0;m<mesh->plotNverts;++m){
boltzmannPlotVTUQuad3DV2.c:243:  fprintf(fp, "%d ", e*mesh->plotNp + mesh->plotEToV[n*mesh->plotNverts+m]);
boltzmannPlotVTUQuad3DV2.c:253:  for(iint e=0;e<mesh->Nelements;++e){
boltzmannPlotVTUQuad3DV2.c:254:    for(iint n=0;n<mesh->plotNelements;++n){
boltzmannPlotVTUQuad3DV2.c:255:      cnt += mesh->plotNverts;
boltzmannPlotVTUQuad3DV2.c:263:  for(iint e=0;e<mesh->Nelements;++e){
boltzmannPlotVTUQuad3DV2.c:264:    for(iint n=0;n<mesh->plotNelements;++n){
Binary file boltzmannSetupQuad3D.o matches
boltzmannOccaSetupQuad3D.c:11:  mesh->device.setup(deviceConfig);
boltzmannOccaSetupQuad3D.c:13:  occa::initTimer(mesh->device);
boltzmannOccaSetupQuad3D.c:15:  dfloat *LIFTT = (dfloat*) calloc(mesh->Np*mesh->Nfaces*mesh->Nfp, sizeof(dfloat));
boltzmannOccaSetupQuad3D.c:16:  for(iint n=0;n<mesh->Np;++n){
boltzmannOccaSetupQuad3D.c:17:    for(iint m=0;m<mesh->Nfaces*mesh->Nfp;++m){
boltzmannOccaSetupQuad3D.c:18:      LIFTT[n+m*mesh->Np] = mesh->LIFT[n*mesh->Nfp*mesh->Nfaces+m];
boltzmannOccaSetupQuad3D.c:23:  mesh->o_q =
boltzmannOccaSetupQuad3D.c:24:    mesh->device.malloc(mesh->Np*(mesh->totalHaloPairs+mesh->Nelements)*mesh->Nfields*sizeof(dfloat), mesh->q);
boltzmannOccaSetupQuad3D.c:26:  mesh->o_rhsq =
boltzmannOccaSetupQuad3D.c:27:    mesh->device.malloc(mesh->Np*mesh->Nrhs*mesh->Nelements*mesh->Nfields*sizeof(dfloat), mesh->rhsq);
boltzmannOccaSetupQuad3D.c:28:  mesh->o_resq =
boltzmannOccaSetupQuad3D.c:29:    mesh->device.malloc(mesh->Np*mesh->Nelements*mesh->Nfields*sizeof(dfloat), mesh->resq);
boltzmannOccaSetupQuad3D.c:31:  mesh->o_D = mesh->device.malloc(mesh->Nq*mesh->Nq*sizeof(dfloat), mesh->D);
boltzmannOccaSetupQuad3D.c:33:  mesh->o_LIFT =
boltzmannOccaSetupQuad3D.c:34:    mesh->device.malloc(mesh->Np*mesh->Nfaces*mesh->Nfp*sizeof(dfloat),
boltzmannOccaSetupQuad3D.c:35:        mesh->LIFT);
boltzmannOccaSetupQuad3D.c:37:  mesh->o_LIFTT =
boltzmannOccaSetupQuad3D.c:38:    mesh->device.malloc(mesh->Np*mesh->Nfaces*mesh->Nfp*sizeof(dfloat),
boltzmannOccaSetupQuad3D.c:41:  mesh->o_vgeo =
boltzmannOccaSetupQuad3D.c:42:    mesh->device.malloc(mesh->Nelements*mesh->Nvgeo*mesh->Np*sizeof(dfloat),
boltzmannOccaSetupQuad3D.c:43:			mesh->vgeo);
boltzmannOccaSetupQuad3D.c:44:  mesh->o_sgeo =
boltzmannOccaSetupQuad3D.c:45:    mesh->device.malloc(mesh->Nelements*mesh->Nfaces*mesh->Nfp*mesh->Nsgeo*sizeof(dfloat),
boltzmannOccaSetupQuad3D.c:46:			mesh->sgeo);
boltzmannOccaSetupQuad3D.c:48:  mesh->o_vmapM =
boltzmannOccaSetupQuad3D.c:49:    mesh->device.malloc(mesh->Nelements*mesh->Nfp*mesh->Nfaces*sizeof(iint),
boltzmannOccaSetupQuad3D.c:50:        mesh->vmapM);
boltzmannOccaSetupQuad3D.c:52:  mesh->o_vmapP =
boltzmannOccaSetupQuad3D.c:53:    mesh->device.malloc(mesh->Nelements*mesh->Nfp*mesh->Nfaces*sizeof(iint),
boltzmannOccaSetupQuad3D.c:54:        mesh->vmapP);
boltzmannOccaSetupQuad3D.c:56:  mesh->o_EToB =
boltzmannOccaSetupQuad3D.c:57:    mesh->device.malloc(mesh->Nelements*mesh->Nfaces*sizeof(iint),
boltzmannOccaSetupQuad3D.c:58:        mesh->EToB);
boltzmannOccaSetupQuad3D.c:60:  mesh->o_x =
boltzmannOccaSetupQuad3D.c:61:    mesh->device.malloc(mesh->Nelements*mesh->Np*sizeof(dfloat),
boltzmannOccaSetupQuad3D.c:62:        mesh->x);
boltzmannOccaSetupQuad3D.c:64:  mesh->o_y =
boltzmannOccaSetupQuad3D.c:65:    mesh->device.malloc(mesh->Nelements*mesh->Np*sizeof(dfloat),
boltzmannOccaSetupQuad3D.c:66:        mesh->y);
boltzmannOccaSetupQuad3D.c:69:  mesh->o_z =
boltzmannOccaSetupQuad3D.c:70:    mesh->device.malloc(mesh->Nelements*mesh->Np*sizeof(dfloat),
boltzmannOccaSetupQuad3D.c:71:        mesh->z);
boltzmannOccaSetupQuad3D.c:73:  if(mesh->totalHaloPairs>0){
boltzmannOccaSetupQuad3D.c:75:    mesh->o_haloElementList =
boltzmannOccaSetupQuad3D.c:76:      mesh->device.malloc(mesh->totalHaloPairs*sizeof(iint), mesh->haloElementList);
boltzmannOccaSetupQuad3D.c:79:    mesh->o_haloBuffer =
boltzmannOccaSetupQuad3D.c:80:      mesh->device.malloc(mesh->totalHaloPairs*mesh->Np*mesh->Nfields*sizeof(dfloat));
boltzmannOccaSetupQuad3D.c:88:  mesh->stream0 = mesh->device.getStream();
boltzmannOccaSetupQuad3D.c:90:  mesh->stream1 = mesh->device.createStream();  // NBN: second stream
boltzmannOccaSetupQuad3D.c:92:  mesh->stream1 = mesh->stream0;                // NBN: stream1 == stream0
boltzmannOccaSetupQuad3D.c:94:  mesh->device.setStream(mesh->stream0);
boltzmannOccaSetupQuad3D.c:97:  kernelInfo.addDefine("p_Nfields", mesh->Nfields);
boltzmannOccaSetupQuad3D.c:98:  kernelInfo.addDefine("p_N", mesh->N);
boltzmannOccaSetupQuad3D.c:99:  kernelInfo.addDefine("p_Nq", mesh->N+1);
boltzmannOccaSetupQuad3D.c:100:  kernelInfo.addDefine("p_Np", mesh->Np);
boltzmannOccaSetupQuad3D.c:101:  kernelInfo.addDefine("p_Nfp", mesh->Nfp);
boltzmannOccaSetupQuad3D.c:102:  kernelInfo.addDefine("p_Nfaces", mesh->Nfaces);
boltzmannOccaSetupQuad3D.c:103:  kernelInfo.addDefine("p_NfacesNfp", mesh->Nfp*mesh->Nfaces);
boltzmannOccaSetupQuad3D.c:104:  kernelInfo.addDefine("p_Nvgeo", mesh->Nvgeo);
boltzmannOccaSetupQuad3D.c:105:  kernelInfo.addDefine("p_Nsgeo", mesh->Nsgeo);
boltzmannOccaSetupQuad3D.c:106:  kernelInfo.addDefine("p_Nggeo", mesh->Nggeo);
boltzmannOccaSetupQuad3D.c:116:  kernelInfo.addDefine("p_max_EL_nnz", mesh->max_EL_nnz); // for Bernstein Bezier lift
boltzmannOccaSetupQuad3D.c:119:  kernelInfo.addDefine("p_cubNp", mesh->cubNp);
boltzmannOccaSetupQuad3D.c:120:  kernelInfo.addDefine("p_intNfp", mesh->intNfp);
boltzmannOccaSetupQuad3D.c:121:  kernelInfo.addDefine("p_intNfpNfaces", mesh->intNfp*mesh->Nfaces);
boltzmannOccaSetupQuad3D.c:143:  if(mesh->device.mode()=="CUDA"){ // add backend compiler optimization for CUDA
boltzmannRunQuad3D.c:9:  iint haloBytes = mesh->totalHaloPairs*mesh->Np*mesh->Nfields*sizeof(dfloat);
boltzmannRunQuad3D.c:16:  occa::initTimer(mesh->device);
boltzmannRunQuad3D.c:19:  for(iint tstep=0;tstep<mesh->NtimeSteps;++tstep){
boltzmannRunQuad3D.c:21:    for(iint rk=0;rk<mesh->Nrk;++rk){
boltzmannRunQuad3D.c:26:      dfloat t = tstep*mesh->dt + mesh->dt*mesh->rkc[rk];
boltzmannRunQuad3D.c:28:      if(mesh->totalHaloPairs>0){
boltzmannRunQuad3D.c:30:	iint Nentries = mesh->Np*mesh->Nfields;
boltzmannRunQuad3D.c:32:	mesh->haloExtractKernel(mesh->totalHaloPairs,
boltzmannRunQuad3D.c:34:				mesh->o_haloElementList,
boltzmannRunQuad3D.c:35:				mesh->o_q,
boltzmannRunQuad3D.c:36:				mesh->o_haloBuffer);
boltzmannRunQuad3D.c:39:	mesh->o_haloBuffer.copyTo(sendBuffer);      
boltzmannRunQuad3D.c:43:			      mesh->Np*mesh->Nfields*sizeof(dfloat),
boltzmannRunQuad3D.c:50:      mesh->volumeKernel(mesh->Nelements,
boltzmannRunQuad3D.c:51:			 mesh->o_vgeo,
boltzmannRunQuad3D.c:52:			 mesh->o_D,
boltzmannRunQuad3D.c:53:			 mesh->o_x,
boltzmannRunQuad3D.c:54:			 mesh->o_y,
boltzmannRunQuad3D.c:55:			 mesh->o_z,
boltzmannRunQuad3D.c:56:			 mesh->o_q,
boltzmannRunQuad3D.c:57:			 mesh->o_rhsq);
boltzmannRunQuad3D.c:59:      if(mesh->totalHaloPairs>0){
boltzmannRunQuad3D.c:64:	size_t offset = mesh->Np*mesh->Nfields*mesh->Nelements*sizeof(dfloat); // offset for halo data
boltzmannRunQuad3D.c:65:	mesh->o_q.copyFrom(recvBuffer, haloBytes, offset);
boltzmannRunQuad3D.c:68:      mesh->device.finish();
boltzmannRunQuad3D.c:73:      mesh->surfaceKernel(mesh->Nelements,
boltzmannRunQuad3D.c:74:			  mesh->o_sgeo,
boltzmannRunQuad3D.c:75:			  mesh->o_LIFTT,
boltzmannRunQuad3D.c:76:			  mesh->o_vmapM,
boltzmannRunQuad3D.c:77:			  mesh->o_vmapP,
boltzmannRunQuad3D.c:79:			  mesh->o_x,
boltzmannRunQuad3D.c:80:			  mesh->o_y,
boltzmannRunQuad3D.c:81:			  mesh->o_z,
boltzmannRunQuad3D.c:82:			  mesh->o_q,
boltzmannRunQuad3D.c:83:			  mesh->o_rhsq);
boltzmannRunQuad3D.c:86:      mesh->device.finish();
boltzmannRunQuad3D.c:89:      dfloat tupdate = tstep*mesh->dt + mesh->dt*mesh->rkc[rk+1];
boltzmannRunQuad3D.c:91:      mesh->device.finish();
boltzmannRunQuad3D.c:94:      mesh->updateKernel(mesh->Nelements,
boltzmannRunQuad3D.c:95:			 mesh->dt,
boltzmannRunQuad3D.c:96:			 mesh->rka[rk],
boltzmannRunQuad3D.c:97:			 mesh->rkb[rk],
boltzmannRunQuad3D.c:98:			 mesh->o_rhsq,
boltzmannRunQuad3D.c:99:			 mesh->o_resq,
boltzmannRunQuad3D.c:100:			 mesh->o_q);
boltzmannRunQuad3D.c:102:      mesh->device.finish();
boltzmannRunQuad3D.c:107:    if((tstep%mesh->errorStep)==0){
boltzmannRunQuad3D.c:108:      dfloat t = (tstep+1)*mesh->dt;
boltzmannRunQuad3D.c:113:      mesh->o_q.copyTo(mesh->q);
boltzmannRunQuad3D.c:116:      for(int n=0;n<mesh->Nfields*mesh->Nelements*mesh->Np;++n){
boltzmannRunQuad3D.c:117:	if(isnan(mesh->q[n])){
boltzmannRunQuad3D.c:125:      //      boltzmannErrorQuad2D(mesh, mesh->dt*(tstep+1));
boltzmannRunQuad3D.c:128:      //      boltzmannComputeVorticityQuad2D(mesh, mesh->q, 0, mesh->Nfields);
boltzmannRunQuad3D.c:133:      //      sprintf(fname, "foo_T%04d.vtu", tstep/mesh->errorStep);
boltzmannRunQuad3D.c:135:      //      sprintf(fname, "foo_T%04d", tstep/mesh->errorStep);
boltzmannRunQuad3D.c:136:      boltzmannPlotVTUQuad3DV2(mesh, "foo", tstep/mesh->errorStep);
