/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


@kernel void acousticsMRABUpdate3D(const int Nelements,
           @restrict const  int   *  elementIds,
           const dfloat dt,
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           const dfloat t,
           @restrict const  dfloat *  x,
           @restrict const  dfloat *  y,
           @restrict const  dfloat *  z,
           @restrict const  dfloat *  invVB2D,
           @restrict const  int   *  EToB,
           @restrict const  int   *  vmapM,
           @restrict const  dfloat *  rhsq,
           @restrict dfloat *  q,
           @restrict dfloat *  fQM,
           @restrict dfloat *  fQP,
           const int   rhsShift){

  for(int et=0;et<Nelements;++et;@outer(0)){  // for all elements
    @shared dfloat s_q[p_Np*p_Nfields];
    @shared dfloat s_sourceu[p_Nfp*p_Nfaces];
    @shared dfloat s_sourcev[p_Nfp*p_Nfaces];
    @shared dfloat s_sourcew[p_Nfp*p_Nfaces];
    @shared dfloat s_sourcep[p_Nfp*p_Nfaces];

    for(int n=0; n < p_maxNodes; ++n; @inner(0)){
      if (n < p_Np){
        const int e = elementIds[et];
        const int id = p_Nfields*(e*p_Np + n);

        const int rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
        const int rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
        const int rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;

        for (int fld = 0; fld < p_Nfields; ++fld)
          s_q[p_Nfields*n+fld] = q[id+fld] + dt*(a1*rhsq[rhsId1+fld] + a2*rhsq[rhsId2+fld] + a3*rhsq[rhsId3+fld]);
      }
    }
    @barrier("local");

    for(int n=0; n < p_maxNodes; ++n; @inner(0)){
      const int e = elementIds[et];

      //write update
      if (n < p_Np){
        const int id = p_Nfields*(e*p_Np + n);

        for (int fld = 0; fld < p_Nfields; ++fld)
          q[id+fld] = s_q[p_Nfields*n+fld];
      }

      //compute source injection if present
      if (n < p_Nfp*p_Nfaces){
        const int f  = n/p_Nfp; //face number

        int bc = EToB[e*p_Nfaces+f];
        if ((bc==-10)||(bc==-11)) { //check if this is a special source injection face
          const int id = n + e*p_Nfaces*p_Nfp;
          const int idM = vmapM[id];

          //get the nodal values of the incident field along the trace
          const dfloat X = x[idM];
          const dfloat Y = y[idM];
          const dfloat Z = z[idM];

          const dfloat c = sqrt(p_sourceC2);

          dfloat u,v,w,p;

          acousticsPointSource3D((X-p_sourceX0), (Y-p_sourceY0), (Z-p_sourceZ0), (t+p_sourceT0), p_sourceFreq, c, u, v, w, p);

          s_sourceu[n] = u;
          s_sourcev[n] = v;
          s_sourcew[n] = w;
          s_sourcep[n] = p;
        }
      }
    }
    @barrier("local");

    for(int n=0; n < p_maxNodes; ++n; @inner(0)){
      if (n < p_Nfp*p_Nfaces){
        const int e = elementIds[et];
        const int f  = n/p_Nfp; //face number
        const int id  = n%p_Nfp; //local node number

        dfloat sourceu = 0.f;
        dfloat sourcev = 0.f;
        dfloat sourcew = 0.f;
        dfloat sourcep = 0.f;

        dfloat s = 0.f;

        int bc = EToB[e*p_Nfaces+f];
        if ((bc==-10)||(bc==-11)) { //check if this is a special source injection face
          if (bc==-10) s= 1.f;
          if (bc==-11) s=-1.f;

          #pragma unroll p_Nfp
          for (int m=0;m<p_Nfp;m++) {
            sourceu += invVB2D[id + p_Nfp*m]*s_sourceu[f*p_Nfp+m];
            sourcev += invVB2D[id + p_Nfp*m]*s_sourcev[f*p_Nfp+m];
            sourcew += invVB2D[id + p_Nfp*m]*s_sourcew[f*p_Nfp+m];
            sourcep += invVB2D[id + p_Nfp*m]*s_sourcep[f*p_Nfp+m];
          }
        }

        const int iid = e*p_Nfp*p_Nfaces + n;
        const int qidM = p_Nfields*(vmapM[iid]-e*p_Np);
        const int qid  = p_Nfields*iid;

        fQP[qid+0] = s_q[qidM+0] + s*sourceu;
        fQP[qid+1] = s_q[qidM+1] + s*sourcev;
        fQP[qid+2] = s_q[qidM+2] + s*sourcew;
        fQP[qid+3] = s_q[qidM+3] + s*sourcep;
        fQM[qid+0] = s_q[qidM+0];
        fQM[qid+1] = s_q[qidM+1];
        fQM[qid+2] = s_q[qidM+2];
        fQM[qid+3] = s_q[qidM+3];
      }
    }
  }
}

@kernel void acousticsMRABTraceUpdate3D(const int Nelements,
           @restrict const  int   *  elementIds,
           const dfloat dt,
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           const dfloat t,
           @restrict const  dfloat *  x,
           @restrict const  dfloat *  y,
           @restrict const  dfloat *  z,
           @restrict const  dfloat *  invVB2D,
           @restrict const  int   *  EToB,
           @restrict const  int   *  vmapM,
           @restrict const  dfloat *  rhsq,
           @restrict const  dfloat *  q,
           @restrict dfloat *  fQM,
           @restrict dfloat *  fQP,
           const int   rhsShift){

  for(int et=0;et<Nelements;++et;@outer(0)){  // for all elements
    @shared dfloat s_q[p_Np*p_Nfields];
    @shared dfloat s_sourceu[p_Nfp*p_Nfaces];
    @shared dfloat s_sourcev[p_Nfp*p_Nfaces];
    @shared dfloat s_sourcew[p_Nfp*p_Nfaces];
    @shared dfloat s_sourcep[p_Nfp*p_Nfaces];

    for(int n=0; n < p_maxNodes; ++n; @inner(0)){
      if (n < p_Np){
        const int e = elementIds[et];
        const int id = p_Nfields*(e*p_Np + n);

        const int rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
        const int rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
        const int rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;

        for (int fld = 0; fld < p_Nfields; ++fld)
          s_q[p_Nfields*n+fld] = q[id+fld] + dt*(a1*rhsq[rhsId1+fld] + a2*rhsq[rhsId2+fld] + a3*rhsq[rhsId3+fld]);
      }
    }
    @barrier("local");

    for(int n=0; n < p_maxNodes; ++n; @inner(0)){
      //compute source injection if present
      if (n < p_Nfp*p_Nfaces){
        const int e = elementIds[et];
        const int f  = n/p_Nfp; //face number

        int bc = EToB[e*p_Nfaces+f];
        if ((bc==-10)||(bc==-11)) { //check if this is a special source injection face
          const int id = n + e*p_Nfaces*p_Nfp;
          const int idM = vmapM[id];

          //get the nodal values of the incident field along the trace
          const dfloat X = x[idM];
          const dfloat Y = y[idM];
          const dfloat Z = z[idM];

          const dfloat c = sqrt(p_sourceC2);

          dfloat u,v,w,p;

          acousticsPointSource3D((X-p_sourceX0), (Y-p_sourceY0), (Z-p_sourceZ0), (t+p_sourceT0), p_sourceFreq, c, u, v, w, p);

          s_sourceu[n] = u;
          s_sourcev[n] = v;
          s_sourcew[n] = w;
          s_sourcep[n] = p;
        }
      }
    }
    @barrier("local");

    for(int n=0; n < p_maxNodes; ++n; @inner(0)){
      if (n < p_Nfp*p_Nfaces){
        const int e = elementIds[et];
        const int f  = n/p_Nfp; //face number
        const int id  = n%p_Nfp; //local node number

        dfloat sourceu = 0.f;
        dfloat sourcev = 0.f;
        dfloat sourcew = 0.f;
        dfloat sourcep = 0.f;

        dfloat s = 0.f;

        int bc = EToB[e*p_Nfaces+f];
        if ((bc==-10)||(bc==-11)) { //check if this is a special source injection face
          if (bc==-10) s= 1.f;
          if (bc==-11) s=-1.f;

          #pragma unroll p_Nfp
          for (int m=0;m<p_Nfp;m++) {
            sourceu += invVB2D[id + p_Nfp*m]*s_sourceu[f*p_Nfp+m];
            sourcev += invVB2D[id + p_Nfp*m]*s_sourcev[f*p_Nfp+m];
            sourcew += invVB2D[id + p_Nfp*m]*s_sourcew[f*p_Nfp+m];
            sourcep += invVB2D[id + p_Nfp*m]*s_sourcep[f*p_Nfp+m];
          }
        }

        const int iid = e*p_Nfp*p_Nfaces + n;
        const int qidM = p_Nfields*(vmapM[iid]-e*p_Np);
        const int qid  = p_Nfields*iid;

        fQP[qid+0] = s_q[qidM+0] + s*sourceu;
        fQP[qid+1] = s_q[qidM+1] + s*sourcev;
        fQP[qid+2] = s_q[qidM+2] + s*sourcew;
        fQP[qid+3] = s_q[qidM+3] + s*sourcep;
        fQM[qid+0] = s_q[qidM+0];
        fQM[qid+1] = s_q[qidM+1];
        fQM[qid+2] = s_q[qidM+2];
        fQM[qid+3] = s_q[qidM+3];
      }
    }
  }
}

@kernel void acousticsMRABUpdate3D_wadg(const int Nelements,
           @restrict const  int   *  elementIds,
           const dfloat dt,
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           @restrict const  dfloat *  cubInterp,
           @restrict const  dfloat *  cubProject,
           @restrict const  dfloat *  c2,
           const dfloat t,
           @restrict const  dfloat *  x,
           @restrict const  dfloat *  y,
           @restrict const  dfloat *  z,
           @restrict const  dfloat *  invVB2D,
           @restrict const  int   *  EToB,
           @restrict const  int   *  vmapM,
           @restrict dfloat *  rhsq,
           @restrict dfloat *  q,
           @restrict dfloat *  fQM,
           @restrict dfloat *  fQP,
           const int   rhsShift){

  for(int et=0;et<Nelements;++et;@outer(0)){  // for all elements
    @shared dfloat s_q[p_Np*p_Nfields];
    @shared dfloat s_sourceu[p_Nfp*p_Nfaces];
    @shared dfloat s_sourcev[p_Nfp*p_Nfaces];
    @shared dfloat s_sourcew[p_Nfp*p_Nfaces];
    @shared dfloat s_sourcep[p_Nfp*p_Nfaces];

    @shared dfloat s_p[p_cubNp];
    @exclusive dfloat r_p;

    for(int n=0; n < p_maxCubNodes; ++n; @inner(0)){
      if (n < p_Np){
        const int e = elementIds[et];
        const int id = p_Nfields*(e*p_Np + n);
        const int rhsId = 3*id + rhsShift*p_Nfields;
        s_p[n] = rhsq[rhsId + 3]; // extract pressure rhs
      }

      // Initialize register variable
      r_p = 0.f;
    }
    @barrier("local");

    // Interpolate rhs to cubature nodes
    for(int n=0;n<p_maxCubNodes;++n;@inner(0)){
      if (n<p_cubNp) {
        const int e = elementIds[et];
        // Prefetch value of c2
        const dfloat c2n = c2[n + e*p_cubNp];

        dfloat val = 0.f;
        for (int i=0;i<p_Np;++i){
          val += cubInterp[n + i*p_cubNp] * s_p[i];
        }

        // Multiply result by wavespeed c2 at cubature node
        r_p = val * c2n;
      }
    }
    @barrier("local");

    // Move temporary result back to @shared memory
    for(int n=0;n<p_maxCubNodes;++n;@inner(0)){
      if (n<p_cubNp) {
        s_p[n] = r_p;
      }
    }
    @barrier("local");

    // Increment solution, project result back down
    for(int n=0;n<p_maxCubNodes;++n;@inner(0)){
      if (n < p_Np){
        const int e = elementIds[et];
        // Extract velocity rhs
        const int id = p_Nfields*(e*p_Np + n);
        const int rhsId = 3*id + rhsShift*p_Nfields;
        dfloat rhsqn[p_Nfields];
        rhsqn[0] = rhsq[rhsId + 0];
        rhsqn[1] = rhsq[rhsId + 1];
        rhsqn[2] = rhsq[rhsId + 2];

        // Project scaled rhs down
        dfloat rhsp = 0.f;
        for (int i=0;i<p_cubNp;++i){
          rhsp += cubProject[n + i*p_Np] * s_p[i];
        }
        rhsqn[3] = rhsp;

        const int rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
        const int rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
        const int rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;

        // Increment solutions (saving rhs)
        for (int fld = 0; fld < p_Nfields; ++fld) {
          s_q[p_Nfields*n+fld] = q[id+fld] + dt*(a1*rhsqn[fld] + a2*rhsq[rhsId2+fld] + a3*rhsq[rhsId3+fld]);
          rhsq[rhsId+fld] = rhsqn[fld];
        }
      }
    }
    @barrier("local");

    //write update
    for(int n=0; n < p_maxCubNodes; ++n; @inner(0)){
      if (n < p_Np){
        const int e = elementIds[et];
        const int id = p_Nfields*(e*p_Np + n);

        for (int fld = 0; fld < p_Nfields; ++fld)
          q[id+fld] = s_q[p_Nfields*n+fld];
      }

      //compute source injection if present
      if (n < p_Nfp*p_Nfaces){
        const int e = elementIds[et];
        const int f  = n/p_Nfp; //face number

        int bc = EToB[e*p_Nfaces+f];
        if ((bc==-10)||(bc==-11)) { //check if this is a special source injection face
          const int id = n + e*p_Nfaces*p_Nfp;
          const int idM = vmapM[id];

          //get the nodal values of the incident field along the trace
          const dfloat X = x[idM];
          const dfloat Y = y[idM];
          const dfloat Z = z[idM];

          const dfloat c = sqrt(p_sourceC2);

          dfloat u,v,w,p;

          acousticsPointSource3D((X-p_sourceX0), (Y-p_sourceY0), (Z-p_sourceZ0), (t+p_sourceT0), p_sourceFreq, c, u, v, w, p);

          s_sourceu[n] = u;
          s_sourcev[n] = v;
          s_sourcew[n] = w;
          s_sourcep[n] = p;
        }
      }
    }
    @barrier("local");

    for(int n=0; n < p_maxCubNodes; ++n; @inner(0)){
      if (n < p_Nfp*p_Nfaces){
        const int e = elementIds[et];
        const int f  = n/p_Nfp; //face number
        const int id  = n%p_Nfp; //local node number

        dfloat sourceu = 0.f;
        dfloat sourcev = 0.f;
        dfloat sourcew = 0.f;
        dfloat sourcep = 0.f;

        dfloat s = 0.f;

        int bc = EToB[e*p_Nfaces+f];
        if ((bc==-10)||(bc==-11)) { //check if this is a special source injection face
          if (bc==-10) s= 1.f;
          if (bc==-11) s=-1.f;

          #pragma unroll p_Nfp
          for (int m=0;m<p_Nfp;m++) {
            sourceu += invVB2D[id + p_Nfp*m]*s_sourceu[f*p_Nfp+m];
            sourcev += invVB2D[id + p_Nfp*m]*s_sourcev[f*p_Nfp+m];
            sourcew += invVB2D[id + p_Nfp*m]*s_sourcew[f*p_Nfp+m];
            sourcep += invVB2D[id + p_Nfp*m]*s_sourcep[f*p_Nfp+m];
          }
        }

        const int iid = e*p_Nfp*p_Nfaces + n;
        const int qidM = p_Nfields*(vmapM[iid]-e*p_Np);
        const int qid  = p_Nfields*iid;

        fQP[qid+0] = s_q[qidM+0] + s*sourceu;
        fQP[qid+1] = s_q[qidM+1] + s*sourcev;
        fQP[qid+2] = s_q[qidM+2] + s*sourcew;
        fQP[qid+3] = s_q[qidM+3] + s*sourcep;
        fQM[qid+0] = s_q[qidM+0];
        fQM[qid+1] = s_q[qidM+1];
        fQM[qid+2] = s_q[qidM+2];
        fQM[qid+3] = s_q[qidM+3];
      }
    }
  }
}

@kernel void acousticsMRABTraceUpdate3D_wadg(const int Nelements,
           @restrict const  int   *  elementIds,
           const dfloat dt,
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           @restrict const  dfloat *  cubInterp,
           @restrict const  dfloat *  cubProject,
           @restrict const  dfloat *  c2,
           const dfloat t,
           @restrict const  dfloat *  x,
           @restrict const  dfloat *  y,
           @restrict const  dfloat *  z,
           @restrict const  dfloat *  invVB2D,
           @restrict const  int   *  EToB,
           @restrict const  int   *  vmapM,
           @restrict const  dfloat *  rhsq,
           @restrict const  dfloat *  q,
           @restrict dfloat *  fQM,
           @restrict dfloat *  fQP,
           const int   rhsShift){

  for(int et=0;et<Nelements;++et;@outer(0)){  // for all elements
    @shared dfloat s_q[p_Np*p_Nfields];
    @shared dfloat s_sourceu[p_Nfp*p_Nfaces];
    @shared dfloat s_sourcev[p_Nfp*p_Nfaces];
    @shared dfloat s_sourcew[p_Nfp*p_Nfaces];
    @shared dfloat s_sourcep[p_Nfp*p_Nfaces];

    @shared dfloat s_p[p_cubNp];
    @exclusive dfloat r_p;

    for(int n=0; n < p_maxCubNodes; ++n; @inner(0)){
      if (n < p_Np){
        const int e = elementIds[et];
        const int id = p_Nfields*(e*p_Np + n);
        const int rhsId = 3*id + rhsShift*p_Nfields;
        s_p[n] = rhsq[rhsId + 3]; // extract pressure rhs
      }

      // Initialize register variable
      r_p = 0.f;
    }
    @barrier("local");

    // Interpolate rhs to cubature nodes
    for(int n=0;n<p_maxCubNodes;++n;@inner(0)){
      if (n<p_cubNp) {
        const int e = elementIds[et];
        // Prefetch value of c2
        const dfloat c2n = c2[n + e*p_cubNp];

        dfloat val = 0.f;
        for (int i=0;i<p_Np;++i){
          val += cubInterp[n + i*p_cubNp] * s_p[i];
        }

        // Multiply result by wavespeed c2 at cubature node
        r_p = val * c2n;
      }
    }
    @barrier("local");

    // Move temporary result back to @shared memory
    for(int n=0;n<p_maxCubNodes;++n;@inner(0)){
      if (n<p_cubNp) {
        s_p[n] = r_p;
      }
    }
    @barrier("local");

    // Increment solution, project result back down
    for(int n=0;n<p_maxCubNodes;++n;@inner(0)){
      if (n < p_Np){
        const int e = elementIds[et];
        // Extract velocity rhs
        const int id = p_Nfields*(e*p_Np + n);
        const int rhsId = 3*id + rhsShift*p_Nfields;
        dfloat rhsqn[p_Nfields];
        rhsqn[0] = rhsq[rhsId + 0];
        rhsqn[1] = rhsq[rhsId + 1];
        rhsqn[2] = rhsq[rhsId + 2];

        // Project scaled rhs down
        dfloat rhsp = 0.f;
        for (int i=0;i<p_cubNp;++i){
          rhsp += cubProject[n + i*p_Np] * s_p[i];
        }
        rhsqn[3] = rhsp;

        const int rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
        const int rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
        const int rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;

        // Increment solutions
        for (int fld = 0; fld < p_Nfields; ++fld)
          s_q[p_Nfields*n+fld] = q[id+fld] + dt*(a1*rhsqn[fld] + a2*rhsq[rhsId2+fld] + a3*rhsq[rhsId3+fld]);
      }
    }
    @barrier("local");

    for(int n=0; n < p_maxCubNodes; ++n; @inner(0)){
      //compute source injection if present
      if (n < p_Nfp*p_Nfaces){
        const int e = elementIds[et];
        const int f  = n/p_Nfp; //face number

        int bc = EToB[e*p_Nfaces+f];
        if ((bc==-10)||(bc==-11)) { //check if this is a special source injection face
          const int id = n + e*p_Nfaces*p_Nfp;
          const int idM = vmapM[id];

          //get the nodal values of the incident field along the trace
          const dfloat X = x[idM];
          const dfloat Y = y[idM];
          const dfloat Z = z[idM];

          const dfloat c = sqrt(p_sourceC2);

          dfloat u,v,w,p;

          acousticsPointSource3D((X-p_sourceX0), (Y-p_sourceY0), (Z-p_sourceZ0), (t+p_sourceT0), p_sourceFreq, c, u, v, w, p);

          s_sourceu[n] = u;
          s_sourcev[n] = v;
          s_sourcew[n] = w;
          s_sourcep[n] = p;
        }
      }
    }
    @barrier("local");

    for(int n=0; n < p_maxCubNodes; ++n; @inner(0)){
      if (n < p_Nfp*p_Nfaces){
        const int e = elementIds[et];
        const int f  = n/p_Nfp; //face number
        const int id  = n%p_Nfp; //local node number

        dfloat sourceu = 0.f;
        dfloat sourcev = 0.f;
        dfloat sourcew = 0.f;
        dfloat sourcep = 0.f;

        dfloat s = 0.f;

        int bc = EToB[e*p_Nfaces+f];
        if ((bc==-10)||(bc==-11)) { //check if this is a special source injection face
          if (bc==-10) s= 1.f;
          if (bc==-11) s=-1.f;

          #pragma unroll p_Nfp
          for (int m=0;m<p_Nfp;m++) {
            sourceu += invVB2D[id + p_Nfp*m]*s_sourceu[f*p_Nfp+m];
            sourcev += invVB2D[id + p_Nfp*m]*s_sourcev[f*p_Nfp+m];
            sourcew += invVB2D[id + p_Nfp*m]*s_sourcew[f*p_Nfp+m];
            sourcep += invVB2D[id + p_Nfp*m]*s_sourcep[f*p_Nfp+m];
          }
        }

        const int iid = e*p_Nfp*p_Nfaces + n;
        const int qidM = p_Nfields*(vmapM[iid]-e*p_Np);
        const int qid  = p_Nfields*iid;

        fQP[qid+0] = s_q[qidM+0] + s*sourceu;
        fQP[qid+1] = s_q[qidM+1] + s*sourcev;
        fQP[qid+2] = s_q[qidM+2] + s*sourcew;
        fQP[qid+3] = s_q[qidM+3] + s*sourcep;
        fQM[qid+0] = s_q[qidM+0];
        fQM[qid+1] = s_q[qidM+1];
        fQM[qid+2] = s_q[qidM+2];
        fQM[qid+3] = s_q[qidM+3];
      }
    }
  }
}
