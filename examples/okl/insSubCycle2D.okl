/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


@kernel void insSubCycleRKUpdate2D(const dlong Nelements,
                                  const dfloat dt,  
                                  const dfloat rka,
                                  const dfloat rkb,
                                  @restrict const  dfloat *  rhsU,
                                  @restrict const  dfloat *  rhsV,
                                  @restrict dfloat  *  resU,
                                  @restrict dfloat  *  resV,
                                  @restrict dfloat  *  U,
                                  @restrict dfloat  *  V){

  // Low storage Runge Kutta time step update
  for(dlong e=0;e<Nelements;++e;@outer(0)){
    for(int n=0;n<p_Np;++n;@inner(0)){

      const dlong id = n + e*p_Np;

      dfloat resu =  resU[id];
      dfloat resv =  resV[id];
      dfloat rhsu = -rhsU[id];// -Nu
      dfloat rhsv = -rhsV[id];// -Nu
      
      dfloat u = U[id];
      dfloat v = V[id];

      resu = rka*resu + dt*rhsu;
      resv = rka*resv + dt*rhsv;

      u += rkb*resu;
      v += rkb*resv;

      resU[id] = resu;
      resV[id] = resv;

      U[id] = u;
      V[id] = v;
    }
  }
}


@kernel void insSubCycleExt2D(const dlong Nelements,
                             const int index,
                             const dlong offset,
                             const dfloat c0,
                             const dfloat c1,
                             const dfloat c2, 
                             @restrict const  dfloat *  U,
                             @restrict const  dfloat *  V,
                             @restrict dfloat *  Ue,
                             @restrict dfloat *  Ve){

  // Low storage Runge Kutta time step update
  for(dlong e=0;e<Nelements;++e;@outer(0)){
    for(int n=0;n<p_Np;++n;@inner(0)){

      const int index0 = (index+0)%3;
      const int index1 = (index+2)%3; //back one step
      const int index2 = (index+1)%3; //back two steps

      const dlong id0   = n + p_Np*(e+index0*offset);
      const dlong id1   = n + p_Np*(e+index1*offset);
      const dlong id2   = n + p_Np*(e+index2*offset);

      //U 
      const dfloat Um0  = U[id0];
      const dfloat Um1  = U[id1];
      const dfloat Um2  = U[id2];

      const dfloat Vm0  = V[id0];
      const dfloat Vm1  = V[id1];
      const dfloat Vm2  = V[id2];
      
      const dlong id = n+e*p_Np;
      Ue[id] = c0*Um0 + c1*Um1 + c2*Um2;
      Ve[id] = c0*Vm0 + c1*Vm1 + c2*Vm2;
    }
  }
}
