/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/



#define p_isq12 (1.f/sqrt(12.f))
#define p_isq6 (1.f/sqrt(6.f))

void upwind1D(const dfloat nx, const dfloat ny,
              const dfloat q1M, const dfloat q2M, const dfloat q3M,
	      const dfloat q4M, const dfloat q5M, const dfloat q6M,
              const dfloat q1B, const dfloat q2B, const dfloat q3B,
	      const dfloat q4B, const dfloat q5B, const dfloat q6B,
              @restrict dfloat * @restrict q1P, dfloat * @restrict q2P, dfloat *  q3P,
	      @restrict dfloat * @restrict q4P, dfloat * @restrict q5P, dfloat *  q6P){
  
  *q1P = 0.5f*(q1B + q1M) - p_isq12*(nx*(q2B-q2M) + ny*(q3B-q3M));
  *q2P = 0.5f*(q2B + q2M) - p_isq12*(nx*(q1B-q1M)) - p_isq6*nx*(q5B-q5M) - 0.5f*ny*(q4B-q4M);
  *q3P = 0.5f*(q3B + q3M) - p_isq12*(ny*(q1B-q1M)) - p_isq6*ny*(q6B-q6M) - 0.5f*nx*(q4B-q4M);
  *q4P = 0.5f*(q4B + q4M) - 0.5f*nx*(q3B-q3M) - 0.5f*ny*(q2B-q2M);
  *q5P = 0.5f*(q5B + q5M) - p_isq6*nx*(q2B-q2M);
  *q6P = 0.5f*(q6B + q6M) - p_isq6*ny*(q3B-q3M);
  
}


void boundaryConditions2D(const int bc,
			  const dfloat  t, const dfloat  x, const dfloat  y,
			  const dfloat  nx, const dfloat  ny,
			  const dfloat ramp,
			  const dfloat  q1M, const dfloat  q2M, const dfloat  q3M,
			  const dfloat  q4M, const dfloat  q5M, const dfloat  q6M,
			  @restrict dfloat * @restrict q1B, dfloat * @restrict q2B, dfloat *  q3B,
			  @restrict dfloat * @restrict q4B, dfloat * @restrict q5B, dfloat *  q6B){

  if(bc==1){
    *q1B = q1M; 
    *q2B = -q2M;
    *q3B = -q3M;
    *q4B = q4M;
    *q5B = q5M;
    *q6B = q6M;
  }
  if(bc>1){ // wall for non-mean flow
    *q1B = 2.f*p_q1bar - q1M; 
    *q2B = 2.f*ramp*p_q2bar - q2M; 
    *q3B = 2.f*ramp*p_q3bar - q3M; 
    *q4B = 2.f*ramp*ramp*p_q4bar - q4M;
    *q5B = 2.f*ramp*ramp*p_q5bar - q5M;
    *q6B = 2.f*ramp*ramp*p_q6bar - q6M;
  }
}


@kernel void boltzmannNonPmlSurface2D(const int Nelements,
				     @restrict const  int *  elementIds,
				     @restrict const  dfloat *  sgeo,
				     @restrict const  dfloat *  LIFTT,
				     @restrict const  int   *  vmapM,
				     @restrict const  int   *  vmapP,
				     @restrict const  int   *  EToB,
				     const dfloat time,
				     @restrict const  dfloat *  x,
				     @restrict const  dfloat *  y,
				     const dfloat ramp,
				     @restrict const  dfloat4 *  q,
				     @restrict dfloat4       *  rhsq){
  
  // for all elements
  for(int eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){

    // @shared storage for flux terms
    @shared dfloat s_fluxq[p_NblockS][6][p_Nfp*p_Nfaces];
    @exclusive int element;

    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
	int e = eo + es;
	if(e<Nelements){

	  element = elementIds[e];

	  if(n<p_Nfp*p_Nfaces){
	    // find face that owns this node
	    int face = n/p_Nfp;
	  
	    // load surface geofactors for this face
	    int sid = p_Nsgeo*(element*p_Nfaces+face);
	    dfloat nx = sgeo[sid+0];
	    dfloat ny = sgeo[sid+1];
	    dfloat sJ = sgeo[sid+2];
	    dfloat invJ = sgeo[sid+3];

	    // indices of negative and positive traces of face node
	    int id  = element*p_Nfp*p_Nfaces + n;
	    int idM = vmapM[id];
	    int idP = vmapP[id];

	    if(idP<0) idP = idM;
	  
	    // load negative and positive trace node values of q
	    dfloat4 qMa = q[2*idM], qMb = q[2*idM+1];
	    dfloat4 qPa = q[2*idP], qPb = q[2*idP+1];
	    dfloat q1M = qMa.x, q2M = qMa.y, q3M = qMa.z, q4M = qMa.w, q5M = qMb.x, q6M = qMb.y;
	    dfloat q1P = qPa.x, q2P = qPa.y, q3P = qPa.z, q4P = qPa.w, q5P = qPb.x, q6P = qPb.y;
	    
	    // apply boundary condition
	    int bc = EToB[face+p_Nfaces*element];
	    if(bc>0)
	      boundaryConditions2D(bc, time, x[idM], y[idM], nx, ny, ramp,
				   q1M, q2M, q3M, q4M, q5M, q6M,
				   &q1P, &q2P, &q3P, &q4P, &q5P, &q6P);
	    
	    // compute (q^*)
	    dfloat q1U, q2U, q3U, q4U, q5U, q6U;		    
	    
	    upwind1D(nx, ny, q1M, q2M, q3M, q4M, q5M, q6M, q1P, q2P, q3P, q4P, q5P, q6P, &q1U, &q2U, &q3U, &q4U, &q5U, &q6U);

	      // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
	    const dfloat sc = invJ*sJ;

	    dfloat dq1, dq2, dq3, dq4, dq5, dq6;		    
	    dq1 = q1U-q1M;
	    dq2 = q2U-q2M;
	    dq3 = q3U-q3M;
	    dq4 = q4U-q4M;
	    dq5 = q5U-q5M;
	    dq6 = q6U-q6M;

	    // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
	    s_fluxq[es][0][n] = sc*p_sqrtRT*(-nx*dq2-ny*dq3);
	    s_fluxq[es][1][n] = sc*p_sqrtRT*(-nx*(dq1+p_sqrt2*dq5)-ny*dq4);
	    s_fluxq[es][2][n] = sc*p_sqrtRT*(-nx*dq4-ny*(dq1+p_sqrt2*dq6));
	    s_fluxq[es][3][n] = sc*p_sqrtRT*(-nx*dq3-ny*dq2);
	    s_fluxq[es][4][n] = sc*p_sqrtRT*(-nx*p_sqrt2*dq2);
	    s_fluxq[es][5][n] = sc*p_sqrtRT*(-ny*p_sqrt2*dq3);
	    
	  }
	}
      }
    }
    
    // wait for all @shared memory writes of the previous inner loop to complete
    @barrier("local");

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
	int e = eo + es;
	if(e<Nelements){
	  if(n<p_Np){
	    int id = p_Np*element + n;
	    
	    // load RHS
	    dfloat4 rhsqna = rhsq[2*id];
	    dfloat4 rhsqnb = rhsq[2*id+1];

	    // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
	    #pragma unroll p_NfacesNfp
	      for(int m=0;m<p_NfacesNfp;++m){
		dfloat L = LIFTT[n+m*p_Np];
		rhsqna.x += L*s_fluxq[es][0][m];
		rhsqna.y += L*s_fluxq[es][1][m];
		rhsqna.z += L*s_fluxq[es][2][m];
		rhsqna.w += L*s_fluxq[es][3][m];
		rhsqnb.x += L*s_fluxq[es][4][m];
		rhsqnb.y += L*s_fluxq[es][5][m];
	      }
	  
	    // store incremented rhs
	    rhsq[2*id] = rhsqna;
	    rhsq[2*id+1] = rhsqnb;
	  }
	}
      }
    }
  }
}


@kernel void boltzmannNonPmlSurface2Dbbdg(const int Nelements,
					 @restrict const  int   *  elementIds,
					 @restrict const  dfloat *  sgeo,
					 @restrict const  dfloat *  L0vals,
					 @restrict const  int   *  ELids,
					 @restrict const  dfloat *  ELvals,	 
					 @restrict const  int   *  vmapM,
					 @restrict const  int   *  vmapP,
					 @restrict const  int   *  EToB,
					 const dfloat time,
					 @restrict const  dfloat *  x,
					 @restrict const  dfloat *  y,
					 const dfloat ramp,
					 @restrict const  dfloat4 *  q,
					 @restrict dfloat4       *  rhsq){
  
  // for all elements
  for(int eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){

    // @shared storage for flux terms
    @shared dfloat s_fluxq[p_NblockS][6][p_Nfp*p_Nfaces];
    @shared dfloat s_fluxq_copy[p_NblockS][6][p_Nfp*p_Nfaces];    
    @exclusive int element;

    // for all face nodes of all elements 
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
	int e = eo + es;
	if(e<Nelements){

	  element = elementIds[e];

	  if(n<p_Nfp*p_Nfaces){
	    // find face that owns this node
	    int face = n/p_Nfp;
	  
	    // load surface geofactors for this face
	    int sid = p_Nsgeo*(element*p_Nfaces+face);
	    dfloat nx = sgeo[sid+0];
	    dfloat ny = sgeo[sid+1];
	    dfloat sJ = sgeo[sid+2];
	    dfloat invJ = sgeo[sid+3];

	    // indices of negative and positive traces of face node
	    int id  = element*p_Nfp*p_Nfaces + n;
	    int idM = vmapM[id];
	    int idP = vmapP[id];

	    if(idP<0) idP = idM;
	  
	    // load negative and positive trace node values of q
	    dfloat4 qMa = q[2*idM], qMb = q[2*idM+1];
	    dfloat4 qPa = q[2*idP], qPb = q[2*idP+1];
	    dfloat q1M = qMa.x, q2M = qMa.y, q3M = qMa.z, q4M = qMa.w, q5M = qMb.x, q6M = qMb.y;
	    dfloat q1P = qPa.x, q2P = qPa.y, q3P = qPa.z, q4P = qPa.w, q5P = qPb.x, q6P = qPb.y;
	    
	    // apply boundary condition
	    int bc = EToB[face+p_Nfaces*element];
	    if(bc>0)
	      boundaryConditions2D(bc, time, x[idM], y[idM], nx, ny, ramp,
				   q1M, q2M, q3M, q4M, q5M, q6M,
				   &q1P, &q2P, &q3P, &q4P, &q5P, &q6P);
	    
	    // compute (q^*)
	    dfloat q1U, q2U, q3U, q4U, q5U, q6U;		    
	    
	    upwind1D(nx, ny, q1M, q2M, q3M, q4M, q5M, q6M, q1P, q2P, q3P, q4P, q5P, q6P, &q1U, &q2U, &q3U, &q4U, &q5U, &q6U);

	      // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
	    const dfloat sc = invJ*sJ;

	    dfloat dq1, dq2, dq3, dq4, dq5, dq6;		    
	    dq1 = q1U-q1M;
	    dq2 = q2U-q2M;
	    dq3 = q3U-q3M;
	    dq4 = q4U-q4M;
	    dq5 = q5U-q5M;
	    dq6 = q6U-q6M;

	    // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
	    s_fluxq[es][0][n] = sc*p_sqrtRT*(-nx*dq2-ny*dq3);
	    s_fluxq[es][1][n] = sc*p_sqrtRT*(-nx*(dq1+p_sqrt2*dq5)-ny*dq4);
	    s_fluxq[es][2][n] = sc*p_sqrtRT*(-nx*dq4-ny*(dq1+p_sqrt2*dq6));
	    s_fluxq[es][3][n] = sc*p_sqrtRT*(-nx*dq3-ny*dq2);
	    s_fluxq[es][4][n] = sc*p_sqrtRT*(-nx*p_sqrt2*dq2);
	    s_fluxq[es][5][n] = sc*p_sqrtRT*(-ny*p_sqrt2*dq3);
	    
	  }
	}
      }
    }
    
    // wait for all @shared memory writes of the previous inner loop to complete
    @barrier("local");
#if 1
    // apply L0 to fluxes. use fact that L0 = tridiagonal in 2D
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
	int e = eo + es;
	if(e<Nelements){
	  if(n<p_Nfp*p_Nfaces){

	    const int fid = n % p_Nfaces;  // warning: redundant reads
	    const dfloat L0val = L0vals[fid + p_Nfp]; 

	    dfloat tmpflux;
	    for (int fld = 0; fld < 6; ++fld){
	      tmpflux = L0val * s_fluxq[es][fld][n];
	      if (fid > 0){		
		tmpflux += L0vals[fid]*s_fluxq[es][fld][n-1]; // add previous term
	      }
	      if (fid < p_Nfp){
		tmpflux += L0vals[fid + 2*p_Nfp]*s_fluxq[es][fld][n+1];// add next term
	      }
	      s_fluxq_copy[es][fld][n] = tmpflux;
	    }

	  }
	}
      }
    }
#endif
    @barrier("local");

    // apply lift reduction and accumulate RHS
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
	int e = eo + es;
	if(e<Nelements){
	  if(n<p_Np){
	    int id = p_Np*element + n;
	    
	    // load RHS
	    dfloat4 rhsqna = rhsq[2*id];
	    dfloat4 rhsqnb = rhsq[2*id+1];

	    // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
	    #pragma unroll p_NfacesNfp
	      for (int m = 0; m < p_max_EL_nnz; ++m){
		const int id = n + m*p_Np;
		const dfloat ELval = ELvals[id];
		const int ELid = ELids[id];
		rhsqna.x += ELval * s_fluxq_copy[es][0][ELid];
		rhsqna.y += ELval * s_fluxq_copy[es][1][ELid];
		rhsqna.z += ELval * s_fluxq_copy[es][2][ELid];
		rhsqna.w += ELval * s_fluxq_copy[es][3][ELid];
		rhsqnb.x += ELval * s_fluxq_copy[es][4][ELid];
		rhsqnb.y += ELval * s_fluxq_copy[es][5][ELid];		
	      }
	    
	    // store incremented rhs
	    rhsq[2*id] = rhsqna;
	    rhsq[2*id+1] = rhsqnb;
	  }
	}
      }
    }
  }
}
