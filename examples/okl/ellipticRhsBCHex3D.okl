
#define surfaceTerms(sk, m, i, j)                                       \
  {                                                                     \
    const dlong  idM = vmapM[sk];                                       \
                                                                        \
    const dfloat nx  = sgeo[sk*p_Nsgeo+p_NXID];                         \
    const dfloat ny  = sgeo[sk*p_Nsgeo+p_NYID];                         \
    const dfloat nz  = sgeo[sk*p_Nsgeo+p_NZID];                         \
    const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];                        \
                                                                        \
    dfloat dudxP=0, dudyP=0, dudzP=0, uP=0;                             \
                                                                        \
    const int bc = mapB[idM];                                           \
    if(bc>0) {                                                          \
      ellipticBoundaryConditions3D(bc, t, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f, 0.f, 0.f, uP, dudxP, dudyP, dudzP);  \
    }                                                                   \
                                                                        \
    s_q  [m][j][i]  = uP;                                               \
    s_ndq[m][j][i] -= WsJ*(nx*dudxP + ny*dudyP + nz*dudzP);             \
  }

@kernel void ellipticRhsBCHex3D(const dlong Nelements,
                              @restrict const  dfloat *  ggeo,
                              @restrict const  dfloat *  sgeo,
                              @restrict const  dfloat *  D,
                              @restrict const  dlong   *  vmapM,
                              const dfloat lambda,
                              const dfloat t,
                              @restrict const  dfloat *  x,
                              @restrict const  dfloat *  y,
                              @restrict const  dfloat *  z,
                              @restrict const  int    *  mapB,
                              @restrict dfloat  *  rhs){

  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_q[2][p_Nq][p_Nq];
    @shared dfloat s_ndq[2][p_Nq][p_Nq];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_rhs[p_Nq];// array for results Au(i,j,0:N)

    dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;

    // for all face nodes of all elements
    // face 0 & 5
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq*j+i]; // D is column major

        #pragma unroll p_Nq
        for(int k=0;k<p_Nq;++k){
          r_q[k] = 0.;
          r_rhs[k] = 0.;
        }

        const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i + j*p_Nq;
        const dlong sk5 = e*p_Nfp*p_Nfaces + 5*p_Nfp + i + j*p_Nq;

        surfaceTerms(sk0,0,0,i,j);
        surfaceTerms(sk5,5,1,i,j);
      }
    }

    @barrier("local");

    // face 0 & 5
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //face 0
        r_q[0] += s_q[0][j][i];
        r_rhs[0] += s_ndq[0][j][i];

        //face 5
        r_q[p_Nq-1] += s_q[1][j][i];
        r_rhs[p_Nq-1] += s_ndq[1][j][i];
      }
    }

    @barrier("local");    

    // face 1 & 3
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + i + k*p_Nq;
        const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + i + k*p_Nq;

        surfaceTerms(sk1,1,0,i,k);
        surfaceTerms(sk3,3,1,i,k);
      }
    }

    @barrier("local");

    // face 1 & 3
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (j==0) {//face 1
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_q[k] += s_q[0][k][i];
            r_rhs[k] += s_ndq[0][k][i];
          }
        }
        if (j==p_Nq-1) {//face 3
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_q[k] += s_q[1][k][i];
            r_rhs[k] += s_ndq[1][k][i];
          }
        }
      }
    }

    @barrier("local");    

    // face 2 & 4
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){
        const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + j + k*p_Nq;
        const dlong sk4 = e*p_Nfp*p_Nfaces + 4*p_Nfp + j + k*p_Nq;

        surfaceTerms(sk2,2,0,j,k);
        surfaceTerms(sk4,4,1,j,k);
      }
    }

    @barrier("local");

    // face 2 & 4
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (i==p_Nq-1) {//face 2
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_q[k] += s_q[0][k][j];
            r_rhs[k] += s_ndq[0][k][j];
          }
        }
        if (i==0) {//face 4
          #pragma unroll p_Nq
          for (int k=0;k<p_Nq;k++) {
            r_q[k] += s_q[1][k][j];
            r_rhs[k] += s_ndq[1][k][j];
          }
        }
      }
    }

    @barrier("local"); 


    // Layer by layer
    #pragma unroll p_Nq
      for(int k = 0;k < p_Nq; k++){
        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

            // prefetch geometric factors
            const dlong gbase = e*p_Nggeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

            r_G00 = ggeo[gbase+p_G00ID*p_Np];
            r_G01 = ggeo[gbase+p_G01ID*p_Np];
            r_G02 = ggeo[gbase+p_G02ID*p_Np];

            r_G11 = ggeo[gbase+p_G11ID*p_Np];
            r_G12 = ggeo[gbase+p_G12ID*p_Np];
            r_G22 = ggeo[gbase+p_G22ID*p_Np];

            r_GwJ = ggeo[gbase+p_GWJID*p_Np];
          }
        }

        @barrier("local");

        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

            // share u(:,:,k)
            s_q[0][j][i] = r_q[k];

            r_qt = 0;

            #pragma unroll p_Nq
              for(int m = 0; m < p_Nq; m++) {
                r_qt += s_D[k][m]*r_q[m];
              }
          }
        }

        @barrier("local");

        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

            dfloat qr = 0.f;
            dfloat qs = 0.f;

            #pragma unroll p_Nq
              for(int m = 0; m < p_Nq; m++) {
                qr += s_D[i][m]*s_q[0][j][m];
                qs += s_D[j][m]*s_q[0][m][i];
              }

            //reuse the s_ndq array
            s_ndq[0][j][i] = (r_G01*qr + r_G11*qs + r_G12*r_qt);
            s_ndq[1][j][i] = (r_G00*qr + r_G01*qs + r_G02*r_qt);

            // put this here for a performance bump
            r_Gqt = (r_G02*qr + r_G12*qs + r_G22*r_qt);
            r_Auk = r_GwJ*lambda*r_q[k];
          }
        }

        @barrier("local");

        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

            #pragma unroll p_Nq
              for(int m = 0; m < p_Nq; m++){
                r_Auk    += s_D[m][j]*s_ndq[0][m][i];
                r_rhs[m] += s_D[k][m]*r_Gqt; // DT(m,k)*ut(i,j,k,e)
                r_Auk    += s_D[m][i]*s_ndq[1][j][m];
              }

            r_rhs[k] += r_Auk;
          }
        }
      }

    // write out

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        #pragma unroll p_Nq
          for(int k = 0; k < p_Nq; k++){
            const dlong id = e*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
            rhs[id] -= r_rhs[k];
          }
      }
    }
  }
}

#if 0
#define surfaceTerms(sk, i, j, k)                                       \
  {                                                                     \
    const dlong  idM = vmapM[sk];                                       \
                                                                        \
    const dfloat nx  = sgeo[sk*p_Nsgeo+p_NXID];                         \
    const dfloat ny  = sgeo[sk*p_Nsgeo+p_NYID];                         \
    const dfloat nz  = sgeo[sk*p_Nsgeo+p_NZID];                         \
    const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];                        \
                                                                        \
    dfloat dudxP=0, dudyP=0, dudzP=0, uP=0;                             \
                                                                        \
    const int bc = mapB[idM];                                           \
    if(bc>0) {                                                          \
      ellipticBoundaryConditions3D(bc, t, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f, 0.f, 0.f, uP, dudxP, dudyP, dudzP);  \
    }                                                                   \
                                                                        \
    s_q  [k][j][i] = uP;                                                \
    s_ndq[k][j][i] -= WsJ*(nx*dudxP + ny*dudyP + nz*dudzP);             \
  }

@kernel void ellipticRhsBCHex3D(const dlong Nelements,
                              @restrict const  dfloat *  ggeo,
                              @restrict const  dfloat *  sgeo,
                              @restrict const  dfloat *  D,
                              @restrict const  dlong   *  vmapM,
                              const dfloat lambda,
                              const dfloat t,
                              @restrict const  dfloat *  x,
                              @restrict const  dfloat *  y,
                              @restrict const  dfloat *  z,
                              @restrict const  int    *  mapB,
                              @restrict dfloat  *  rhs){
  
  for(dlong e=0;e<Nelements;e++;@outer(0)){
    @shared dfloat s_q[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_ndq[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_D[p_Nq][p_Nq];

    @exclusive dfloat r_qr[p_Nq], r_qs[p_Nq], r_qt[p_Nq], r_Aq[p_Nq];
    @exclusive dfloat r_G00[p_Nq], r_G01[p_Nq], r_G02[p_Nq], r_G11[p_Nq], r_G12[p_Nq], r_G22[p_Nq], r_GwJ[p_Nq];

    // loop over slabs
    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          s_q[k][j][i] = 0.;
          s_ndq[k][j][i] = 0.;

          if(k==0)
            s_D[j][i] = D[j*p_Nq+i];
        }
      }
    }

    @barrier("local");

    // face 0 & 5
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + j*p_Nq + i;
        const dlong sk5 = e*p_Nfp*p_Nfaces + 5*p_Nfp + j*p_Nq + i;

        surfaceTerms(sk0,i,j,     0);
        surfaceTerms(sk5,i,j,p_Nq-1); 
      }
    }
  
    @barrier("local");

    // face 1 & 3
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + k*p_Nq + i;
        const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + k*p_Nq + i;

        surfaceTerms(sk1,i,     0,k);
        surfaceTerms(sk3,i,p_Nq-1,k); 
      }
    }

    @barrier("local");

    // face 2 & 4
    for(int k=0;k<p_Nq;++k;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){
        const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + k*p_Nq + j;
        const dlong sk4 = e*p_Nfp*p_Nfaces + 4*p_Nfp + k*p_Nq + j;
        
        surfaceTerms(sk2,p_Nq-1,j,k);
        surfaceTerms(sk4,     0,j,k); 
      }
    }

    @barrier("local");
    
    // loop over slabs
    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong base = e*p_Nggeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

          // assumes w*J built into G entries
          r_GwJ[k] = ggeo[base+p_GWJID*p_Np];

          r_G00[k] = ggeo[base+p_G00ID*p_Np];
          r_G01[k] = ggeo[base+p_G01ID*p_Np];
          r_G02[k] = ggeo[base+p_G02ID*p_Np];

          r_G11[k] = ggeo[base+p_G11ID*p_Np];
          r_G12[k] = ggeo[base+p_G12ID*p_Np];
          r_G22[k] = ggeo[base+p_G22ID*p_Np];

          dfloat qr = 0.f, qs = 0.f, qt = 0.f;

          for(int n=0; n<p_Nq; ++n) {
            qr += s_D[i][n]*s_q[k][j][n];
            qs += s_D[j][n]*s_q[k][n][i];
            qt += s_D[k][n]*s_q[n][j][i];
          }

          r_qr[k] = qr; r_qs[k] = qs; r_qt[k] = qt;

          r_Aq[k] = r_GwJ[k]*lambda*s_q[k][j][i];
        }
      }
    }

    // r term ----->
    @barrier("local");

    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          s_q[k][j][i] = r_G00[k]*r_qr[k] + r_G01[k]*r_qs[k] + r_G02[k]*r_qt[k];
        }
      }
    }

    @barrier("local");

    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          dfloat tmp = 0.f;
          for(int n=0; n<p_Nq; ++n)
            tmp += s_D[n][i]*s_q[k][j][n];

          r_Aq[k] += tmp;
        }
      }
    }

    // s term ---->
    @barrier("local");

    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          s_q[k][j][i] = r_G01[k]*r_qr[k] + r_G11[k]*r_qs[k] + r_G12[k]*r_qt[k];
        }
      }
    }

    @barrier("local");

    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          dfloat tmp = 0.f;
          for(int n=0; n<p_Nq; ++n)
            tmp += s_D[n][j]*s_q[k][n][i];

          r_Aq[k] += tmp;
        }
      }
    }

    // t term ---->
    @barrier("local");

    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          s_q[k][j][i] = r_G02[k]*r_qr[k] + r_G12[k]*r_qs[k] + r_G22[k]*r_qt[k];
        }
      }
    }

    @barrier("local");

    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          dfloat tmp = 0.f;
          for(int n=0; n<p_Nq; ++n)
            tmp += s_D[n][k]*s_q[n][j][i];

          r_Aq[k] += tmp;

          const dlong base = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
          rhs[base] -= r_Aq[k] + s_ndq[k][i][j];
        }
      }
    }
  }
}
#endif