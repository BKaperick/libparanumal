/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

#define RXID 0  
#define RYID 1  
#define SXID 2  
#define SYID 3


@kernel void acousticsVolume2Dbbdg(const int Nelements,
          @restrict const  int *  Elements,
          @restrict const  dfloat *  vgeo,
          @restrict const  int *  D1ids,
          @restrict const  int *  D2ids,
          @restrict const  int *  D3ids,
          @restrict const  dfloat *  Dvals,    
          @restrict const  dfloat *  q,
          @restrict dfloat *  rhsq){
  
  for(int eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){  // for all elements

    @shared dfloat s_u[p_NblockV][p_Np];
    @shared dfloat s_v[p_NblockV][p_Np];
    @shared dfloat s_p[p_NblockV][p_Np];

    for(int es=0;es<p_NblockV;++es;@inner(1)){// for all elements in block
      for(int n=0;n<p_Np;++n;@inner(0)){     // for all nodes in this element

        int et = eo+es; // element in block

        if(et<Nelements){
          const int id = p_Nfields*(Elements[et]*p_NpMax + n);
          s_u[es][n] = q[id+0];
          s_v[es][n] = q[id+1];
          s_p[es][n] = q[id+2];
        }
      }
    }

    // make sure all node data is loaded into @shared
    @barrier("local");

    for(int es=0;es<p_NblockV;++es;@inner(1)){// for all elements in block
      for(int n=0;n<p_Np;++n;@inner(0)){     // for all nodes in this element
  
        int et = eo+es; // element in block
        if(et<Nelements){
          const int e = Elements[et];

          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + RYID];
          const dfloat dsdx = vgeo[e*p_Nvgeo + SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + SYID];

          // compute 'r' and 's' derivatives of (q_m) at node n
          const int D1i1 = D1ids[n];
          const int D2i1 = D2ids[n];
          const int D3i1 = D3ids[n];
          const dfloat Dval1 = Dvals[n];
          
          const int D1i2 = D1ids[n+p_Np];
          const int D2i2 = D2ids[n+p_Np];
          const int D3i2 = D3ids[n+p_Np];
          const dfloat Dval2 = Dvals[n+p_Np];

          const int D1i3 = D1ids[n+2*p_Np];
          const int D2i3 = D2ids[n+2*p_Np];
          const int D3i3 = D3ids[n+2*p_Np];   
          const dfloat Dval3 = Dvals[n+2*p_Np];

          const dfloat dudr = .5f*(Dval1*(s_u[es][D2i1] - s_u[es][D1i1]) +
                  Dval2*(s_u[es][D2i2] - s_u[es][D1i2]) +
                  Dval3*(s_u[es][D2i3] - s_u[es][D1i3]));
          const dfloat duds = .5f*(Dval1*(s_u[es][D3i1] - s_u[es][D1i1]) +
                  Dval2*(s_u[es][D3i2] - s_u[es][D1i2]) +
                  Dval3*(s_u[es][D3i3] - s_u[es][D1i3]));
          
          const dfloat dvdr = .5f*(Dval1*(s_v[es][D2i1] - s_v[es][D1i1]) +
                  Dval2*(s_v[es][D2i2] - s_v[es][D1i2]) +
                  Dval3*(s_v[es][D2i3] - s_v[es][D1i3]));
          const dfloat dvds = .5f*(Dval1*(s_v[es][D3i1] - s_v[es][D1i1]) +
                  Dval2*(s_v[es][D3i2] - s_v[es][D1i2]) +
                  Dval3*(s_v[es][D3i3] - s_v[es][D1i3]));
          
          const dfloat dpdr = .5f*(Dval1*(s_p[es][D2i1] - s_p[es][D1i1]) +
                  Dval2*(s_p[es][D2i2] - s_p[es][D1i2]) +
                  Dval3*(s_p[es][D2i3] - s_p[es][D1i3]));
          const dfloat dpds = .5f*(Dval1*(s_p[es][D3i1] - s_p[es][D1i1]) +
                  Dval2*(s_p[es][D3i2] - s_p[es][D1i2]) +
                  Dval3*(s_p[es][D3i3] - s_p[es][D1i3]));

          // chain rule
          dfloat dudx = drdx*dudr + dsdx*duds;
          dfloat dvdy = drdy*dvdr + dsdy*dvds;
          dfloat dpdx = drdx*dpdr + dsdx*dpds;
          dfloat dpdy = drdy*dpdr + dsdy*dpds;
          
          const int id = p_Nfields*(e*p_NpMax + n);
          rhsq[id+0] = -dpdx;
          rhsq[id+1] = -dpdy;
          rhsq[id+2] = -dudx-dvdy;
        }
      }
    }
  }
}
