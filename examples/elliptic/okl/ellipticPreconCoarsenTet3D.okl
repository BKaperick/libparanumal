

kernel void ellipticPreconCoarsenTet3D(const dlong Nelements,
                                  const dfloat * restrict R,
                                  const dfloat * restrict qN,
                                  dfloat * restrict q1){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;outer0){

    shared dfloat s_qN[p_NblockV][p_NpFine];

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_NpCoarse;++n;inner0){
        dlong t = n + es*p_NpCoarse;

        while(t<p_NpFine*p_NblockV){
          if(eo*p_NpFine + t< Nelements*p_NpFine)
            s_qN[0][t] = qN[eo*p_NpFine+t];
          t += p_NpCoarse*p_NblockV;
        }
      }
    }

    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_NpCoarse;++n;inner0){
        const dlong e = eo + es;
        if(e<Nelements){
          dfloat tmp = 0;
          occaUnroll(p_NpFine)
            for(int i=0;i<p_NpFine;++i){
              tmp += R[n*p_NpFine + i]*s_qN[es][i]; // bank conflict ?
            }
          q1[e*p_NpCoarse+n] = tmp; // *invDegree[e*p_NpCoarse+n];
        }
      }
    }
  }
}

