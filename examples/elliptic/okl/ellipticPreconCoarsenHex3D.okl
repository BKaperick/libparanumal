kernel void ellipticPreconCoarsenHex3D(const dlong Nelements,
                                        const dfloat * restrict R,
                                        const dfloat * restrict qf,
                                              dfloat * restrict qc){
  
  
  for(dlong e=0;e<Nelements;++e;outer0){
    shared dfloat s_qfff[p_NqFine][p_NqFine][p_NqFine];
    shared dfloat s_qcff[p_NqCoarse][p_NqFine][p_NqFine];
    shared dfloat s_qccf[p_NqCoarse][p_NqCoarse][p_NqFine];
    shared dfloat s_qccc[p_NqCoarse][p_NqCoarse][p_NqCoarse];

    shared dfloat s_R[p_NqCoarse][p_NqFine];

    // prefetch to shared
    
    for(int k=0;k<p_NqFine;++k;inner2){
      for(int j=0;j<p_NqFine;++j;inner1){
        for(int i=0;i<p_NqFine;++i;inner0){
          const dlong id = i+j*p_NqFine+k*p_NqFine*p_NqFine+e*p_NpFine;
          s_qfff[k][j][i] = qf[id];

          if ((k==0) && (j<p_NqCoarse))
            s_R[j][i] = R[j*p_NqFine + i];
        }
      }
    }

    barrier(localMemFence);

    // coarsen in k index
    for(int k=0;k<p_NqFine;++k;inner2){
      for(int j=0;j<p_NqFine;++j;inner1){
        for(int i=0;i<p_NqFine;++i;inner0){
          if(k<p_NqCoarse){
            dfloat res = 0;
            occaUnroll(p_NqFine)
              for(int m=0;m<p_NqFine;++m) {
                res += s_R[k][m]*s_qfff[m][j][i];
              }
            s_qcff[k][j][i] = res;
          }
        }
      }
    }

    barrier(localMemFence);

    // coarsen in j index
    for(int k=0;k<p_NqFine;++k;inner2){
      for(int j=0;j<p_NqFine;++j;inner1){
        for(int i=0;i<p_NqFine;++i;inner0){
          if((k<p_NqCoarse)&&(j<p_NqCoarse)){
            dfloat res = 0;
            occaUnroll(p_NqFine)
              for(int m=0;m<p_NqFine;++m) {
                res += s_R[j][m]*s_qcff[k][m][i];
              }
            s_qccf[k][j][i] = res;
          }
        }
      }
    }

    barrier(localMemFence);

    // coarsen in i index
    for(int k=0;k<p_NqFine;++k;inner2){
      for(int j=0;j<p_NqFine;++j;inner1){
        for(int i=0;i<p_NqFine;++i;inner0){
          if((k<p_NqCoarse) && (j<p_NqCoarse) && (i<p_NqCoarse)){
            dfloat rtmp = 0;
            occaUnroll(p_NqFine)
              for(int m=0;m<p_NqFine;++m) {
                rtmp += s_R[i][m]*s_qccf[k][j][m];
              }
            s_qccc[k][j][i] = rtmp;
          }
        }
      }
    }

    barrier(localMemFence);

    // collect writes
    for(int k=0;k<p_NqFine;++k;inner2){
      for(int j=0;j<p_NqFine;++j;inner1){
        for(int i=0;i<p_NqFine;++i;inner0){
          const int id = i + j*p_NqFine+k*p_NqFine*p_NqFine;
          if(id<p_NpCoarse){
            qc[id + p_NpCoarse*e] = s_qccc[0][0][id];
          }
        }
      }
    }
  }
}