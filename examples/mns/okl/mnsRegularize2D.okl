kernel void mnsRegularizedSignum(const dlong Nelements,
                                 const dfloat epsilon,
                                 const dlong offset,  
                                 const dfloat * restrict Phi,
                                 const dfloat * restrict GPhi,
                                       dfloat * restrict SPhi){
  // Low storage Runge Kutta time step update
  for(dlong e=0;e<Nelements;++e;outer0){

    for(int n=0;n<p_Np;++n;inner0){
      const int id = n + e*p_Np;
      
      dfloat phi    = Phi[id]; 
      dfloat phix   = GPhi[id + 0*offset];
      dfloat phiy   = GPhi[id + 1*offset];
      
      // Some ugly computations
      dfloat dphi   = occaSqrt(phix*phix + phiy*phiy);   
      dfloat alpha  = ( dphi> 1.0) ?  dphi :1.0f; 
      dfloat ialpha = 1.0f/(alpha*epsilon);
     

      // Regularize signum term
      dfloat sphi   = 0.f;  
      if(phi>(epsilon*alpha))
        sphi = 1.0f;
      else if(phi<-(epsilon*alpha))
        sphi = -1.0f;
      else
        sphi = phi*ialpha + 1.f/OCCA_PI * occaSin(OCCA_PI*phi*ialpha);

      // Update
      SPhi[id]    = sphi;
    }
  }
}



