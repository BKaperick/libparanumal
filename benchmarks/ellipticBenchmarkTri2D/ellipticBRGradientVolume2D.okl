kernel void ellipticBRGradientVolume2D_v0(const int Nelements,
        const dfloat * restrict vgeo,
        const dfloat * restrict DrT,
        const dfloat * restrict DsT,
        const dfloat * restrict q,
        dfloat * restrict gradq){

  for(int eo=0;eo<Nelements;eo+=p_NblockV;outer0){
    // for all elements
    shared dfloat s_q[p_NblockV][p_Np];

    for(int es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(int n=0;n<p_Np;++n;inner0){     // for all nodes in this element
        int e = eo+es; // element in block
        if(e<Nelements){
          s_q[es][n]  = q[n + e*p_Np];
        }
      }
    }

    // Make sure all node data is loaded into shared
    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(int n=0;n<p_Np;++n;inner0){     // for all nodes in this element

        int e = eo+es; // element in block
        if(e<Nelements){
          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
          const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];

          dfloat dqdr  = 0.f, dqds  = 0.f;
          occaUnroll(p_Np)
            for(int i=0;i<p_Np;++i){
              const dfloat Drni = DrT[n+i*p_Np];
              const dfloat Dsni = DsT[n+i*p_Np];

              dqdr  += Drni*s_q[es][i];
              dqds  += Dsni*s_q[es][i];
            }

          const int id = e*2*p_Np;
          gradq[id+     n] = drdx*dqdr + dsdx*dqds;
          gradq[id+p_Np+n] = drdy*dqdr + dsdy*dqds;
        }
      }
    }
  }
}