kernel void ellipticBRDivergenceVolume2D_v0(const iint Nelements,
        const dfloat * restrict vgeo,
        const dfloat * restrict DrT,
        const dfloat * restrict DsT,
        const dfloat * restrict gradq,
        dfloat * restrict Aq){

  for(iint eo=0;eo<Nelements;eo+=p_NblockV;outer0){
    // for all elements
    shared dfloat s_qx[p_NblockV][p_Np];
    shared dfloat s_qy[p_NblockV][p_Np];

    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element
        iint e = eo+es; // element in block
        if(e<Nelements){
          s_qx[es][n]  = gradq[n +        e*2*p_Np];
          s_qy[es][n]  = gradq[n + p_Np + e*2*p_Np];
        }
      }
    }

    // Make sure all node data is loaded into shared
    barrier(localMemFence);

    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element

        iint e = eo+es; // element in block
        if(e<Nelements){
          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
          const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];

          dfloat dqxdr  = 0.f, dqxds  = 0.f;
          dfloat dqydr  = 0.f, dqyds  = 0.f;
          occaUnroll(p_Np)
            for(iint i=0;i<p_Np;++i){
              const dfloat Drni = DrT[n+i*p_Np];
              const dfloat Dsni = DsT[n+i*p_Np];

              dqxdr  += Drni*s_qx[es][i];
              dqxds  += Dsni*s_qx[es][i];
              dqydr  += Drni*s_qy[es][i];
              dqyds  += Dsni*s_qy[es][i];
            }

          const iint id = e*p_Np;
          Aq[id+n] = drdx*dqxdr + dsdx*dqxds + drdy*dqydr + dsdy*dqyds;
        }
      }
    }
  }
}