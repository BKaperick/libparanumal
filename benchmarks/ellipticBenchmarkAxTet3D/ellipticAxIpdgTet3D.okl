// increments gradients of pressure with pseudo-gradients at faces and
// increments rhs with pseudo-gradient/penalty terms at faces (need to double check scaling with tau)

// sgeo stores dfloat4s with nx,ny,nz,(sJ/J)*(w1*w2*w3/(ws1*ws2))

// nx,ny,nz,sJ,invJ - need WsJ
#define dfloat double
#define dfloat4 double4

kernel void ellipticPartialAxIpdgTp_Ne3D_Ref1(const int Nelements,
    const int * restrict elementList,
    const int * restrict vmapM,
    const int * restrict vmapP,
    const dfloat lambda,
    const dfloat tau,
    const dfloat * restrict vgeo,
    const dfloat * restrict sgeo,
    const int   * restrict EToB,
    const dfloat * restrict DrT,
    const dfloat * restrict DsT,
    const dfloat * restrict DtT,
    const dfloat * restrict LIFTT,
    const dfloat * restrict MM,
    const dfloat4 * restrict gradq,
    dfloat  * restrict Aq){

  for(int e=0;e<Nelements;++e;outer0){
    shared  dfloat s_dqdx[p_Np];
    shared  dfloat s_dqdy[p_Np];
    shared  dfloat s_dqdz[p_Np];
    shared  dfloat s_lapq[p_Np];
    shared  dfloat s_nxdq[p_NfacesNfp];
    shared  dfloat s_nydq[p_NfacesNfp];
    shared  dfloat s_nzdq[p_NfacesNfp];
    shared  dfloat s_lapflux[p_NfacesNfp];
    shared  dfloat s_Lnxdq[p_Np];
    shared  dfloat s_Lnydq[p_Np];
    shared  dfloat s_Lnzdq[p_Np];
    exclusive int element;
    exclusive int idM;
    exclusive dfloat nx, ny, nz, sJ, invJ, hinv;
    //loop 1
    for(int n=0;n<p_Nmax;++n;inner0){
      element = elementList[e];
      if(n<p_Np){
        // assume that this stores (qx, qy, qz, q) as dfloat4
        const dfloat4 gradqn = gradq[element*p_Np+n];

        s_dqdx[n] = gradqn.x;
        s_dqdy[n] = gradqn.y;
        s_dqdz[n] = gradqn.z;
        s_lapq[n] = lambda*gradqn.w;
      }

      if(n<p_NfacesNfp){
        const int id  = n + element*p_Nfaces*p_Nfp;
        idM = vmapM[id];
        const int idP = vmapP[id];
        // find face that owns this node
        const int face = n/p_Nfp;

        dfloat4 gradqM = gradq[idM];// could fp_Nech from shared after barrier
        dfloat4 gradqP = gradq[idP];

        // load surface geofactors for this face
        int sid = p_Nsgeo*(element*p_Nfaces+face);
        nx = sgeo[sid+p_NXID];
        ny = sgeo[sid+p_NYID];
        nz = sgeo[sid+p_NZID];
        sJ = sgeo[sid+p_SJID];
        invJ = sgeo[sid+p_IJID];
        hinv = sgeo[sid+p_IHID];

        int bc = EToB[face+p_Nfaces*element];
        if(bc>0) {
          //  ellipticHomogeneousBC3D(bc, gradqM.w, gradqM.x, gradqM.y, gradqM.z, gradqP.w, gradqP.x, gradqP.y, gradqP.z);
          if (bc == 1){
            gradqP.w = 0.f;
            gradqP.x =gradqM.x;
            gradqP.y =gradqM.y;
            gradqP.z =gradqM.z;
          }
          if (bc == 2){
            gradqP.w = gradqM.w;
            gradqP.x =0.0f;;
            gradqP.y =0.0f;
            gradqP.z =0.0f;
          }
          gradqP = 2*gradqP - gradqM;
        }

        const dfloat dq = gradqP.w - gradqM.w;
        const dfloat half = 0.5f;

        s_nxdq[n] = half*sJ*invJ*nx*dq;
        s_nydq[n] = half*sJ*invJ*ny*dq;
        s_nzdq[n] = half*sJ*invJ*nz*dq;

        s_lapflux[n] = half*sJ*invJ*(-nx*(gradqP.x-gradqM.x)
            -ny*(gradqP.y-gradqM.y)
            -nz*(gradqP.z-gradqM.z)
            -tau*hinv*dq);
      }
    }

    barrier(localMemFence);
    //loop 2
    // dqdx += LIFT*(sJ/J)*nx*dq
    for(int n=0;n<p_Nmax;++n;inner0){

      if(n<p_Np){
        const int gid = element*p_Nvgeo;
        const dfloat drdx = vgeo[gid + p_RXID];
        const dfloat drdy = vgeo[gid + p_RYID];
        const dfloat drdz = vgeo[gid + p_RZID];
        const dfloat dsdx = vgeo[gid + p_SXID];
        const dfloat dsdy = vgeo[gid + p_SYID];
        const dfloat dsdz = vgeo[gid + p_SZID];
        const dfloat dtdx = vgeo[gid + p_TXID];
        const dfloat dtdy = vgeo[gid + p_TYID];
        const dfloat dtdz = vgeo[gid + p_TZID];

        dfloat Lnxdq = 0;
        dfloat Lnydq = 0;
        dfloat Lnzdq = 0;

        occaUnroll(p_NfacesNfp)
          for(int i=0;i<p_NfacesNfp;++i){
            Lnxdq += LIFTT[n+i*p_Np]*s_nxdq[i];
            Lnydq += LIFTT[n+i*p_Np]*s_nydq[i];
            Lnzdq += LIFTT[n+i*p_Np]*s_nzdq[i];
          }

        dfloat dqdx = s_dqdx[n] + Lnxdq;
        dfloat dqdy = s_dqdy[n] + Lnydq;
        dfloat dqdz = s_dqdz[n] + Lnzdq;

        s_dqdx[n] = drdx*dqdx + drdy*dqdy + drdz*dqdz; // abuse of notation
        s_dqdy[n] = dsdx*dqdx + dsdy*dqdy + dsdz*dqdz;
        s_dqdz[n] = dtdx*dqdx + dtdy*dqdy + dtdz*dqdz;

        s_Lnxdq[n] = Lnxdq;
        s_Lnydq[n] = Lnydq;
        s_Lnzdq[n] = Lnzdq;
      }
    }

    barrier(localMemFence);
    //loop 4
    for(int n=0;n<p_Nmax;++n;inner0){
      if(n<p_NfacesNfp){
        int id = idM%p_Np;
        s_lapflux[n] += sJ*invJ*(nx*s_Lnxdq[id]+ny*s_Lnydq[id]+nz*s_Lnzdq[id]);
      }

      if(n<p_Np){
        dfloat lapr = 0, laps = 0, lapt = 0;

        occaUnroll(p_Np)
          for(int i=0;i<p_Np;++i){
            lapr += DrT[n+i*p_Np]*s_dqdx[i];
            laps += DsT[n+i*p_Np]*s_dqdy[i];
            lapt += DtT[n+i*p_Np]*s_dqdz[i];
          }

        s_lapq[n] -= (lapr+laps+lapt);
      }

    }

    barrier(localMemFence);
    //loop 5
    for(int n=0;n<p_Nmax;++n;inner0){
      if(n<p_Np){
        dfloat lap = 0;

        // lift remaining surface terms
        occaUnroll(p_NfacesNfp)
          for(int i=0;i<p_NfacesNfp;++i){
            lap += LIFTT[n+i*p_Np]*s_lapflux[i];
          }

        s_lapq[n] += lap;
      }
    }

    barrier(localMemFence);
    //loop 6
    for(int n=0;n<p_Nmax;++n;inner0){
      if(n<p_Np){
        const dfloat J = vgeo[element*p_Nvgeo + p_JID];

        dfloat Mlapq = 0;

        // multiply by mass matrix
        occaUnroll(p_Np)
          for(int i=0;i<p_Np;++i){
            Mlapq += MM[n+i*p_Np]*s_lapq[i];
          }

        Aq[n+element*p_Np] = J*Mlapq;
      }
    }
  }
}


//kernel 2
//multiple (up to three) elements per node
kernel void ellipticPartialAxIpdgTp_Ne3D_Ref2(const int Nelements,
    const int * restrict elementList,
    const int * restrict vmapM,
    const int * restrict vmapP,
    const dfloat lambda,
    const dfloat tau,
    const dfloat * restrict vgeo,
    const dfloat * restrict sgeo,
    const int   * restrict EToB,
    const dfloat * restrict DrT,
    const dfloat * restrict DsT,
    const dfloat * restrict DtT,
    const dfloat * restrict LIFTT,
    const dfloat * restrict MM,
    const dfloat4 * restrict gradq,
    dfloat  * restrict Aq){

  for(int e=0;e<Nelements;++e;outer0){
    shared  dfloat s_dqdx[p_Ne][p_Np];
    shared  dfloat s_dqdy[p_Ne][p_Np];
    shared  dfloat s_dqdz[p_Ne][p_Np];
    shared  dfloat s_lapq[p_Ne][p_Np];
    shared  dfloat s_nxdq[p_Ne][p_NfacesNfp];
    shared  dfloat s_nydq[p_Ne][p_NfacesNfp];
    shared  dfloat s_nzdq[p_Ne][p_NfacesNfp];
    shared  dfloat s_lapflux[p_Ne][p_NfacesNfp];
    shared  dfloat s_Lnxdq[p_Ne][p_Np];
    shared  dfloat s_Lnydq[p_Ne][p_Np];
    shared  dfloat s_Lnzdq[p_Ne][p_Np];
    exclusive int element[p_Ne];
    exclusive int idM[p_Ne];
    exclusive dfloat nx[et], ny[p_Ne], nz[p_Ne], sJ[p_Ne], invJ[p_Ne], hinv[p_Ne];

    //loop 1
    for(int n=0;n<p_Nmax;++n;inner0){
      occaUnroll(p_Ne)
        for(int et=0;et<p_Ne;++et){
          const int e = eo + et;
          if(e<Nelements){
            element[et] = elementList[e];
            if(n<p_Np){
              // assume that this stores (qx, qy, qz, q) as dfloat4
              const dfloat4 gradqn = gradq[element[et]*p_Np+n];

              s_dqdx[et][n] = gradqn.x;
              s_dqdy[et][n] = gradqn.y;
              s_dqdz[et][n] = gradqn.z;
              s_lapq[et][n] = lambda*gradqn.w;
            }

            if(n<p_NfacesNfp){
              const int id  = n + element[et]*p_Nfaces*p_Nfp;
              idM[et]= vmapM[id];
              const int idP = vmapP[id];
              // find face that owns this node
              const int face = n/p_Nfp;

              dfloat4 gradqM = gradq[idM[et]];// could fp_Nech from shared after barrier
              dfloat4 gradqP = gradq[idP];

              // load surface geofactors for this face
              int sid = p_Nsgeo*(element[et]*p_Nfaces+face);
              nx[et] = sgeo[sid+p_NXID];
              ny[et]  = sgeo[sid+p_NYID];
              nz[et]  = sgeo[sid+p_NZID];
              sJ[et]  = sgeo[sid+p_SJID];
              invJ[et]  = sgeo[sid+p_IJID];
              hinv[et]  = sgeo[sid+p_IHID];

              int bc = EToB[face+p_Nfaces*element[et]];
              if(bc>0) {
                //  ellipticHomogeneousBC3D(bc, gradqM.w, gradqM.x, gradqM.y, gradqM.z, gradqP.w, gradqP.x, gradqP.y, gradqP.z);
                if (bc == 1){
                  gradqP.w = 0.f;
                  gradqP.x =gradqM.x;
                  gradqP.y =gradqM.y;
                  gradqP.z =gradqM.z;
                }
                if (bc == 2){
                  gradqP.w = gradqM.w;
                  gradqP.x =0.0f;;
                  gradqP.y =0.0f;
                  gradqP.z =0.0f;
                }
                gradqP = 2*gradqP - gradqM;
              }

              const dfloat dq = gradqP.w - gradqM.w;
              const dfloat half = 0.5f;
              datafloat aux = half*invJ[et]*sJ[et]*dq;

              s_nxdq[et][n] =  aux*nx[et];
              s_nydq[et][n] = aux*ny[et];
              s_nzdq[et][n] = aux*nz;

              s_lapflux[et][n] = half*sJ[et]*invJ[et]*(-nx[et]*(gradqP.x-gradqM.x)
                  -ny[et]*(gradqP.y-gradqM.y)
                  -nz[et]*(gradqP.z-gradqM.z)
                  -tau*hinv[et]*dq);
            }
          }
        }
      barrier(localMemFence);
      //loop 2
      // dqdx += LIFT*(sJ/J)*nx*dq
      for(int n=0;n<p_Nmax;++n;inner0){

        if(n<p_Np){
          for(int et=0;et<p_Ne;++et){
            const int gid = element[et]*p_Nvgeo;
            const dfloat drdx = vgeo[gid + p_RXID];
            const dfloat drdy = vgeo[gid + p_RYID];
            const dfloat drdz = vgeo[gid + p_RZID];
            const dfloat dsdx = vgeo[gid + p_SXID];
            const dfloat dsdy = vgeo[gid + p_SYID];
            const dfloat dsdz = vgeo[gid + p_SZID];
            const dfloat dtdx = vgeo[gid + p_TXID];
            const dfloat dtdy = vgeo[gid + p_TYID];
            const dfloat dtdz = vgeo[gid + p_TZID];

            datafloat Lnxdq[p_Ne];
            datafloat Lnydq[p_Ne];
            datafloat Lnzdq[p_Ne];
            for (int et=0; et<p_Ne; ++et){
              Lnxdq[et]= 0;
              Lnydq[et] = 0;
              Lnzdq[et] = 0;
            }

            occaUnroll(p_NfacesNfp)
              for(int i=0;i<p_NfacesNfp;++i){
                datafloat LIFTT_ni = LIFTT[n+i*p_Np];

                for (int et=0; et<p_Ne; ++et){

                  Lnxdq[et] += LIFTT_ni*s_nxdq[et][i];
                  Lnydq[et] += LIFTT_ni*s_nydq[et][i];
                  Lnzdq[et] += LIFTT_ni*s_nzdq[et][i];
                }
              }

            dfloat dqdx = s_dqdx[et][n] + Lnxdq[et];
            dfloat dqdy = s_dqdy[et][n] + Lnydq[et];
            dfloat dqdz = s_dqdz[et][n] + Lnzdq[et];

            s_dqdx[et][n] = drdx*dqdx + drdy*dqdy + drdz*dqdz; // abuse of notation
            s_dqdy[et][n] = dsdx*dqdx + dsdy*dqdy + dsdz*dqdz;
            s_dqdz[et][n] = dtdx*dqdx + dtdy*dqdy + dtdz*dqdz;

            s_Lnxdq[et][n] = Lnxdq;
            s_Lnydq[et][n] = Lnydq;
            s_Lnzdq[et][n] = Lnzdq;
          }
        }
      }
      barrier(localMemFence);
      //loop 4
      for(int n=0;n<p_Nmax;++n;inner0){
            for(int et=0;et<p_Ne;++et){

        if(n<p_NfacesNfp){
          int id = idM%p_Np;
          s_lapfluxi[et][n] += sJ[et]*invJ[et]*(nx[et]*s_Lnxdq[et][id]+ny[et]*s_Lnydq[et][id]+nz[et]*s_Lnzdq[et][id]);
        }

        if(n<p_Np){
          dfloat lapr = 0, laps = 0, lapt = 0;

          occaUnroll(p_Np)
            for(int i=0;i<p_Np;++i){
              lapr += DrT[n+i*p_Np]*s_dqdx[i];
              laps += DsT[n+i*p_Np]*s_dqdy[i];
              lapt += DtT[n+i*p_Np]*s_dqdz[i];
            }
`
          s_lapq[n] -= (lapr+laps+lapt);
        }
}
      }

      barrier(localMemFence);
      //loop 5
      for(int n=0;n<p_Nmax;++n;inner0){
        if(n<p_Np){
          dfloat lap = 0;

          // lift remaining surface terms
          occaUnroll(p_NfacesNfp)
            for(int i=0;i<p_NfacesNfp;++i){
              lap += LIFTT[n+i*p_Np]*s_lapflux[i];
            }

          s_lapq[n] += lap;
        }
      }

      barrier(localMemFence);
      //loop 6
      for(int n=0;n<p_Nmax;++n;inner0){
        if(n<p_Np){
          const dfloat J = vgeo[element*p_Nvgeo + p_JID];

          dfloat Mlapq = 0;

          // multiply by mass matrix
          occaUnroll(p_Np)
            for(int i=0;i<p_Np;++i){
              Mlapq += MM[n+i*p_Np]*s_lapq[i];
            }

          Aq[n+element*p_Np] = J*Mlapq;
        }
      }
    }
  }

