
kernel void ellipticBRGradientSurface3D_v0(const iint Nelements,
         const iint   * restrict vmapM,
         const iint   * restrict vmapP,
         const dfloat * restrict sgeo,
         const iint   * restrict EToB,
         const dfloat * restrict LIFTT,
         const dfloat * restrict q,
         dfloat * restrict gradq){

  // for all elements
  for(iint eo=0;eo<Nelements;eo+=p_NblockS;outer0){

    shared dfloat s_fluxqx[p_NblockS][p_Nfp*p_Nfaces];
    shared dfloat s_fluxqy[p_NblockS][p_Nfp*p_Nfaces];
    shared dfloat s_fluxqz[p_NblockS][p_Nfp*p_Nfaces];

    // for all face nodes of all elements
    for(iint es=0;es<p_NblockS;++es;inner1){
      for(iint n=0;n<p_maxNodes;++n;inner0){ // maxNodes = max(Nfp*Nfaces,Np)
        const iint e = eo + es;
        if(e<Nelements){
          if(n<p_Nfp*p_Nfaces){
            // find face that owns this node
            const iint face = n/p_Nfp;
            // load surface geofactors for this face
            const iint sid    = p_Nsgeo*(e*p_Nfaces+face);
            const dfloat nx   = sgeo[sid+p_NXID];
            const dfloat ny   = sgeo[sid+p_NYID];
            const dfloat nz   = sgeo[sid+p_NZID];
            const dfloat sJ   = sgeo[sid+p_SJID];
            const dfloat invJ = sgeo[sid+p_IJID];

            // indices of negative and positive traces of face node
            const iint id  = e*p_Nfp*p_Nfaces + n;
            const iint idM = vmapM[id];
            const iint idP = vmapP[id];

            dfloat  qM = q[idM], qP = q[idP];

            // apply boundary condition
            const iint bc = EToB[face+p_Nfaces*e];
            if(bc>0) {
              dfloat qxM = 0.f, qyM = 0.f, qzM = 0.f;
              dfloat qxP = 0.f, qyP = 0.f, qzP = 0.f;
              ellipticHomogeneousBC3D(bc, qM, qxM, qyM, qzM, qP, qxP, qyP, qzP);
              qP = 2*qP - qM;
            }

            // evaluate "flux" terms: LLF
            const dfloat sc = .5f*invJ * sJ ;

            // Centered flux for pr p*-p = 0.5(PP-PM) // Central Flux
            s_fluxqx[es][n]  = sc*nx*(qP-qM);
            s_fluxqy[es][n]  = sc*ny*(qP-qM);
            s_fluxqz[es][n]  = sc*nz*(qP-qM);
          }
        }
      }
    }

    // wait for all flux functions are written to shared
    barrier(localMemFence);

    // for each node in the element
    for(iint es=0;es<p_NblockS;++es;inner1){
      for(iint n=0;n<p_maxNodes;++n;inner0){
        const iint e = eo + es;
        if(e<Nelements){
          if(n<p_Np){
            const iint id = e*3*p_Np;

            dfloat qx  = gradq[id+       n];
            dfloat qy  = gradq[id+  p_Np+n];
            dfloat qz  = gradq[id+2*p_Np+n];

            // Lift
            occaUnroll(p_NfacesNfp)
              for(int m=0;m<p_Nfaces*p_Nfp;++m){
                const dfloat L = LIFTT[n+m*p_Np];
                qx += L*s_fluxqx[es][m];
                qy += L*s_fluxqy[es][m];
                qz += L*s_fluxqz[es][m];
              }

            gradq[id+       n] = qx;
            gradq[id+  p_Np+n] = qy;
            gradq[id+2*p_Np+n] = qz;
          }
        }
      }
    }
  }
}



