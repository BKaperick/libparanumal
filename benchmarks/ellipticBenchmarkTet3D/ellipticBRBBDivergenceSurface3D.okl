kernel void ellipticBRBBDivergenceSurface3D_v0(const iint Nelements,
                                               const iint   * restrict vmapM,
                                               const iint   * restrict vmapP,
                                               const dfloat lambda,
                                               const dfloat tau,
                                               const dfloat * restrict vgeo,
                                               const dfloat * restrict sgeo,
                                               const iint   * restrict EToB,
                                               const iint   * restrict L0ids,
                                               const dfloat * restrict L0vals,  
                                               const iint   * restrict ELids,
                                               const dfloat * restrict ELvals,  
                                               const dfloat * restrict MM,
                                               const dfloat * restrict q,
                                               const dfloat * restrict gradq,
                                               dfloat * restrict Aq){

  // for all elements
  for(iint eo=0;eo<Nelements;eo+=p_NblockS;outer0){

    shared dfloat s_flux[p_NblockS][p_Nfp*p_Nfaces];
    shared dfloat s_Aq[p_NblockS][p_Np];

    exclusive dfloat r_flux;

    // for all face nodes of all elements
    for(iint es=0;es<p_NblockS;++es;inner1){
      for(iint n=0;n<p_maxNodes;++n;inner0){ // maxNodes = max(Nfp*Nfaces,Np)
        const iint e = eo + es;
        if(e<Nelements){
          if(n<p_Nfp*p_Nfaces){
            // find face that owns this node
            const iint face = n/p_Nfp;
            // load surface geofactors for this face
            const iint sid    = p_Nsgeo*(e*p_Nfaces+face);
            const dfloat nx   = sgeo[sid+p_NXID];
            const dfloat ny   = sgeo[sid+p_NYID];
            const dfloat nz   = sgeo[sid+p_NZID];
            const dfloat sJ   = sgeo[sid+p_SJID];
            const dfloat invJ = sgeo[sid+p_IJID];

            // indices of negative and positive traces of face node
            const iint id  = e*p_Nfp*p_Nfaces + n;
            const iint idM = vmapM[id]%p_Np;
            const iint idP = vmapP[id]%p_Np;

            const iint eM = vmapM[id]/p_Np;
            const iint eP = vmapP[id]/p_Np;

            dfloat  qM  = q[idM+p_Np*eM], qP  = q[idP+p_Np*eP];
            dfloat  qxM = gradq[idM+       3*p_Np*eM], qxP = gradq[idP+       3*p_Np*eP];
            dfloat  qyM = gradq[idM+  p_Np+3*p_Np*eM], qyP = gradq[idP+  p_Np+3*p_Np*eP];
            dfloat  qzM = gradq[idM+2*p_Np+3*p_Np*eM], qzP = gradq[idP+2*p_Np+3*p_Np*eP];

            // apply boundary condition
            const iint bc = EToB[face+p_Nfaces*e];
            if(bc>0) {
              ellipticHomogeneousBC3D(bc, qM, qxM, qyM, qzM, qP, qxP, qyP, qzP);
              qP  = 2*qP  - qM;
              qxP = 2*qxP - qxM;
              qyP = 2*qyP - qyM;
              qzP = 2*qzP - qzM;
            }

            const dfloat sc = 0.5f*invJ * sJ ;

            // Central Flux + penalty
            s_flux[es][n]  = sc*(nx*(qxP-qxM)+ny*(qyP-qyM)+nz*(qzP-qzM)+tau*(qP-qM));
          }
        }
      }
    }

    // wait for all flux functions are written to shared
    barrier(localMemFence);

    // apply L0 to flux. use sparse format
    for(iint es=0;es<p_NblockS;++es;inner1){
      for(iint n=0;n<p_maxNodes;++n;inner0){
        const iint e = eo + es;
        if(e<Nelements){
          if(n<p_Nfp*p_Nfaces){
            const iint id = n%p_Nfp;  // warning: redundant reads
            const iint f  = n/p_Nfp;

            r_flux = 0.f;

            // sparse application of L0
            occaUnroll(7)
            for (int m = 0; m < 7; ++m){
              const iint   L0id  = L0ids [id + p_Nfp*m];
              const dfloat L0val = L0vals[id + p_Nfp*m];
              
              r_flux += L0val * s_flux[es][L0id+f*p_Nfp];
            }
          }
        }
      }
    }

    barrier(localMemFence);

    //write back to shared 
    for(iint es=0;es<p_NblockS;++es;inner1){
      for(iint n=0;n<p_maxNodes;++n;inner0){
        if(n<p_Nfp*p_Nfaces){
          s_flux[es][n] = r_flux;
        }
      }
    }

    barrier(localMemFence);

    // apply lift reduction and accumulate RHS
    for(iint es=0;es<p_NblockS;++es;inner1){
      for(iint n=0;n<p_maxNodes;++n;inner0){
        const iint e = eo + es;
        if(e<Nelements){
          if(n<p_Np){
            const iint id = e*p_Np;

            dfloat Aqn = Aq[id+n];
            dfloat qn  = q[id+n];

            // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
            occaUnroll(p_max_EL_nnz)
            for (int m = 0; m < p_max_EL_nnz; ++m){
              const iint id = n + m*p_Np;
              const dfloat ELval = ELvals[id];
              const iint   ELid  = ELids [id];
              Aqn += ELval * s_flux[es][ELid];
            }
            
            s_Aq[es][n] = -Aqn+lambda*qn;
          }
        }
      }
    }

    barrier(localMemFence);

    for(iint es=0;es<p_NblockS;++es;inner1){
      for(iint n=0;n<p_maxNodes;++n;inner0){
        const iint e = eo + es;
        if(e<Nelements){
          if(n<p_Np){

            const dfloat J = vgeo[e*p_Nvgeo + p_JID];
            const iint id = e*p_Np;

            dfloat MAqn = 0.f;

            // multiply by mass matrix
            occaUnroll(p_Np)
              for(int i=0;i<p_Np;++i){
                MAqn += MM[n+i*p_Np]*s_Aq[es][i];
              }

            Aq[id+n] = J*MAqn;
          }
        }
      }
    }
  }
}

