#define drdx s_vgeo[es][p_RXID]
#define drdy s_vgeo[es][p_RYID]
#define dsdx s_vgeo[es][p_SXID]
#define dsdy s_vgeo[es][p_SYID]

@kernel void mppfPhaseFieldAxGradTri2D(const dlong Nelements,
                                       const dlong offset, 
                                      @restrict const  dfloat *  extbdfA, 
                                      @restrict const  dfloat *  vgeo,
                                      @restrict const  dfloat *  const Dmatrices,
                                      @restrict const  dfloat *  q,
                                      @restrict dfloat4 *  gradq){  
          
  // block partition of elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){
    
    @shared dfloat s_q[p_NblockV][p_Np];
    @shared dfloat s_vgeo[p_NblockV][p_Nvgeo];

    for(dlong e=eo;e<eo+p_NblockV;++e;@inner(1)){
      for(int n=0;n<p_Np;++n;@inner(0)){
        if(e<Nelements){
          // prefetch q
          const dlong id = e*p_Np+n;
          dfloat qn = 0.f;
           for (int s=0;s<p_Nstages;s++) {
            qn += extbdfA[s]*q[id + s*offset]; 
           }
          s_q[e-eo][n] = qn;
        }
        
        // coalesce volume geofac reads to @shared
        int t = n + p_Np*(e-eo);
        while(t<p_Nvgeo*p_NblockV){
          if(eo*p_Nvgeo+t<Nelements*p_Nvgeo)
            s_vgeo[0][t] = vgeo[eo*p_Nvgeo+t];
          t+=p_NblockV*p_Np;
        }
      }
    }
    
    @barrier("local");

    for(dlong e=eo;e<eo+p_NblockV;++e;@inner(1)){
      for(int n=0;n<p_Np;++n;@inner(0)){
        if(e<Nelements){
          const int es = e-eo;

          // compute 1D derivatives
          dfloat qr = 0, qs = 0;
          #pragma unroll p_Np
            for(int i=0;i<p_Np;++i) {
              dfloat drt = Dmatrices[n + i*p_Np + 0*p_Np*p_Np];
              dfloat dst = Dmatrices[n + i*p_Np + 1*p_Np*p_Np];
              dfloat qn  = s_q[es][i];

              qr += drt*qn;
              qs += dst*qn;
            }
          
          dfloat4 gradqn;
          gradqn.x = drdx*qr + dsdx*qs;
          gradqn.y = drdy*qr + dsdy*qs;
          gradqn.w = s_q[es][n];
          
          const dlong id = e*p_Np+n; 
          gradq[id] = gradqn;
        }
      }
    }
  }
}