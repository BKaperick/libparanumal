
@kernel void mppfVelocityHaloExtract(const dlong Nelements,
                                   const dlong NhaloElements,
                                   @restrict const  dlong   *  haloElements,
                                   const dlong offset,
                                   @restrict const  dfloat *  U,
                                         @restrict dfloat *  haloq){

  for(dlong e=0;e<NhaloElements;++e;@outer(0)){ // for all elements
    for(int n=0;n<p_Np;++n;@inner(0)){     // for all entries in this element
      const dlong id   = n + p_Np*haloElements[e];
      const dlong base = n + p_NVfields*p_Np*e;

      #pragma unroll p_NVfields
      for (int i=0;i<p_NVfields;i++) {
        haloq[base + i*p_Np] = U[id +i*offset];
      }
    }
  }
}

@kernel void mppfVelocityHaloScatter(const dlong Nelements,
                                   const dlong NhaloElements,
                                   const dlong offset,
                                         @restrict dfloat *  U,
                                   @restrict const  dfloat *  haloq){

  for(dlong e=0;e<NhaloElements;++e;@outer(0)){ // for all elements
    for(int n=0;n<p_Np;++n;@inner(0)){ 
      const dlong id   = n + p_Np*(e+Nelements);
      const dlong base = n + p_NVfields*p_Np*e;

      #pragma unroll p_NVfields
      for (int i=0;i<p_NVfields;i++) {
        U[id + i*offset] = haloq[base + i*p_Np];
      }
    }
  }
}

@kernel void mppfPressureHaloExtract(const dlong Nelements,
                                   const dlong NhaloElements,
                                   @restrict const  dlong  *  haloElements,
                                   @restrict const  dfloat *  P,
                                         @restrict dfloat *  haloq){

  for(dlong e=0;e<NhaloElements;++e;@outer(0)){ // for all elements
    for(int n=0;n<p_Np;++n;@inner(0)){     // for all entries in this element
      const dlong id   = n + p_Np*haloElements[e];
      const dlong base = n + p_Np*e;

      haloq[base] = P[id];
    }
  }
}

@kernel void mppfPressureHaloScatter(const dlong Nelements,
                                   const dlong NhaloElements,
                                         @restrict dfloat *  P,
                                   @restrict const  dfloat *  haloq){

  for(dlong e=0;e<NhaloElements;++e;@outer(0)){ // for all elements
    for(int n=0;n<p_Np;++n;@inner(0)){ 
      const dlong id   = n + p_Np*(e+Nelements);
      const dlong base = n + p_Np*e;
      P[id] = haloq[base];
    }
  }
}




@kernel void mppfPhaseFieldHaloExtract(const dlong Nelements,
                                   const dlong NhaloElements,
                                   @restrict const  dlong  *  haloElements,
                                   @restrict const  dfloat *  P,
                                         @restrict dfloat *  haloq){

  for(dlong e=0;e<NhaloElements;++e;@outer(0)){ // for all elements
    for(int n=0;n<p_Np;++n;@inner(0)){     // for all entries in this element
      const dlong id   = n + p_Np*haloElements[e];
      const dlong base = n + p_Np*e;

      haloq[base] = P[id];
    }
  }
}

@kernel void mppfPhaseFieldHaloScatter(const dlong Nelements,
                                   const dlong NhaloElements,
                                         @restrict dfloat *  P,
                                   @restrict const  dfloat *  haloq){

  for(dlong e=0;e<NhaloElements;++e;@outer(0)){ // for all elements
    for(int n=0;n<p_Np;++n;@inner(0)){ 
      const dlong id   = n + p_Np*(e+Nelements);
      const dlong base = n + p_Np*e;
      P[id] = haloq[base];
    }
  }
}

