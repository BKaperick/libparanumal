

@kernel void ellipticPreconCoarsenTet3D(const dlong Nelements,
                                  @restrict const  dfloat *  R,
                                  @restrict const  dfloat *  qN,
                                  @restrict dfloat *  q1){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockVCoarse;@outer(0)){

    @shared dfloat s_qN[p_NblockVCoarse][p_NpFine];

    for(int es=0;es<p_NblockVCoarse;++es;@inner(1)){
      for(int n=0;n<p_NpCoarse;++n;@inner(0)){
        dlong t = n + es*p_NpCoarse;

        while(t<p_NpFine*p_NblockVCoarse){
          if(eo*p_NpFine + t< Nelements*p_NpFine)
            s_qN[0][t] = qN[eo*p_NpFine+t];
          t += p_NpCoarse*p_NblockVCoarse;
        }
      }
    }

    @barrier("local");

    for(int es=0;es<p_NblockVCoarse;++es;@inner(1)){
      for(int n=0;n<p_NpCoarse;++n;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          dfloat tmp = 0;
          #pragma unroll p_NpFine
            for(int i=0;i<p_NpFine;++i){
              tmp += R[n*p_NpFine + i]*s_qN[es][i]; // bank conflict ?
            }
          q1[e*p_NpCoarse+n] = tmp; // *invDegree[e*p_NpCoarse+n];
        }
      }
    }
  }
}

