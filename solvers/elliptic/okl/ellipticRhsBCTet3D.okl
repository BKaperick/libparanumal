kernel void ellipticRhsBCTet3D(const int Nelements,
                              const dfloat * restrict ggeo,
                              const dfloat * restrict sgeo,
                              const dfloat * restrict Dmatrices,
                              const dfloat * restrict Smatrices,
                              const dfloat * restrict MM,
                              const int   * restrict vmapM,
                              const dfloat * restrict sMT,
                              const dfloat lambda,
                              const dfloat t,
                              const dfloat * restrict x,
                              const dfloat * restrict y,
                              const dfloat * restrict z,
                              const int    * restrict mapB,
                              dfloat  * restrict rhs){
  
  for(int e=0;e<Nelements;e++;outer0){
    shared dfloat s_q[p_Np];
    shared dfloat s_ndq[p_Nfp*p_Nfaces];

    for(int n=0;n<p_Nmax;++n;inner0){
      if(n<p_Np){
        s_q[n] = 0.;
      }
      if(n<p_NfacesNfp){
        s_ndq[n] = 0.;
      }
    }

    barrier(localMemFence);

    for(int n=0;n<p_Nmax;++n;inner0){
      if(n<p_NfacesNfp){
        const int id  = n + e*p_Nfaces*p_Nfp;
        const int idM = vmapM[id];          
        const int nid = idM%p_Np; 

        const int face = n/p_Nfp;

        dfloat dudxP=0, dudyP=0, dudzP=0, uP=0;
        
        // load surface geofactors for this face
        const int sid = p_Nsgeo*(e*p_Nfaces+face);
        const dfloat nx = sgeo[sid+p_NXID];
        const dfloat ny = sgeo[sid+p_NYID];
        const dfloat nz = sgeo[sid+p_NZID];
        const dfloat sJ = sgeo[sid+p_SJID];

        const int bc = mapB[idM];
        if(bc>0) {
          ellipticBoundaryConditions3D(bc, t, x[idM], y[idM], z[idM], nx, ny, nz, \
                                        0.f, 0.f, 0.f, 0.f,               \
                                        uP, dudxP, dudyP, dudzP);
        }  

        s_q[nid] = uP;
        s_ndq[n] = sJ*(nx*dudxP + ny*dudyP + nz*dudzP);
      }
    }

    barrier(localMemFence);
    
    for(int n=0;n<p_Nmax;++n;inner0){ 
      if(n<p_Np){
        //volume Dirichlet data
        const int id = n + e*p_Np;
        const int gid = e*p_Nggeo;
        const dfloat Grr = ggeo[gid + p_G00ID];
        const dfloat Grs = ggeo[gid + p_G01ID];
        const dfloat Grt = ggeo[gid + p_G02ID];
        const dfloat Gss = ggeo[gid + p_G11ID];
        const dfloat Gst = ggeo[gid + p_G12ID];
        const dfloat Gtt = ggeo[gid + p_G22ID];
        const dfloat J   = ggeo[gid + p_GWJID];

        dfloat qrr = 0.;
        dfloat qrs = 0.;
        dfloat qrt = 0.;
        dfloat qss = 0.;
        dfloat qst = 0.;
        dfloat qtt = 0.;
        dfloat qM = 0.;

        occaUnroll(p_Np)
          for (int k=0;k<p_Np;k++) {
            qrr += Smatrices[n+k*p_Np+0*p_Np*p_Np]*s_q[k];
            qrs += Smatrices[n+k*p_Np+1*p_Np*p_Np]*s_q[k];
            qrt += Smatrices[n+k*p_Np+2*p_Np*p_Np]*s_q[k];
            qss += Smatrices[n+k*p_Np+3*p_Np*p_Np]*s_q[k];
            qst += Smatrices[n+k*p_Np+4*p_Np*p_Np]*s_q[k];
            qtt += Smatrices[n+k*p_Np+5*p_Np*p_Np]*s_q[k];
            qM  += MM[n+k*p_Np]*s_q[k];
          }

        dfloat Lndq = 0;            
        // surface mass * surface terms
        occaUnroll(p_NfacesNfp)
          for(int i=0;i<p_NfacesNfp;++i){
            Lndq += sMT[n+i*p_Np]*s_ndq[i];
          }
          
        rhs[id] -= Grr*qrr+Grs*qrs+Grt*qrt 
                  +Gss*qss+Gst*qst+Gtt*qtt
                  + J*lambda*qM - Lndq;
      }
    }
  }
}
