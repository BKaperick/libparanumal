kernel void ellipticRhsBCQuad2D(const dlong Nelements,
                              const dfloat * restrict ggeo,
                              const dfloat * restrict sgeo,
                              const dfloat * restrict D,
                              const dfloat * restrict S,
                              const dfloat * restrict MM,
                              const dlong  * restrict vmapM,
                              const dfloat * restrict sMT,
                              const dfloat lambda,
                              const dfloat t,
                              const dfloat * restrict x,
                              const dfloat * restrict y,
                              const dfloat * restrict z,
                              const int    * restrict mapB,
                              dfloat  * restrict rhs){
  
  for(dlong e=0;e<Nelements;e++;outer0){
    shared dfloat s_q[p_Nq][p_Nq];
    shared dfloat s_ndq[p_Nq][p_Nq];
    shared dfloat s_D[p_Nq][p_Nq];

    exclusive dfloat r_qr[p_Nq], r_qs[p_Nq], r_Aq[p_Nq];
    exclusive dfloat r_G00[p_Nq], r_G01[p_Nq], r_G11[p_Nq], r_GwJ[p_Nq];

    // loop over slabs
    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;inner0){
        s_q[j][i] = 0.;
        s_ndq[j][i] = 0.;

        s_D[j][i] = D[j*p_Nq+i];
      }
    }

    barrier(localMemFence);

    // face 0 & 2
    for(int i=0;i<p_Nq;++i;inner0){
      {//face 0
        const dlong sk = e*p_Nfp*p_Nfaces + 0*p_Nfp + i;
        const dlong idM = vmapM[sk];

        const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];        
        const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];
        const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];

        dfloat dudxP=0, dudyP=0, uP=0;

        const int bc = mapB[idM];
        if(bc>0) {
          ellipticBoundaryConditions2D(bc, t, x[idM], y[idM], nx, ny, \
                                    0.f, 0.f, 0.f,                \
                                    uP, dudxP, dudyP);
        }

        s_q  [0][i] = uP;
        s_ndq[0][i] -= WsJ*(nx*dudxP + ny*dudyP);
      }
      {//face 2
        const dlong sk = e*p_Nfp*p_Nfaces + 2*p_Nfp + i;
        const dlong idM = vmapM[sk];

        const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];        
        const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];
        const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];

        dfloat dudxP=0, dudyP=0, uP=0;

        const int bc = mapB[idM];
        if(bc>0) {
          ellipticBoundaryConditions2D(bc, t, x[idM], y[idM], nx, ny, \
                                    0.f, 0.f, 0.f,                \
                                    uP, dudxP, dudyP);
        }

        s_q  [p_Nq-1][i] = uP;
        s_ndq[p_Nq-1][i] -= WsJ*(nx*dudxP + ny*dudyP);
      }
    }
  
    barrier(localMemFence);

    // face 1 & 3
    for(int j=0;j<p_Nq;++j;inner0){
      {//face 1
        const dlong sk = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
        const dlong idM = vmapM[sk];

        const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];        
        const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];
        const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];

        dfloat dudxP=0, dudyP=0, uP=0;

        const int bc = mapB[idM];
        if(bc>0) {
          ellipticBoundaryConditions2D(bc, t, x[idM], y[idM], nx, ny, \
                                    0.f, 0.f, 0.f,                \
                                    uP, dudxP, dudyP);
        }

        s_q  [j][p_Nq-1] = uP;
        s_ndq[j][p_Nq-1] -= WsJ*(nx*dudxP + ny*dudyP);
      }
      {//face 2
        const dlong sk = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;
        const dlong idM = vmapM[sk];

        const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];        
        const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];
        const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];

        dfloat dudxP=0, dudyP=0, uP=0;

        const int bc = mapB[idM];
        if(bc>0) {
          ellipticBoundaryConditions2D(bc, t, x[idM], y[idM], nx, ny, \
                                    0.f, 0.f, 0.f,                \
                                    uP, dudxP, dudyP);
        }

        s_q  [j][0] = uP;
        s_ndq[j][0] -= WsJ*(nx*dudxP + ny*dudyP);
      }
    }

    barrier(localMemFence);
    
    // loop over slabs
    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong base = e*p_Nggeo*p_Np + j*p_Nq + i;

        // assumes w*J built into G entries
        r_GwJ[j] = ggeo[base+p_GWJID*p_Np];

        r_G00[j] = ggeo[base+p_G00ID*p_Np];
        r_G01[j] = ggeo[base+p_G01ID*p_Np];
        
        r_G11[j] = ggeo[base+p_G11ID*p_Np];

        dfloat qr = 0.f, qs = 0.f;
        
        occaUnroll(p_Nq)
          for(int n=0; n<p_Nq; ++n){
            qr += s_D[i][n]*s_q[j][n];
            qs += s_D[j][n]*s_q[n][i];
          }
        
        r_qr[j] = qr; r_qs[j] = qs; 
        
        r_Aq[j] = r_GwJ[j]*lambda*s_q[j][i];
      }
    }

    // r term ----->
    barrier(localMemFence);

    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;inner0){
        s_q[j][i] = r_G00[j]*r_qr[j] + r_G01[j]*r_qs[j];
      }
    }
      
    barrier(localMemFence);

    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;inner0){
        dfloat tmp = 0.f;
        occaUnroll(p_Nq)
          for(int n=0;n<p_Nq;++n) {
            tmp += s_D[n][i]*s_q[j][n];
          }

        r_Aq[j] += tmp;
      }
    }

    // s term ---->
    barrier(localMemFence);

    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;inner0){
        s_q[j][i] = r_G01[j]*r_qr[j] + r_G11[j]*r_qs[j];
      }
    }
      
    barrier(localMemFence);

    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;inner0){
        dfloat tmp = 0.f;

        occaUnroll(p_Nq) 
          for(int n=0;n<p_Nq;++n) {
            tmp += s_D[n][j]*s_q[n][i];
          }
        
        r_Aq[j] += tmp;

        const dlong id = e*p_Np + j*p_Nq + i;
        rhs[id] -= r_Aq[j] + s_ndq[j][i];
      }
    }
  }
}
