kernel void insVelocityGradientTet3D(const dlong Nelements,
                                     const dlong offset,
                                     const dfloat * restrict vgeo,
                                     const dfloat * restrict Dmatrices, 
                                     const dlong fieldOffset,
                                     const dfloat * restrict U,
                                          dfloat4 * restrict GU){
  
  // block partition of elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;outer0){
    
    shared dfloat s_q[p_NblockV][p_Np];

    occaUnroll(p_NVfields)
    for (int fld=0; fld<p_NVfields; fld++) {

      for(dlong e=eo;e<eo+p_NblockV;++e;inner1){
        for(int n=0;n<p_Np;++n;inner0){
          if(e<Nelements){
            // prefetch q
            const dlong id = (e+offset)*p_Np+n;
            s_q[e-eo][n] = U[id+fld*fieldOffset];
          }
        }
      }
            
      barrier(localMemFence);

      for(dlong e=eo;e<eo+p_NblockV;++e;inner1){
        for(int n=0;n<p_Np;++n;inner0){
          if(e<Nelements){
            const int es = (int) (e-eo);
            const dlong gid = (e+offset)*p_Nvgeo;

            const dfloat drdx = vgeo[gid + p_RXID];
            const dfloat drdy = vgeo[gid + p_RYID];
            const dfloat drdz = vgeo[gid + p_RZID];
            const dfloat dsdx = vgeo[gid + p_SXID];
            const dfloat dsdy = vgeo[gid + p_SYID];
            const dfloat dsdz = vgeo[gid + p_SZID];
            const dfloat dtdx = vgeo[gid + p_TXID];
            const dfloat dtdy = vgeo[gid + p_TYID];
            const dfloat dtdz = vgeo[gid + p_TZID];    

            // compute 1D derivatives
            dfloat qr = 0, qs = 0, qt =0;

            occaUnroll(p_Np)
              for(int i=0;i<p_Np;++i) {
                qr += Dmatrices[n + i*p_Np+0*p_Np*p_Np]*s_q[es][i];
                qs += Dmatrices[n + i*p_Np+1*p_Np*p_Np]*s_q[es][i];
                qt += Dmatrices[n + i*p_Np+2*p_Np*p_Np]*s_q[es][i];
              }

            dfloat4 gradqn;
            gradqn.x = drdx*qr + dsdx*qs + dtdx*qt;
            gradqn.y = drdy*qr + dsdy*qs + dtdy*qt;
            gradqn.z = drdz*qr + dsdz*qs + dtdz*qt;
            gradqn.w = s_q[es][n];
            
            const dlong id = (e+offset)*p_Np+n; 
            GU[id+fld*fieldOffset] = gradqn;
          }
        }
      }
    }
  }
}
