// Compute Gradient in weak Form
kernel void insDivergenceVolumeHex3D(const dlong Nelements,
                                      const dfloat * restrict vgeo,
                                      const dfloat * restrict D,
                                      const dlong offset,
                                      const dfloat * restrict U,
                                            dfloat * restrict divU){

  for(dlong e=0; e<Nelements; ++e; outer0) {
    shared dfloat s_U[p_Nq][p_Nq];
    shared dfloat s_V[p_Nq][p_Nq];
    shared dfloat s_W[p_Nq][p_Nq];

    shared dfloat s_D[p_Nq][p_Nq];

    exclusive dfloat r_div[p_Nq];

    for(int j=0;j<p_Nq;++j;inner1){ 
      for(int i=0;i<p_Nq;++i;inner0){
        const int id = i+j*p_Nq;
        s_D[0][id] = D[id];

        occaUnroll(p_Nq)
          for(int k=0;k<p_Nq;++k){         
            r_div[k] = 0.;
          }
      }
    }

    barrier(localMemFence);

    occaUnroll(p_Nq)
    for(int k=0;k<p_Nq;++k){ 

      //fetch slice
      for(int j=0;j<p_Nq;++j;inner1){ 
        for(int i=0;i<p_Nq;++i;inner0){
          const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
          const dfloat drdx = vgeo[gid + p_RXID*p_Np];
          const dfloat drdy = vgeo[gid + p_RYID*p_Np];
          const dfloat drdz = vgeo[gid + p_RZID*p_Np];
          const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
          const dfloat dsdy = vgeo[gid + p_SYID*p_Np];
          const dfloat dsdz = vgeo[gid + p_SZID*p_Np];
          const dfloat dtdx = vgeo[gid + p_TXID*p_Np];
          const dfloat dtdy = vgeo[gid + p_TYID*p_Np];
          const dfloat dtdz = vgeo[gid + p_TZID*p_Np];
          const dfloat JW    = vgeo[gid + p_JWID*p_Np];

          const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
          const dfloat Un = U[id+0*offset];
          const dfloat Vn = U[id+1*offset];
          const dfloat Wn = U[id+2*offset];

          //store covarient field
          s_U[j][i] = JW*(drdx*Un+drdy*Vn+drdz*Wn);
          s_V[j][i] = JW*(dsdx*Un+dsdy*Vn+dsdz*Wn);
          s_W[j][i] = JW*(dtdx*Un+dtdy*Vn+dtdz*Wn);
        }
      }

      barrier(localMemFence);

      for(int j=0;j<p_Nq;++j;inner1){ 
        for(int i=0;i<p_Nq;++i;inner0){
          occaUnroll(p_Nq)
            for (int n=0;n<p_Nq;n++) {
              const dfloat Dr = s_D[n][i];
              const dfloat Ds = s_D[n][j];
              const dfloat Dt = s_D[k][n];
              r_div[k] += Dr*s_U[j][n];
              r_div[k] += Ds*s_V[n][i];
              r_div[n] += Dt*s_W[j][i];
            }
        }
      }

      barrier(localMemFence);
    } //k loop

    //write out
    for(int j=0;j<p_Nq;++j;inner1){ 
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
          for(int k=0;k<p_Nq;++k){
            const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

            const dlong id =e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
            divU[id] = -invJW*r_div[k];
          }
      }
    }
  }
}


#define surfaceTerms(sk,face,m, i, j)                                   \
{                                                                       \
  const dlong idM = vmapM[sk];                                          \
  const dlong idP = vmapP[sk];                                          \
                                                                        \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat nz = sgeo[sk*p_Nsgeo+p_NZID];                            \
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];                            \
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];                        \
                                                                        \
  const dfloat uM = U[idM+0*offset], vM = U[idM+1*offset], wM = U[idM+2*offset];\
        dfloat uP = U[idP+0*offset], vP = U[idP+1*offset], wP = U[idP+2*offset];\
                                                                        \
  const int bc = EToB[face+p_Nfaces*e];                                 \
  if(bc>0) {                                                            \
    insVelocityDirichletConditions3D(bc, time, x[idM], y[idM], z[idM], nx, ny, nz, uM, vM, wM, &uP, &vP, &wP);\
    uP = 2.f*uP-uM;                                                     \
    vP = 2.f*vP-vM;                                                     \
    wP = 2.f*wP-wM;                                                     \
  }                                                                     \
                                                                        \
  const dfloat sc = invWJ * sJ;                                         \
  s_fluxDiv[m][j][i] = 0.5f*sc*(nx*(uP+uM) + ny*(vP+vM) + nz*(wP+wM));  \
}

kernel void insDivergenceSurfaceHex3D(const dlong Nelements,
                                       const dfloat * restrict sgeo,
                                       const dfloat * restrict LIFTT,
                                       const dlong  * restrict vmapM,
                                       const dlong  * restrict vmapP,
                                       const int    * restrict EToB,
                                       const dfloat time,
                                       const dfloat * restrict x,
                                       const dfloat * restrict y,
                                       const dfloat * restrict z,
                                       const dlong offset,
                                       const dfloat * restrict U,
                                             dfloat * restrict divU){

  // for all elements
  for(dlong e=0;e<Nelements;e++;outer0){
    // shared storage for flux terms
    shared dfloat s_fluxDiv[2][p_Nq][p_Nq];

    exclusive dfloat r_div[p_Nq];

    // for all face nodes of all elements
    // face 0 & 5
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
        for(int k=0;k<p_Nq;++k){
          r_div[k] = 0.;
        }

        const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i + j*p_Nq;
        const dlong sk5 = e*p_Nfp*p_Nfaces + 5*p_Nfp + i + j*p_Nq;

        surfaceTerms(sk0,0,0,i,j);
        surfaceTerms(sk5,5,1,i,j);
      }
    }

    barrier(localMemFence);

    // face 0 & 5
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        //face 0
        r_div[0] += s_fluxDiv[0][j][i];

        //face 5
        r_div[p_Nq-1] += s_fluxDiv[1][j][i];
      }
    }

    barrier(localMemFence);    

    // face 1 & 3
    for(int k=0;k<p_Nq;++k;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + i + k*p_Nq;
        const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + i + k*p_Nq;

        surfaceTerms(sk1,1,0,i,k);
        surfaceTerms(sk3,3,1,i,k);
      }
    }

    barrier(localMemFence);

    // face 1 & 3
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        if (j==0) {//face 1
          occaUnroll(p_Nq)
          for (int k=0;k<p_Nq;k++) {
            r_div[k] += s_fluxDiv[0][k][i];
          }
        }
        if (j==p_Nq-1) {//face 3
          occaUnroll(p_Nq)
          for (int k=0;k<p_Nq;k++) {
            r_div[k] += s_fluxDiv[1][k][i];
          }
        }
      }
    }

    barrier(localMemFence);    

    // face 2 & 4
    for(int k=0;k<p_Nq;++k;inner1){
      for(int j=0;j<p_Nq;++j;inner0){
        const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + j + k*p_Nq;
        const dlong sk4 = e*p_Nfp*p_Nfaces + 4*p_Nfp + j + k*p_Nq;

        surfaceTerms(sk2,2,0,j,k);
        surfaceTerms(sk4,4,1,j,k);
      }
    }

    barrier(localMemFence);

    // face 2 & 4
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        if (i==p_Nq-1) {//face 2
          occaUnroll(p_Nq)
          for (int k=0;k<p_Nq;k++) {
            r_div[k] += s_fluxDiv[0][k][j];
          }
        }
        if (i==0) {//face 4
          occaUnroll(p_Nq)
          for (int k=0;k<p_Nq;k++) {
            r_div[k] += s_fluxDiv[1][k][j];
          }
        }
      }
    }

    barrier(localMemFence);   

    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
        for(int k=0;k<p_Nq;++k){
          const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

          divU[id] += r_div[k];
        }
      }
    }
  }
}
#undef surfaceTerms  
