
#define surfaceTerms(sk,face,i, j)                                         \
  {                                                                     \
  const dlong  idM = vmapM[sk];                                          \
  const dlong  idP = vmapP[sk];                                          \
                                                                        \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];                          \
  const dfloat hinv= sgeo[sk*p_Nsgeo+p_IHID];                           \
                                                                        \
  const dfloat4 gradqM = GU[idM+fld*fieldOffset];                                    \
        dfloat4 gradqP = GU[idP+fld*fieldOffset];                                          \
                                                                        \
  int bc = EToB[face+p_Nfaces*element];                                         \
  if(bc>0) {                                                            \
    dfloat4 UM[p_NVfields]; \
    dfloat4 UP[p_NVfields]; \
\
    for (int f=0;f<p_NVfields;f++) {\
      UM[f].x = 0.;               \
      UM[f].y = 0.;               \
      UM[f].z = 0.;               \
      UM[f].w = 0.;               \
    }\
    UM[fld] = gradqM;\
\
    insVelocityDirichletConditions2D(bc, time, x[idM], y[idM], nx, ny, UM[0].w, UM[1].w, &(UP[0].w), &(UP[1].w));\
    insVelocityNeumannConditions2D(bc, time, x[idM], y[idM], nx, ny, UM[0].x, UM[0].y, UM[1].x, UM[1].y, &(UP[0].x), &(UP[0].y), &(UP[1].x), &(UP[1].y));\
\
    gradqP = 2*UP[fld] - gradqM;\
  }                                                                     \
                                                                        \
  dfloat dq = gradqP.w - gradqM.w;                                      \
                                                                        \
  s_dqdx[j][i] += 0.5f*WsJ*nx*dq;                                       \
  s_dqdy[j][i] += 0.5f*WsJ*ny*dq;                                       \
                                                                        \
  s_Lq[j][i] -= 0.5f*WsJ*(nx*(gradqP.x+gradqM.x) +                    \
                            ny*(gradqP.y+gradqM.y) +                    \
                            tau*dq*hinv);                               \
  }

kernel void insDiffusionIpdgQuad2D(const dlong Nelements,
                                const dlong * restrict elementList,
                                const dlong * restrict vmapM,
                                const dlong * restrict vmapP,
                                const dfloat nu,
                                const dfloat tau,
                                const dfloat * restrict vgeo,
                                const dfloat * restrict sgeo,
                                const int   * restrict EToB,
                                const dfloat time,
                                const dfloat * restrict x,
                                const dfloat * restrict y,
                                const dfloat * restrict z,
                                const dlong fieldOffset,
                                const dfloat * restrict D,
                                const dfloat * restrict LIFTT,
                                const dfloat4 * restrict GU,
                                      dfloat  * restrict LU){

  for(dlong e=0;e<Nelements;++e;outer0){

    shared dfloat s_dqdx[p_Nq][p_Nq];
    shared dfloat s_dqdy[p_Nq][p_Nq];
    shared dfloat s_Lq[p_Nq][p_Nq];
    shared dfloat s_D[p_Nq][p_Nq];

    exclusive dlong element;

    occaUnroll(p_NVfields)
    for (int fld=0; fld<p_NVfields; fld++) {

      // loop over slabs
      for(int j=0;j<p_Nq;++j){
        for(int i=0;i<p_Nq;++i;inner0){
          element = elementList[e];

          // assume that this stores (p, px, py, pz) as dfloat4
          const dfloat4 gradqn = GU[element*p_Np+j*p_Nq+i + fld*fieldOffset];

          const dlong gid = i + j*p_Nq + element*p_Np*p_Nvgeo;
          dfloat JW = vgeo[gid + p_JWID*p_Np];

          s_dqdx[j][i] = JW*gradqn.x;
          s_dqdy[j][i] = JW*gradqn.y;
          s_Lq[j][i] = 0.0;

          s_D[j][i] = D[j*p_Nq+i];
        }
      }

      barrier(localMemFence);

      // loop over faces to add pseudo-gradient

      // face 0 & 2
      for(int i=0;i<p_Nq;++i;inner0){
        dlong sk0 = element*p_Nfp*p_Nfaces + 0*p_Nfp + i ;
        dlong sk2 = element*p_Nfp*p_Nfaces + 2*p_Nfp + i ;

        surfaceTerms(sk0,0,i,0);
        surfaceTerms(sk2,2,i,p_Nq-1);
      }

      barrier(localMemFence);

      // face 1 & 3
      for(int j=0;j<p_Nq;++j;inner0){
        dlong sk1 = element*p_Nfp*p_Nfaces + 1*p_Nfp + j;
        dlong sk3 = element*p_Nfp*p_Nfaces + 3*p_Nfp + j;

        surfaceTerms(sk1,1,p_Nq-1,j);
        surfaceTerms(sk3,3,0,j);
      }

      barrier(localMemFence);

      // prescale by geofacs
      for(int j=0;j<p_Nq;++j){
        for(int i=0;i<p_Nq;++i;inner0){
          // does need the nasty geofacs
          const dlong gid = i + j*p_Nq + element*p_Np*p_Nvgeo;

          const dfloat drdx = vgeo[gid + p_RXID*p_Np];
          const dfloat drdy = vgeo[gid + p_RYID*p_Np];
          const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
          const dfloat dsdy = vgeo[gid + p_SYID*p_Np];

          // chain rule (need to scale by wei
          const dfloat dqdx = s_dqdx[j][i];
          const dfloat dqdy = s_dqdy[j][i];

          s_dqdx[j][i] = (drdx*dqdx + drdy*dqdy);
          s_dqdy[j][i] = (dsdx*dqdx + dsdy*dqdy);
        }
      }

      barrier(localMemFence);

      // loop over slabs
      for(int j=0;j<p_Nq;++j){
        for(int i=0;i<p_Nq;++i;inner0){
          const dlong gid = element*p_Np*p_Nvgeo+ j*p_Nq +i;
          const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

          dfloat dr = 0, ds = 0;

          occaUnroll(p_Nq)
            for(int n=0;n<p_Nq;++n){
              dr += s_D[n][i]*s_dqdx[j][n];
              ds += s_D[n][j]*s_dqdy[n][i];
            }

          const dlong id = element*p_Np + j*p_Nq + i;
          LU[id+fld*fieldOffset] = -nu*invJW*(s_Lq[j][i]  + dr + ds);
        }
      }
    }
  }
}
