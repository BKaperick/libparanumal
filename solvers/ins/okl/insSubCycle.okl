
@kernel void insSubCycleRKUpdate(const dlong Nelements,
                                const dfloat dt,  
                                const dfloat rka,
                                const dfloat rkb,
                                const dlong offset,
                                @restrict const  dfloat *  rhsU,
                                @restrict dfloat  *  resU,
                                @restrict dfloat  *  U){

  // Low storage Runge Kutta time step update
  for(dlong e=0;e<Nelements;++e;@outer(0)){
    for(int n=0;n<p_Np;++n;@inner(0)){

      const dlong id = n + e*p_Np;

      #pragma unroll p_NVfields
      for (int i=0;i<p_NVfields;i++) {
        dfloat resu =  resU[id+i*offset];
        dfloat rhsu = -rhsU[id+i*offset];// -Nu
        dfloat u    =     U[id+i*offset];

        resu = rka*resu + dt*rhsu;
        u += rkb*resu;

        resU[id+i*offset] = resu;
        U[id+i*offset] = u;
      }
    }
  }
}


@kernel void insSubCycleExt(const dlong Nelements,
                           const int Nstages,
                           const dlong fieldOffset,
                           @restrict const  dfloat *  c,
                           @restrict const  dfloat *  U,
                                 @restrict dfloat *  Ue){

  // Low storage Runge Kutta time step update
  for(dlong e=0;e<Nelements;++e;@outer(0)){
    for(int n=0;n<p_Np;++n;@inner(0)){
      const dlong id = n+p_Np*e;
      
      #pragma unroll p_NVfields
      for (int i=0;i<p_NVfields;i++) {
        dfloat Un = 0.;

        for (int s=0;s<Nstages;s++) {
          const dlong idm = id+i*fieldOffset+s*p_NVfields*fieldOffset;
          const dfloat Um = U[idm];
          Un += c[s]*Um;
        }

        Ue[id+i*fieldOffset] = Un;
      }
    }
  }
}
