// Compute RHS Forcing i.e. 1/nu*(-grad(Pr) + sum(a_i x u_i)^(n-i) -sum(b_i x N(u)^(n-i))
kernel void insVelocityRhsARKHex3D(const dlong Nelements,
                                   const int stage,  
                                   const dfloat * restrict vgeo,
                                   const dfloat * restrict MM,
                                   const dfloat idt,
                                   const dfloat inu,
                                   const dfloat * restrict erkA,
                                   const dfloat * restrict irkA,
                                   const dfloat * restrict prkA,
                                   const dfloat * restrict prkAX,
                                   const dlong fieldOffset,
                                   const dfloat * restrict U,
                                   const dfloat * restrict NU,
                                   const dfloat * restrict LU,
                                   const dfloat * restrict GP,
                                         dfloat * restrict rhsU,
                                         dfloat * restrict rhsV,
                                         dfloat * restrict rhsW){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;outer0){

    for(int es=0;es<p_NblockV;++es;inner2){// for all elements in block
      for(int j=0;j<p_Nq;++j;inner1){ 
        for(int i=0;i<p_Nq;++i;inner0){
          const dlong e = eo+es; // element in block
          if(e<Nelements){
            occaUnroll(p_Nq)
            for(int k=0;k<p_Nq;++k){

              const dlong id = i + j*p_Nq + k*p_Nq*p_Nq + p_Np*e;
              const dlong gid = i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np*p_Nvgeo;
              const dfloat JW = vgeo[gid + p_JWID*p_Np];

              dfloat rhsUn = idt*U[id + 0*fieldOffset];
              dfloat rhsVn = idt*U[id + 1*fieldOffset];
              dfloat rhsWn = idt*U[id + 2*fieldOffset];

              dfloat prkAs = prkA[stage*(p_Nstages+1)+stage];
              for (int s=0;s<stage;s++) {
                // NU
                rhsUn -= erkA[stage*(p_Nstages+1)+s]*NU[id+0*fieldOffset + s*p_NVfields*fieldOffset];
                rhsVn -= erkA[stage*(p_Nstages+1)+s]*NU[id+1*fieldOffset + s*p_NVfields*fieldOffset];
                rhsWn -= erkA[stage*(p_Nstages+1)+s]*NU[id+2*fieldOffset + s*p_NVfields*fieldOffset];

                // LU
                rhsUn += irkA[stage*(p_Nstages+1)+s]*LU[id+0*fieldOffset + s*p_NVfields*fieldOffset];
                rhsVn += irkA[stage*(p_Nstages+1)+s]*LU[id+1*fieldOffset + s*p_NVfields*fieldOffset];
                rhsWn += irkA[stage*(p_Nstages+1)+s]*LU[id+2*fieldOffset + s*p_NVfields*fieldOffset];

                // GP
                dfloat prkAB = prkA[stage*(p_Nstages+1)+s]+prkAs*prkAX[stage*(p_Nstages+1)+s];
                rhsUn -= prkAB*GP[id+0*fieldOffset + s*p_NVfields*fieldOffset];
                rhsVn -= prkAB*GP[id+1*fieldOffset + s*p_NVfields*fieldOffset];
                rhsWn -= prkAB*GP[id+2*fieldOffset + s*p_NVfields*fieldOffset];
              }

              rhsU[id] = JW*inu/irkA[stage*(p_Nstages+1)+stage]*rhsUn;
              rhsV[id] = JW*inu/irkA[stage*(p_Nstages+1)+stage]*rhsVn;
              rhsW[id] = JW*inu/irkA[stage*(p_Nstages+1)+stage]*rhsWn;
            }
          }
        }
      }
    }
  }
}


// rhsU^s = MM*(U^n - \sum^s-1 ea_si N(U^i) + \sum^s-1 ia_si LU^i - \sum^s-1 pa_si GP^i)/ia_ss nu dt
kernel void insVelocityRhsEXTBDFHex3D(const dlong Nelements,
                                const dfloat * restrict vgeo,
                                const dfloat * restrict MM,
                                const dfloat idt,
                                const dfloat inu,
                                const dfloat * restrict extbdfA,
                                const dfloat * restrict extbdfB,
                                const dfloat * restrict extbdfC,
                                const dlong fieldOffset,
                                const dfloat * restrict U,
                                const dfloat * restrict NU,
                                const dfloat * restrict GP,
                                      dfloat * restrict rhsU,
                                      dfloat * restrict rhsV,
                                      dfloat * restrict rhsW){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;outer0){

    for(int es=0;es<p_NblockV;++es;inner2){// for all elements in block
      for(int j=0;j<p_Nq;++j;inner1){ 
        for(int i=0;i<p_Nq;++i;inner0){
          const dlong e = eo+es; // element in block
          if(e<Nelements){
            occaUnroll(p_Nq)
            for(int k=0;k<p_Nq;++k){
              const dlong id = i + j*p_Nq + k*p_Nq*p_Nq + p_Np*e;
              const dlong gid = i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np*p_Nvgeo;
              const dfloat JW = vgeo[gid + p_JWID*p_Np];

              dfloat rhsUn;
              dfloat rhsVn;
              dfloat rhsWn;

              if (p_SUBCYCLING) {
                //NU holds \hat{U} after subcycling
                const dfloat NUm = NU[id+0*fieldOffset];
                const dfloat NVm = NU[id+1*fieldOffset];
                const dfloat NWm = NU[id+2*fieldOffset];

                rhsUn = JW*inu*idt*NUm;
                rhsVn = JW*inu*idt*NVm;
                rhsWn = JW*inu*idt*NWm;

                for (int s=0;s<p_Nstages;s++) {
                  // GP
                  const dfloat GPx  = GP[id+0*fieldOffset+s*p_NVfields*fieldOffset];
                  const dfloat GPy  = GP[id+1*fieldOffset+s*p_NVfields*fieldOffset];
                  const dfloat GPz  = GP[id+2*fieldOffset+s*p_NVfields*fieldOffset];

                  rhsUn -= JW*inu*extbdfC[s]*GPx;
                  rhsVn -= JW*inu*extbdfC[s]*GPy;
                  rhsWn -= JW*inu*extbdfC[s]*GPz;
                }
              } else {
                rhsUn = 0.;
                rhsVn = 0.;
                rhsWn = 0.;

                for (int s=0;s<p_Nstages;s++) {
                  //U 
                  const dfloat Um  = U[id+0*fieldOffset+s*p_NVfields*fieldOffset];
                  const dfloat Vm  = U[id+1*fieldOffset+s*p_NVfields*fieldOffset];
                  const dfloat Wm  = U[id+2*fieldOffset+s*p_NVfields*fieldOffset];

                  // NU
                  const dfloat NUm  = NU[id+0*fieldOffset+s*p_NVfields*fieldOffset];
                  const dfloat NVm  = NU[id+1*fieldOffset+s*p_NVfields*fieldOffset];
                  const dfloat NWm  = NU[id+2*fieldOffset+s*p_NVfields*fieldOffset];

                  // GP
                  const dfloat GPx  = GP[id+0*fieldOffset+s*p_NVfields*fieldOffset];
                  const dfloat GPy  = GP[id+1*fieldOffset+s*p_NVfields*fieldOffset];
                  const dfloat GPz  = GP[id+2*fieldOffset+s*p_NVfields*fieldOffset];

                  rhsUn += JW*inu*(idt*extbdfB[s]*Um - extbdfA[s]*NUm - extbdfC[s]*GPx);
                  rhsVn += JW*inu*(idt*extbdfB[s]*Vm - extbdfA[s]*NVm - extbdfC[s]*GPy);
                  rhsWn += JW*inu*(idt*extbdfB[s]*Wm - extbdfA[s]*NWm - extbdfC[s]*GPz);
                }
              }

              rhsU[id] = rhsUn;
              rhsV[id] = rhsVn;
              rhsW[id] = rhsWn;
            }
          }
        }
      }
    }
  }
}
