// Compute Gradient in weak Form
kernel void insGradientVolumeHex3D(const dlong Nelements,
                                    const dfloat * restrict vgeo,
                                    const dfloat * restrict D,
                                    const dlong offset,
                                    const dfloat * restrict P,
                                          dfloat * restrict gradP){

  for(dlong e=0;e<Nelements;e++;outer0){  // for all elements

    shared dfloat s_P[p_Nq][p_Nq][p_Nq];
    shared dfloat s_D[p_Nq][p_Nq];

    for(int k=0;k<p_Nq;++k;inner2){ 
      for(int j=0;j<p_Nq;++j;inner1){ 
        for(int i=0;i<p_Nq;++i;inner0){    
          const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq+i;

          s_P[k][j][i]  = P[id];

          if (k==0)
            s_D[j][i] = D[j*p_Nq+i];
        }
      }
    }

    // Make sure all node data is loaded into shared
    barrier(localMemFence);

    for(int k=0;k<p_Nq;++k;inner2){ 
      for(int j=0;j<p_Nq;++j;inner1){ 
        for(int i=0;i<p_Nq;++i;inner0){  
          const dlong gid = e*p_Np*p_Nvgeo +k*p_Nq*p_Nq +j*p_Nq +i;
          const dfloat drdx = vgeo[gid + p_RXID*p_Np];
          const dfloat drdy = vgeo[gid + p_RYID*p_Np];
          const dfloat drdz = vgeo[gid + p_RZID*p_Np];
          const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
          const dfloat dsdy = vgeo[gid + p_SYID*p_Np];
          const dfloat dsdz = vgeo[gid + p_SZID*p_Np];
          const dfloat dtdx = vgeo[gid + p_TXID*p_Np];
          const dfloat dtdy = vgeo[gid + p_TYID*p_Np];
          const dfloat dtdz = vgeo[gid + p_TZID*p_Np];

          // compute 'r' and 's' derivatives of (q_m) at node n
          dfloat dpdr  = 0.f, dpds  = 0.f, dpdt  = 0.f;

          occaUnroll(p_Nq)
            for(int n=0;n<p_Nq;++n){
              const dfloat Dr = s_D[i][n];
              const dfloat Ds = s_D[j][n];
              const dfloat Dt = s_D[k][n];

              dpdr += Dr*s_P[k][j][n];
              dpds += Ds*s_P[k][n][i];
              dpdt += Dt*s_P[n][j][i];
            }

          const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
          gradP[id+0*offset] = drdx*dpdr + dsdx*dpds + dtdx*dpdt;
          gradP[id+1*offset] = drdy*dpdr + dsdy*dpds + dtdy*dpdt;
          gradP[id+2*offset] = drdz*dpdr + dsdz*dpds + dtdz*dpdt;
        }
      }
    }
  }  
}

// taken from the lines if(solverID==1){ ..  }
#if 0
   /* dfloat PPo = 0.f; */                                              \
   /* dfloat to  = time-dt; */                                          \
   /* insGradientBoundaryConditions2D(bc,to, x[idM], y[idM], nx, ny, PM, &PPo); */  \
   /* PP = PP-c0*PPo; */                                                \
#endif

#define surfaceTerms(sk,face,m, i, j)                                   \
{                                                                       \
  const dlong idM = vmapM[sk];                                          \
  const dlong idP = vmapP[sk];                                          \
                                                                        \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat nz = sgeo[sk*p_Nsgeo+p_NZID];                            \
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];                            \
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];                        \
                                                                        \
  const dfloat  PM = P[idM];                                            \
        dfloat  PP = P[idP];                                            \
                                                                        \
  const int bc = EToB[face+p_Nfaces*e];                                 \
  if(bc>0) {                                                            \
    insPressureDirichletConditions3D(bc, time, x[idM], y[idM], z[idM], nx, ny, nz, PM, &PP);\
    PP = 2.f*PP - PM;                                                   \
  }                                                                     \
                                                                        \
  const dfloat sc = invWJ * sJ;                                         \
  s_fluxPx[m][j][i]  = sc*(.5f*nx*(PP-PM));                             \
  s_fluxPy[m][j][i]  = sc*(.5f*ny*(PP-PM));                             \
  s_fluxPz[m][j][i]  = sc*(.5f*nz*(PP-PM));                             \
}

kernel void insGradientSurfaceHex3D(const dlong Nelements,
                                     const dfloat * restrict sgeo,
                                     const dfloat * restrict LIFTT,
                                     const dlong  * restrict vmapM,
                                     const dlong  * restrict vmapP,
                                     const int    * restrict EToB,
                                     const dfloat * restrict x,
                                     const dfloat * restrict y,
                                     const dfloat * restrict z,
                                     const dfloat time,
                                     const dlong offset,
                                     const dfloat * restrict P,
                                           dfloat * restrict gradP){

  // for all elements
  for(dlong e=0;e<Nelements;e++;outer0){
    // shared storage for flux terms
    shared dfloat s_fluxPx[2][p_Nq][p_Nq];
    shared dfloat s_fluxPy[2][p_Nq][p_Nq];
    shared dfloat s_fluxPz[2][p_Nq][p_Nq];

    exclusive dfloat r_Px[p_Nq], r_Py[p_Nq], r_Pz[p_Nq];

    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
        for(int k=0;k<p_Nq;++k){
          r_Px[k] = 0.;
          r_Py[k] = 0.;
          r_Pz[k] = 0.;
        }
      }
    }

    barrier(localMemFence);

    // for all face nodes of all elements
    // face 0 & 5
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i + j*p_Nq;
        const dlong sk5 = e*p_Nfp*p_Nfaces + 5*p_Nfp + i + j*p_Nq;

        surfaceTerms(sk0,0,0,i,j);
        surfaceTerms(sk5,5,1,i,j);
      }
    }

    barrier(localMemFence);

    // face 0 & 5
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        //face 0
        r_Px[0] += s_fluxPx[0][j][i];
        r_Py[0] += s_fluxPy[0][j][i];
        r_Pz[0] += s_fluxPz[0][j][i];

        //face 5
        r_Px[p_Nq-1] += s_fluxPx[1][j][i];
        r_Py[p_Nq-1] += s_fluxPy[1][j][i];
        r_Pz[p_Nq-1] += s_fluxPz[1][j][i];
      }
    }

    barrier(localMemFence);    

    // face 1 & 3
    for(int k=0;k<p_Nq;++k;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + i + k*p_Nq;
        const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + i + k*p_Nq;

        surfaceTerms(sk1,1,0,i,k);
        surfaceTerms(sk3,3,1,i,k);
      }
    }

    barrier(localMemFence);

    // face 1 & 3
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        if (j==0) {//face 1
          occaUnroll(p_Nq)
          for (int n=0;n<p_Nq;n++) {
            r_Px[n] += s_fluxPx[0][n][i];
            r_Py[n] += s_fluxPy[0][n][i];
            r_Pz[n] += s_fluxPz[0][n][i];
          }
        }
        if (j==p_Nq-1) {//face 3
          occaUnroll(p_Nq)
          for (int n=0;n<p_Nq;n++) {
            r_Px[n] += s_fluxPx[1][n][i];
            r_Py[n] += s_fluxPy[1][n][i];
            r_Pz[n] += s_fluxPz[1][n][i];
          }
        }
      }
    }

    barrier(localMemFence);    

    // face 2 & 4
    for(int k=0;k<p_Nq;++k;inner1){
      for(int j=0;j<p_Nq;++j;inner0){
        const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + j + k*p_Nq;
        const dlong sk4 = e*p_Nfp*p_Nfaces + 4*p_Nfp + j + k*p_Nq;

        surfaceTerms(sk2,2,0,j,k);
        surfaceTerms(sk4,4,1,j,k);
      }
    }

    barrier(localMemFence);

    // face 2 & 4
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        if (i==p_Nq-1) {//face 2
          occaUnroll(p_Nq)
          for (int n=0;n<p_Nq;n++) {
            r_Px[n] += s_fluxPx[0][n][j];
            r_Py[n] += s_fluxPy[0][n][j];
            r_Pz[n] += s_fluxPz[0][n][j];
          }
        }
        if (i==0) {//face 4
          occaUnroll(p_Nq)
          for (int n=0;n<p_Nq;n++) {
            r_Px[n] += s_fluxPx[1][n][j];
            r_Py[n] += s_fluxPy[1][n][j];
            r_Pz[n] += s_fluxPz[1][n][j];
          }
        }
      }
    }

    barrier(localMemFence);   

    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
        for(int k=0;k<p_Nq;++k){
          const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

          gradP[id+0*offset] += r_Px[k];
          gradP[id+1*offset] += r_Py[k];
          gradP[id+2*offset] += r_Pz[k];
        }
      }
    }
  }
}
#undef surfaceTerms
