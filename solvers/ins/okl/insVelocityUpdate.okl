// U^s = Uhat - dt * GP^s + dt*\sum^s-1 pa_si GP^i
kernel void insVelocityUpdate(const dlong Nelements,
                              const int stage,
                              const int ARKswitch,
                              const int finalStageSwitch,
                              const dfloat dt,
                              const dlong fieldOffset,
                              const dfloat * restrict prkA,
                              const dfloat * restrict prkAX,
                              const dfloat * restrict rkGP,
                              const dfloat * restrict GP,
                                    dfloat * restrict rkU){

  for(dlong e=0;e<Nelements;++e;outer0){
    for(int n=0;n<p_Np;++n;inner0){
      const dlong id  = n + e*p_Np;

      for (int i=0;i<p_NVfields;i++) {
        dfloat Un;
        if (ARKswitch) {

          dfloat prkAs;
          if (finalStageSwitch)
            prkAs = prkA[stage];  
          else
            prkAs = prkA[stage*(p_Nstages+1)+stage];

          Un = rkU[id+i*fieldOffset] - dt*prkAs*rkGP[id+i*fieldOffset];
          for (int s=0;s<stage;s++) {
            dfloat prkAB;
            if (finalStageSwitch)
              prkAB = prkAs*prkAX[s];
            else
              prkAB = prkAs*prkAX[stage*(p_Nstages+1)+s];

            Un += dt*prkAB*GP[id+i*fieldOffset+s*p_NVfields*fieldOffset];
          }

        } else {
          Un = rkU[id+i*fieldOffset] - dt*rkGP[id+i*fieldOffset];

          for (int s=0;s<stage;s++) {
            dfloat prkAn = prkA[s];
            Un += dt*prkAn*GP[id+i*fieldOffset+s*p_NVfields*fieldOffset];
          }
        }

        rkU[id+i*fieldOffset] = Un;
      }
    }
  }
}


// U^s = Uhat - dt * GP^s + dt*\sum^s-1 pa_si GP^i
kernel void insVelocityRkUpdate(const dlong Nelements,
                              const int stage,
                              const dfloat dt,
                              const dlong fieldOffset,
                              const dfloat * restrict erkB,
                              const dfloat * restrict irkB,
                              const dfloat * restrict prkB,
                              const dfloat * restrict prkBX,
                              const dfloat * restrict U,
                              const dfloat * restrict NU,
                              const dfloat * restrict LU,
                              const dfloat * restrict GP,
                                    dfloat * restrict rkU){

  for(dlong e=0;e<Nelements;++e;outer0){
    for(int n=0;n<p_Np;++n;inner0){
      const dlong id  = n + e*p_Np;

      dfloat prkBs = prkB[stage];
      for (int i=0;i<p_NVfields;i++) {
        
        dfloat Un = U[id+i*fieldOffset];
        
        for (int s=0;s<stage;s++) {
          // NU
          Un -= dt*erkB[s]*NU[id+i*fieldOffset + s*p_NVfields*fieldOffset];

          // LU
          Un += dt*irkB[s]*LU[id+i*fieldOffset + s*p_NVfields*fieldOffset];

          // GP
          dfloat prkAB = prkB[s]+prkBs*prkBX[s];
          Un -= dt*prkAB*GP[id+i*fieldOffset + s*p_NVfields*fieldOffset];
        }

        rkU[id+i*fieldOffset] = Un;
      }
    }
  }
}