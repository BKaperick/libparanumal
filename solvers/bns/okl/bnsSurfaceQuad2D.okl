#define p_isq12 (1.f/occaSqrt(12.f))
#define p_isq6 (1.f/occaSqrt(6.f))
#define PML_ENABLED 1

void upwind1D(const dfloat nx, const dfloat ny,
              const dfloat q1M, const dfloat q2M, const dfloat q3M,
        const dfloat q4M, const dfloat q5M, const dfloat q6M,
              const dfloat q1B, const dfloat q2B, const dfloat q3B,
        const dfloat q4B, const dfloat q5B, const dfloat q6B,
              dfloat * restrict q1P, dfloat * restrict q2P, dfloat * restrict q3P,
        dfloat * restrict q4P, dfloat * restrict q5P, dfloat * restrict q6P){
  
  *q1P = 0.5f*(q1B + q1M) - p_isq12*(nx*(q2B-q2M) + ny*(q3B-q3M));
  *q2P = 0.5f*(q2B + q2M) - p_isq12*(nx*(q1B-q1M)) - p_isq6*nx*(q5B-q5M) - 0.5f*ny*(q4B-q4M);
  *q3P = 0.5f*(q3B + q3M) - p_isq12*(ny*(q1B-q1M)) - p_isq6*ny*(q6B-q6M) - 0.5f*nx*(q4B-q4M);
  *q4P = 0.5f*(q4B + q4M) - 0.5f*nx*(q3B-q3M) - 0.5f*ny*(q2B-q2M);
  *q5P = 0.5f*(q5B + q5M) - p_isq6*nx*(q2B-q2M);
  *q6P = 0.5f*(q6B + q6M) - p_isq6*ny*(q3B-q3M);
  
}



// void boundaryConditions2D(const int bc,
//         const dfloat  t, const dfloat  x, const dfloat  y,
//         const dfloat  nx, const dfloat  ny,
//         const dfloat ramp,
//         const dfloat  q1M, const dfloat  q2M, const dfloat  q3M,
//         const dfloat  q4M, const dfloat  q5M, const dfloat  q6M,
//         dfloat * restrict q1B, dfloat * restrict q2B, dfloat * restrict q3B,
//         dfloat * restrict q4B, dfloat * restrict q5B, dfloat * restrict q6B){
// #if PML_ENABLED
//   if (1 == bc)       // Wall
//   {
//     *q1B =  q1M; 
//     *q2B = -q2M;
//     *q3B = -q3M;
//     *q4B =  q4M;
//     *q5B =  q5M;
//     *q6B =  q6M;
//   }

//    else if (bc==2)   // NBN: testing inflow
//   { 
//     *q1B = 2.f*p_q1bar - q1M; 
//     *q2B = 2.f*ramp*p_q2bar - q2M; 
//     *q3B = 2.f*ramp*p_q3bar - q3M; 
//     *q4B = 2.f*ramp*ramp*p_q4bar - q4M;
//     *q5B = 2.f*ramp*ramp*p_q5bar - q5M;
//     *q6B = 2.f*ramp*ramp*p_q6bar - q6M;
//   }

//    else if (bc==3)   // NBN: testing inflow
//   { 

//     *q1B = 2.f*p_q1bar - q1M; 
//     *q2B = 2.f*ramp*p_q2bar - q2M; 
//     *q3B = 2.f*ramp*p_q3bar - q3M; 
//     *q4B = 2.f*ramp*ramp*p_q4bar - q4M;
//     *q5B = 2.f*ramp*ramp*p_q5bar - q5M;
//     *q6B = 2.f*ramp*ramp*p_q6bar - q6M;
//   }

//    else if (bc==4)   // NBN: testing inflow
//   { 

//     *q1B = 2.f*p_q1bar - q1M; 
//     *q2B = 2.f*ramp*p_q2bar - q2M; 
//     *q3B = 2.f*ramp*p_q3bar - q3M; 
//     *q4B = 2.f*ramp*ramp*p_q4bar - q4M;
//     *q5B = 2.f*ramp*ramp*p_q5bar - q5M;
//     *q6B = 2.f*ramp*ramp*p_q6bar - q6M;
//   }


 
//  #else
//   if(bc==1){ // Wall 
//     *q1B = q1M; 
//     *q2B = -q2M;
//     *q3B = -q3M;
//     *q4B = q4M;
//     *q5B = q5M;
//     *q6B = q6M;
//   }
//   if(bc==2){ // Inflow
//     *q1B = q1M; 
//     *q2B = 1.f/p_sqrtRT; //Uniform Velocity
//     //*q2B = (1.0f - y*y)/p_sqrtRT; //Parabolic
//     *q3B = 0.f;
//     *q4B = q4M;
//     *q5B = q5M;
//     *q6B = q6M;
//   }
//   if(bc==3){ // Outflow // do nothing
//     *q1B = 1.0f; // Define atleast one parameter
//     // *q2B = q2M;
//     // *q3B = q3M;
//     // *q4B = q4M;
//     // *q5B = q5M;
//     // *q6B = q6M;
//   }

//   if(bc==4){ // Slip for q2/ no slip for q3
//     *q1B = q1M; 
//     *q2B = q2M; // Slip for u
//     *q3B = -q3M; // v = 0
//     *q4B = q4M;
//     *q5B = q5M;
//     *q6B = q6M;
//   }


//   #endif
  
// }

#define surfaceTerms(sk,face,i, j)                                      \
  {                                                                     \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];                            \
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];                        \
                                                                        \
  const dlong  idM = vmapM[sk];                                         \
  const dlong  idP = vmapP[sk];                                         \
                                                                        \
  const dlong eM = e;                                                   \
  const dlong eP = idP/p_Np;                                            \
  const int vidM = idM%p_Np;                                            \
  const int vidP = idP%p_Np;                                            \
                                                                        \
  const dlong qidM = eM*p_Np*p_Nfields + vidM;                          \
  const dlong qidP = eP*p_Np*p_Nfields + vidP;                          \
                                                                        \
                                                                        \
  dfloat q1M = q[qidM + 0*p_Np], q1P = q[qidP + 0*p_Np];                \
  dfloat q2M = q[qidM + 1*p_Np], q2P = q[qidP + 1*p_Np];                \
  dfloat q3M = q[qidM + 2*p_Np], q3P = q[qidP + 2*p_Np];                \
  dfloat q4M = q[qidM + 3*p_Np], q4P = q[qidP + 3*p_Np];                \
  dfloat q5M = q[qidM + 4*p_Np], q5P = q[qidP + 4*p_Np];                \
  dfloat q6M = q[qidM + 5*p_Np], q6P = q[qidP + 5*p_Np];                \
                                                                        \
                                                                        \
  const int bc = EToB[face+p_Nfaces*e];                                 \
  if(bc>0){                                                             \
    if(p_PML)                                                           \
      boundaryConditionsPML2D(bc, time, x[idM], y[idM], nx, ny, ramp, q1M, q2M, q3M, q4M, q5M, q6M, &q1P, &q2P, &q3P, &q4P, &q5P, &q6P)\
    else                                                                \
      boundaryConditions2D(bc, time, x[idM], y[idM], nx, ny, ramp, q1M, q2M, q3M, q4M, q5M, q6M, &q1P, &q2P, &q3P, &q4P, &q5P, &q6P)\
  }                                                                     \
                                                                        \
  dfloat q1U, q2U, q3U, q4U, q5U, q6U;                                  \
  upwind1D(nx, ny, q1M, q2M, q3M, q4M, q5M, q6M, q1P, q2P, q3P, q4P, q5P, q6P, &q1U, &q2U, &q3U, &q4U, &q5U, &q6U); \
                                                                        \
  const dfloat sc = invWJ*sJ;                                           \
                                                                        \
  dfloat dq1, dq2, dq3, dq4, dq5, dq6;                                  \
  dq1 = q1U-q1M;                                                        \
  dq2 = q2U-q2M;                                                        \
  dq3 = q3U-q3M;                                                        \
  dq4 = q4U-q4M;                                                        \
  dq5 = q5U-q5M;                                                        \
  dq6 = q6U-q6M;                                                        \
                                                                        \
  s_fluxq[es][0][j][i] += sc*p_sqrtRT*(-nx*dq2-ny*dq3);                  \
  s_fluxq[es][1][j][i] += sc*p_sqrtRT*(-nx*(dq1+p_sqrt2*dq5)-ny*dq4);    \
  s_fluxq[es][2][j][i] += sc*p_sqrtRT*(-nx*dq4-ny*(dq1+p_sqrt2*dq6));    \
  s_fluxq[es][3][j][i] += sc*p_sqrtRT*(-nx*dq3-ny*dq2);                  \
  s_fluxq[es][4][j][i] += sc*p_sqrtRT*(-nx*p_sqrt2*dq2);                 \
  s_fluxq[es][5][j][i] += sc*p_sqrtRT*(-ny*p_sqrt2*dq3);                 \
}


#define surfaceTermsPml(sk,face,i,j)                                    \
  {                                                                     \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];                            \
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];                        \
                                                                        \
  const dlong  idM = vmapM[sk];                                         \
  const dlong  idP = vmapP[sk];                                         \
                                                                        \
  const dlong eM = e;                                                   \
  const dlong eP = idP/p_Np;                                            \
  const int vidM = idM%p_Np;                                            \
  const int vidP = idP%p_Np;                                            \
                                                                        \
  const dlong qidM = eM*p_Np*p_Nfields + vidM;                          \
  const dlong qidP = eP*p_Np*p_Nfields + vidP;                          \
                                                                        \
                                                                        \
  dfloat q1M = q[qidM + 0*p_Np], q1P = q[qidP + 0*p_Np];                \
  dfloat q2M = q[qidM + 1*p_Np], q2P = q[qidP + 1*p_Np];                \
  dfloat q3M = q[qidM + 2*p_Np], q3P = q[qidP + 2*p_Np];                \
  dfloat q4M = q[qidM + 3*p_Np], q4P = q[qidP + 3*p_Np];                \
  dfloat q5M = q[qidM + 4*p_Np], q5P = q[qidP + 4*p_Np];                \
  dfloat q6M = q[qidM + 5*p_Np], q6P = q[qidP + 5*p_Np];                \
                                                                        \
                                                                        \
  const int bc = EToB[face+p_Nfaces*e];                                 \
  if(bc>0){                                                             \
  boundaryConditionsPML2D(bc, time, x[idM], y[idM], nx, ny, ramp, q1M, q2M, q3M, q4M, q5M, q6M, &q1P, &q2P, &q3P, &q4P, &q5P, &q6P);\
  }                                                                     \
                                                                        \
  dfloat q1U, q2U, q3U, q4U, q5U, q6U;                                  \
  upwind1D(nx, ny, q1M, q2M, q3M, q4M, q5M, q6M, q1P, q2P, q3P, q4P, q5P, q6P, &q1U, &q2U, &q3U, &q4U, &q5U, &q6U); \
                                                                        \
  const dfloat sc = invWJ*sJ;                                           \
                                                                        \
  dfloat dq1, dq2, dq3, dq4, dq5, dq6;                                  \
  dq1 = q1U-q1M;                                                        \
  dq2 = q2U-q2M;                                                        \
  dq3 = q3U-q3M;                                                        \
  dq4 = q4U-q4M;                                                        \
  dq5 = q5U-q5M;                                                        \
  dq6 = q6U-q6M;                                                        \
                                                                        \
  s_Aqx[es][0][j][i] += -p_sqrtRT*sc*nx*(dq2);                           \
  s_Aqx[es][1][j][i] += -p_sqrtRT*sc*nx*(dq1+p_sqrt2*dq5);               \
  s_Aqx[es][2][j][i] += -p_sqrtRT*sc*nx*(dq4);                           \
  s_Aqx[es][3][j][i] += -p_sqrtRT*sc*nx*(dq3);                           \
  s_Aqx[es][4][j][i] += -p_sqrtRT*sc*nx*(p_sqrt2*dq2);                   \
  s_Aqx[es][5][j][i] +=  0.f;                                            \
                                                                        \
  s_Bqy[es][0][j][i] += -p_sqrtRT*sc*ny*(dq3);                           \
  s_Bqy[es][1][j][i] += -p_sqrtRT*sc*ny*(dq4);                           \
  s_Bqy[es][2][j][i] += -p_sqrtRT*sc*ny*(dq1+p_sqrt2*dq6);               \
  s_Bqy[es][3][j][i] += -p_sqrtRT*sc*ny*(dq2);                           \
  s_Bqy[es][4][j][i] +=  0.f;                                            \
  s_Bqy[es][5][j][i] += -p_sqrtRT*sc*ny*(p_sqrt2*dq3);                   \
}




#define surfaceMRTerms(sk,face,i, j)                                    \
  {                                                                     \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];                            \
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];                        \
                                                                        \
  const dlong eM   = e;                                                 \
  const dlong idP  = mapP[sk];                                          \
  const dlong eP = idP/(p_Nfp*p_Nfaces);                                \
  const int fidM = sk%(p_Nfp*p_Nfaces);                                 \
  const int fidP = idP%(p_Nfp*p_Nfaces);                                \
                                                                        \
  const dlong qidM = eM*p_Nfp*p_Nfaces*p_Nfields + fidM;                \
  const dlong qidP = eP*p_Nfp*p_Nfaces*p_Nfields + fidP;                \
                                                                        \
                                                                        \
  dfloat q1M = fQM[qidM + 0*p_Nfp*p_Nfaces], q1P = fQM[qidP + 0*p_Nfp*p_Nfaces]; \
  dfloat q2M = fQM[qidM + 1*p_Nfp*p_Nfaces], q2P = fQM[qidP + 1*p_Nfp*p_Nfaces]; \
  dfloat q3M = fQM[qidM + 2*p_Nfp*p_Nfaces], q3P = fQM[qidP + 2*p_Nfp*p_Nfaces]; \
  dfloat q4M = fQM[qidM + 3*p_Nfp*p_Nfaces], q4P = fQM[qidP + 3*p_Nfp*p_Nfaces]; \
  dfloat q5M = fQM[qidM + 4*p_Nfp*p_Nfaces], q5P = fQM[qidP + 4*p_Nfp*p_Nfaces]; \
  dfloat q6M = fQM[qidM + 5*p_Nfp*p_Nfaces], q6P = fQM[qidP + 5*p_Nfp*p_Nfaces]; \
                                                                        \
                                                                        \
  const int bc = EToB[face+p_Nfaces*e];                                 \
  if(bc>0){                                                             \
  const dlong idB = vmapM[sk];                                         \
  if(p_PML)                                                           \
    boundaryConditionsPML2D(bc, time, x[idB], y[idB], nx, ny, ramp, q1M, q2M, q3M, q4M, q5M, q6M, &q1P, &q2P, &q3P, &q4P, &q5P, &q6P)\
  else                                                                \
    boundaryConditions2D(bc, time, x[idB], y[idB], nx, ny, ramp, q1M, q2M, q3M, q4M, q5M, q6M, &q1P, &q2P, &q3P, &q4P, &q5P, &q6P)\
  }                                                                       \
                                                                        \
  dfloat q1U, q2U, q3U, q4U, q5U, q6U;                                  \
  upwind1D(nx, ny, q1M, q2M, q3M, q4M, q5M, q6M, q1P, q2P, q3P, q4P, q5P, q6P, &q1U, &q2U, &q3U, &q4U, &q5U, &q6U); \
                                                                        \
  const dfloat sc = invWJ*sJ;                                           \
                                                                        \
  dfloat dq1, dq2, dq3, dq4, dq5, dq6;                                  \
  dq1 = q1U-q1M;                                                        \
  dq2 = q2U-q2M;                                                        \
  dq3 = q3U-q3M;                                                        \
  dq4 = q4U-q4M;                                                        \
  dq5 = q5U-q5M;                                                        \
  dq6 = q6U-q6M;                                                        \
                                                                        \
  s_fluxq[es][0][j][i] += sc*p_sqrtRT*(-nx*dq2-ny*dq3);                  \
  s_fluxq[es][1][j][i] += sc*p_sqrtRT*(-nx*(dq1+p_sqrt2*dq5)-ny*dq4);    \
  s_fluxq[es][2][j][i] += sc*p_sqrtRT*(-nx*dq4-ny*(dq1+p_sqrt2*dq6));    \
  s_fluxq[es][3][j][i] += sc*p_sqrtRT*(-nx*dq3-ny*dq2);                  \
  s_fluxq[es][4][j][i] += sc*p_sqrtRT*(-nx*p_sqrt2*dq2);                 \
  s_fluxq[es][5][j][i] += sc*p_sqrtRT*(-ny*p_sqrt2*dq3);                 \
}


#define surfaceMRTermsPml(sk,face,i,j)                                  \
  {                                                                     \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];                            \
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];                        \
                                                                        \
  const dlong eM   = e;                                                 \
  const dlong idP  = mapP[sk];                                          \
  const dlong eP   = idP/(p_Nfp*p_Nfaces);                              \
  const int fidM   = sk%(p_Nfp*p_Nfaces);                               \
  const int fidP   = idP%(p_Nfp*p_Nfaces);                              \
                                                                        \
  const dlong qidM = eM*p_Nfp*p_Nfaces*p_Nfields + fidM;                \
  const dlong qidP = eP*p_Nfp*p_Nfaces*p_Nfields + fidP;                \
                                                                        \
                                                                        \
  dfloat q1M = fQM[qidM + 0*p_Nfp*p_Nfaces], q1P = fQM[qidP + 0*p_Nfp*p_Nfaces]; \
  dfloat q2M = fQM[qidM + 1*p_Nfp*p_Nfaces], q2P = fQM[qidP + 1*p_Nfp*p_Nfaces]; \
  dfloat q3M = fQM[qidM + 2*p_Nfp*p_Nfaces], q3P = fQM[qidP + 2*p_Nfp*p_Nfaces]; \
  dfloat q4M = fQM[qidM + 3*p_Nfp*p_Nfaces], q4P = fQM[qidP + 3*p_Nfp*p_Nfaces]; \
  dfloat q5M = fQM[qidM + 4*p_Nfp*p_Nfaces], q5P = fQM[qidP + 4*p_Nfp*p_Nfaces]; \
  dfloat q6M = fQM[qidM + 5*p_Nfp*p_Nfaces], q6P = fQM[qidP + 5*p_Nfp*p_Nfaces]; \
                                                                        \
                                                                        \
  const int bc = EToB[face+p_Nfaces*e];                                 \
  if(bc>0){                                                             \
    const dlong idB = vmapM[sk];                                         \
    boundaryConditionsPML2D(bc, time, x[idB], y[idB], nx, ny, ramp, q1M, q2M, q3M, q4M, q5M, q6M, &q1P, &q2P, &q3P, &q4P, &q5P, &q6P)\
  }                                                                       \
                                                                        \
  dfloat q1U, q2U, q3U, q4U, q5U, q6U;                                  \
  upwind1D(nx, ny, q1M, q2M, q3M, q4M, q5M, q6M, q1P, q2P, q3P, q4P, q5P, q6P, &q1U, &q2U, &q3U, &q4U, &q5U, &q6U); \
                                                                        \
  const dfloat sc = invWJ*sJ;                                           \
                                                                        \
  dfloat dq1, dq2, dq3, dq4, dq5, dq6;                                  \
  dq1 = q1U-q1M;                                                        \
  dq2 = q2U-q2M;                                                        \
  dq3 = q3U-q3M;                                                        \
  dq4 = q4U-q4M;                                                        \
  dq5 = q5U-q5M;                                                        \
  dq6 = q6U-q6M;                                                        \
                                                                        \
  s_Aqx[es][0][j][i] += -p_sqrtRT*sc*nx*(dq2);                           \
  s_Aqx[es][1][j][i] += -p_sqrtRT*sc*nx*(dq1+p_sqrt2*dq5);               \
  s_Aqx[es][2][j][i] += -p_sqrtRT*sc*nx*(dq4);                           \
  s_Aqx[es][3][j][i] += -p_sqrtRT*sc*nx*(dq3);                           \
  s_Aqx[es][4][j][i] += -p_sqrtRT*sc*nx*(p_sqrt2*dq2);                   \
  s_Aqx[es][5][j][i] +=  0.f;                                            \
                                                                         \
  s_Bqy[es][0][j][i] += -p_sqrtRT*sc*ny*(dq3);                           \
  s_Bqy[es][1][j][i] += -p_sqrtRT*sc*ny*(dq4);                           \
  s_Bqy[es][2][j][i] += -p_sqrtRT*sc*ny*(dq1+p_sqrt2*dq6);               \
  s_Bqy[es][3][j][i] += -p_sqrtRT*sc*ny*(dq2);                           \
  s_Bqy[es][4][j][i] +=  0.f;                                            \
  s_Bqy[es][5][j][i] += -p_sqrtRT*sc*ny*(p_sqrt2*dq3);                   \
}



// This kernel uses Upwind flux 
kernel void bnsSurfaceQuad2D(const dlong Nelements,
                           const dlong * restrict elementIds,
                           const dfloat time,
                           const dfloat ramp,
                           const dfloat * restrict sgeo,
                           const dfloat * restrict LIFTT,
                           const dlong   * restrict vmapM,
                           const dlong   * restrict vmapP,
                           const int   * restrict EToB,
                           const dfloat * restrict x,
                           const dfloat * restrict y,
                           const dfloat * restrict z,
                           const dfloat * restrict q,
                                 dfloat * restrict rhsq){
  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;outer0){

    // shared storage for flux terms
    shared dfloat s_fluxq[p_NblockS][p_Nfields][p_Nq][p_Nq];

    for(int es=0;es<p_NblockS;++es;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
        for(int j=0;j<p_Nq;++j){
          occaUnroll(p_Nfields)
          for(int fld=0; fld<p_Nfields; fld++)
            s_fluxq[es][fld][j][i] = 0.f;
        }
      }
    }

    barrier(localMemFence);

    // face 0 & 2
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong et = eo + es;
        if(et<Nelements){
          const dlong   e = elementIds[et];
          const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i;
          const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i;

          surfaceTerms(sk0,0,i,0     );
          surfaceTerms(sk2,2,i,p_Nq-1);
        }
      }
    }

    barrier(localMemFence);

    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int j=0;j<p_Nq;++j;inner0){
        const dlong et = eo + es;
        if(et<Nelements){
          const dlong   e = elementIds[et];          
          const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
          const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

          surfaceTerms(sk1,1,p_Nq-1,j);
          surfaceTerms(sk3,3,0     ,j);
        }
      }
    }

    barrier(localMemFence);

    // 
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong et = eo + es;
        if(et<Nelements){
          occaUnroll(p_Nq)
          for(int j=0;j<p_Nq;++j){
            const dlong   e   = elementIds[et];
            const dlong rhsId = e*p_Np*p_Nfields+j*p_Nq+i;
            for(int fld=0; fld<p_Nfields; fld++){
              rhsq[rhsId+fld*p_Np] += s_fluxq[es][fld][j][i];
            }
          }
        }
      }
    }
  }
}



// This kernel uses upwind flux
kernel void bnsPmlSurfaceQuad2D(const dlong pmlNelements,
                        const dlong   * restrict pmlElementIds,
                        const dlong   * restrict pmlIds,
                        const dfloat time,
                        const dfloat ramp,
                        const dfloat * restrict sgeo,
                        const dfloat * restrict LIFTT,
                        const dlong  * restrict vmapM,
                        const dlong  * restrict vmapP,
                        const int   * restrict EToB,
                        const dfloat * restrict x,
                        const dfloat * restrict y,              
                        const dfloat * restrict z,              
                        const dfloat * restrict q,
                              dfloat * restrict rhsq,
                              dfloat * restrict pmlrhsqx,
                              dfloat * restrict pmlrhsqy,
                              dfloat * restrict pmlrhsqz){
  
  // for all elements
  for(dlong eo=0;eo<pmlNelements;eo+=p_NblockS;outer0){
    // shared storage for flux terms
    shared dfloat s_Aqx[p_NblockS][p_Nfields][p_Nq][p_Nq];
    shared dfloat s_Bqy[p_NblockS][p_Nfields][p_Nq][p_Nq];
    
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
        for(int j=0;j<p_Nq;++j){
          occaUnroll(p_Nfields)
          for(int fld=0; fld<p_Nfields; fld++){
            s_Aqx[es][fld][j][i] = 0.;
            s_Bqy[es][fld][j][i] = 0.;
          }
        }
      }
    }

    barrier(localMemFence);

    // face 0 & 2
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong et = eo + es;
        if(et<pmlNelements){
          const dlong   e = pmlElementIds[et];
          const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i;
          const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i;
          
          surfaceTermsPml(sk0,0,i,0     );
          surfaceTermsPml(sk2,2,i,p_Nq-1);
        }
      }
    }

    barrier(localMemFence);

    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int j=0;j<p_Nq;++j;inner0){
        const dlong et = eo + es;
        if(et<pmlNelements){
          const dlong   e = pmlElementIds[et];
          const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
          const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

          surfaceTermsPml(sk1,1,p_Nq-1,j);
          surfaceTermsPml(sk3,3,0     ,j);
        }
      }
    }

    barrier(localMemFence);

    // 
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong et = eo + es;
        if(et<pmlNelements){
          occaUnroll(p_Nq)
          for(int j=0;j<p_Nq;++j){
            const dlong    e  = pmlElementIds[et];
            const dlong pmlId = pmlIds[et];

            const dlong rhsId    = e*p_Np*p_Nfields+j*p_Nq+i;
            const dlong pmlRhsId = pmlId*p_Np*p_Nfields+j*p_Nq+i;

            for(int fld=0; fld<p_Nfields; fld++){
              dfloat aqx = s_Aqx[es][fld][j][i];
              dfloat bqy = s_Bqy[es][fld][j][i];

              rhsq[rhsId+fld*p_Np]        += (aqx + bqy); 
              pmlrhsqx[pmlRhsId+fld*p_Np] += aqx;
              pmlrhsqy[pmlRhsId+fld*p_Np] += bqy;
            }
          }
        }
      }
    }
  }
}

   
//  
kernel void bnsMRSurfaceQuad2D(const dlong Nelements,
                           const dlong * restrict elementIds,
                           const dlong offset,
                           const int shift,
                           const dfloat time,
                           const dfloat ramp,
                           const dfloat * restrict sgeo,
                           const dfloat * restrict LIFTT,
                           const dlong   * restrict vmapM,
                           const dlong   * restrict mapP,
                           const int   * restrict EToB,
                           const dfloat * restrict x,
                           const dfloat * restrict y,
                           const dfloat * restrict z,
                           const dfloat * restrict q,
                           const dfloat * restrict fQM,
                                 dfloat * restrict rhsq){
  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;outer0){

    // shared storage for flux terms
    shared dfloat s_fluxq[p_NblockS][p_Nfields][p_Nq][p_Nq];

    for(int es=0;es<p_NblockS;++es;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
        for(int j=0;j<p_Nq;++j){
          occaUnroll(p_Nfields)
          for(int fld=0; fld<p_Nfields; fld++)
            s_fluxq[es][fld][j][i] = 0.f;
        }
      }
    }

    barrier(localMemFence);

    // face 0 & 2
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong et = eo + es;
        if(et<Nelements){
          const dlong   e = elementIds[et];
          const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i;
          const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i;

          surfaceMRTerms(sk0,0,i,0     );
          surfaceMRTerms(sk2,2,i,p_Nq-1);
        }
      }
    }

    barrier(localMemFence);

    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int j=0;j<p_Nq;++j;inner0){
        const dlong et = eo + es;
        if(et<Nelements){
          const dlong   e = elementIds[et];          
          const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
          const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

          surfaceMRTerms(sk1,1,p_Nq-1,j);
          surfaceMRTerms(sk3,3,0     ,j);
        }
      }
    }

    barrier(localMemFence);

    // 
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong et = eo + es;
        if(et<Nelements){
          occaUnroll(p_Nq)
          for(int j=0;j<p_Nq;++j){
            const dlong   e   = elementIds[et];
            const dlong rhsId = e*p_Np*p_Nfields+j*p_Nq+i +shift*offset;
            for(int fld=0; fld<p_Nfields; fld++){
              rhsq[rhsId+fld*p_Np] += s_fluxq[es][fld][j][i];
            }
          }
        }
      }
    }
  }
}



kernel void bnsMRPmlSurfaceQuad2D(const dlong pmlNelements,
                        const dlong   * restrict pmlElementIds,
                        const dlong   * restrict pmlIds,
                        const dlong offset,
                        const dlong pmloffset,
                        const int   shift,
                        const dfloat time,
                        const dfloat ramp,
                        const dfloat * restrict sgeo,
                        const dfloat * restrict LIFTT,
                        const dlong  * restrict vmapM,
                        const dlong  * restrict mapP,
                        const int   * restrict EToB,
                        const dfloat * restrict x,
                        const dfloat * restrict y,              
                        const dfloat * restrict z,              
                        const dfloat * restrict q,
                        const dfloat * restrict fQM,
                              dfloat * restrict rhsq,
                              dfloat * restrict pmlrhsqx,
                              dfloat * restrict pmlrhsqy,
                              dfloat * restrict pmlrhsqz){
  
  // for all elements
  for(dlong eo=0;eo<pmlNelements;eo+=p_NblockS;outer0){
    // shared storage for flux terms
    shared dfloat s_Aqx[p_NblockS][p_Nfields][p_Nq][p_Nq];
    shared dfloat s_Bqy[p_NblockS][p_Nfields][p_Nq][p_Nq];
    
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
        for(int j=0;j<p_Nq;++j){
          occaUnroll(p_Nfields)
          for(int fld=0; fld<p_Nfields; fld++){
            s_Aqx[es][fld][j][i] = 0.;
            s_Bqy[es][fld][j][i] = 0.;
          }
        }
      }
    }

    barrier(localMemFence);

    // face 0 & 2
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong et = eo + es;
        if(et<pmlNelements){
          const dlong   e = pmlElementIds[et];
          const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i;
          const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i;
          
          surfaceMRTermsPml(sk0,0,i,0     );
          surfaceMRTermsPml(sk2,2,i,p_Nq-1);
        }
      }
    }

    barrier(localMemFence);

    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int j=0;j<p_Nq;++j;inner0){
        const dlong et = eo + es;
        if(et<pmlNelements){
          const dlong   e = pmlElementIds[et];
          const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
          const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

          surfaceMRTermsPml(sk1,1,p_Nq-1,j);
          surfaceMRTermsPml(sk3,3,0     ,j);
        }
      }
    }

    barrier(localMemFence);

    // 
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong et = eo + es;
        if(et<pmlNelements){
          occaUnroll(p_Nq)
          for(int j=0;j<p_Nq;++j){
            const dlong    e  = pmlElementIds[et];
            const dlong pmlId = pmlIds[et];

            const dlong rhsId    = e*p_Np*p_Nfields+j*p_Nq+i +shift*offset;
            const dlong pmlRhsId = pmlId*p_Np*p_Nfields+j*p_Nq+i + shift*pmloffset;

            for(int fld=0; fld<p_Nfields; fld++){
              dfloat aqx = s_Aqx[es][fld][j][i];
              dfloat bqy = s_Bqy[es][fld][j][i];

              rhsq[rhsId+fld*p_Np]        += (aqx + bqy); 
              pmlrhsqx[pmlRhsId+fld*p_Np] += aqx;
              pmlrhsqy[pmlRhsId+fld*p_Np] += bqy;
            }
          }
        }
      }
    }
  }
}
