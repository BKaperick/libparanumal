

kernel void acousticsMRABPmlUpdate3D(const int pmlNelements,
           const int   * restrict pmlElementIds,
           const int   * restrict pmlIds,
           const dfloat dt,
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           const int   * restrict vmapM,
           const dfloat * restrict rhsq,
           const dfloat * restrict pmlrhsq,
           dfloat * restrict q,
           dfloat * restrict pmlq,
           dfloat * restrict fQM,
           dfloat * restrict fQP,
           const int   rhsShift){

  for(int et=0;et<pmlNelements;++et;outer0){  // for all elements
    shared dfloat s_q[p_Np*p_Nfields];

    exclusive int e;

    for(int n=0; n < p_maxNodes; ++n; inner0){
      if (n < p_Np){
        const int pmlId = pmlIds[et];

        const int id = p_Nfields*(e*p_Np + n);
        const int pid = p_pmlNfields*(pmlId*p_Np + n);

        const int rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
        const int rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
        const int rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;
        const int pmlrhsId1 = 3*pid + ((rhsShift+0)%3)*p_pmlNfields;
        const int pmlrhsId2 = 3*pid + ((rhsShift+1)%3)*p_pmlNfields;
        const int pmlrhsId3 = 3*pid + ((rhsShift+2)%3)*p_pmlNfields;

        const dfloat px = pmlq[pid+0] + dt*(a1*pmlrhsq[pmlrhsId1+0] + a2*pmlrhsq[pmlrhsId2+0] + a3*pmlrhsq[pmlrhsId3+0]);
        const dfloat py = pmlq[pid+1] + dt*(a1*pmlrhsq[pmlrhsId1+1] + a2*pmlrhsq[pmlrhsId2+1] + a3*pmlrhsq[pmlrhsId3+1]);
        const dfloat pz = pmlq[pid+2] + dt*(a1*pmlrhsq[pmlrhsId1+2] + a2*pmlrhsq[pmlrhsId2+2] + a3*pmlrhsq[pmlrhsId3+2]);

        s_q[p_Nfields*n+0] = q[id+0] + dt*(a1*rhsq[rhsId1+0] + a2*rhsq[rhsId2+0] + a3*rhsq[rhsId3+0]);
        s_q[p_Nfields*n+1] = q[id+1] + dt*(a1*rhsq[rhsId1+1] + a2*rhsq[rhsId2+1] + a3*rhsq[rhsId3+1]);
        s_q[p_Nfields*n+2] = q[id+2] + dt*(a1*rhsq[rhsId1+2] + a2*rhsq[rhsId2+2] + a3*rhsq[rhsId3+2]);
        s_q[p_Nfields*n+3] = px+py+pz;

        //write update
        pmlq[pid+0] = px;
        pmlq[pid+1] = py;
        pmlq[pid+2] = pz;
        q[id+0] = s_q[p_Nfields*n+0];
        q[id+1] = s_q[p_Nfields*n+1];
        q[id+2] = s_q[p_Nfields*n+2];
        q[id+3] = s_q[p_Nfields*n+3];
      }
    }
    barrier(localMemFence);

    for(int n=0; n < p_maxNodes; ++n; inner0){
      if (n < p_Nfp*p_Nfaces){
        const int iid = e*p_Nfp*p_Nfaces + n;
        const int qidM = p_Nfields*(vmapM[iid]-e*p_Np);
        const int qid  = p_Nfields*iid;

        fQP[qid+0] = s_q[qidM+0];
        fQP[qid+1] = s_q[qidM+1];
        fQP[qid+2] = s_q[qidM+2];
        fQP[qid+3] = s_q[qidM+3];
        fQM[qid+0] = s_q[qidM+0];
        fQM[qid+1] = s_q[qidM+1];
        fQM[qid+2] = s_q[qidM+2];
        fQM[qid+3] = s_q[qidM+3];
      }
    }
  }
}

kernel void acousticsMRABPmlTraceUpdate3D(const int pmlNelements,
           const int   * restrict pmlElementIds,
           const int   * restrict pmlIds,
           const dfloat dt,
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           const int   * restrict vmapM,
           const dfloat * restrict rhsq,
           const dfloat * restrict pmlrhsq,
           const dfloat * restrict q,
           const dfloat * restrict pmlq,
           dfloat * restrict fQM,
           dfloat * restrict fQP,
           const int   rhsShift){

  for(int et=0;et<pmlNelements;++et;outer0){  // for all elements
    shared dfloat s_q[p_Np*p_Nfields];

    exclusive int e;

    for(int n=0; n < p_maxNodes; ++n; inner0){
      if (n < p_Np){
        e = pmlElementIds[et];
        const int pmlId = pmlIds[et];

        const int id = p_Nfields*(e*p_Np + n);
        const int pid = p_pmlNfields*(pmlId*p_Np + n);

        const int rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
        const int rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
        const int rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;
        const int pmlrhsId1 = 3*pid + ((rhsShift+0)%3)*p_pmlNfields;
        const int pmlrhsId2 = 3*pid + ((rhsShift+1)%3)*p_pmlNfields;
        const int pmlrhsId3 = 3*pid + ((rhsShift+2)%3)*p_pmlNfields;

        const dfloat px = pmlq[pid+0] + dt*(a1*pmlrhsq[pmlrhsId1+0] + a2*pmlrhsq[pmlrhsId2+0] + a3*pmlrhsq[pmlrhsId3+0]);
        const dfloat py = pmlq[pid+1] + dt*(a1*pmlrhsq[pmlrhsId1+1] + a2*pmlrhsq[pmlrhsId2+1] + a3*pmlrhsq[pmlrhsId3+1]);
        const dfloat pz = pmlq[pid+2] + dt*(a1*pmlrhsq[pmlrhsId1+2] + a2*pmlrhsq[pmlrhsId2+2] + a3*pmlrhsq[pmlrhsId3+2]);

        s_q[p_Nfields*n+0] = q[id+0] + dt*(a1*rhsq[rhsId1+0] + a2*rhsq[rhsId2+0] + a3*rhsq[rhsId3+0]);
        s_q[p_Nfields*n+1] = q[id+1] + dt*(a1*rhsq[rhsId1+1] + a2*rhsq[rhsId2+1] + a3*rhsq[rhsId3+1]);
        s_q[p_Nfields*n+2] = q[id+2] + dt*(a1*rhsq[rhsId1+2] + a2*rhsq[rhsId2+2] + a3*rhsq[rhsId3+2]);
        s_q[p_Nfields*n+3] = px+py+pz;
      }
    }
    barrier(localMemFence);

    for(int n=0; n < p_maxNodes; ++n; inner0){
      if (n < p_Nfp*p_Nfaces){
        const int iid = e*p_Nfp*p_Nfaces + n;
        const int qidM = p_Nfields*(vmapM[iid]-e*p_Np);
        const int qid  = p_Nfields*iid;

        fQP[qid+0] = s_q[qidM+0];
        fQP[qid+1] = s_q[qidM+1];
        fQP[qid+2] = s_q[qidM+2];
        fQP[qid+3] = s_q[qidM+3];
        fQM[qid+0] = s_q[qidM+0];
        fQM[qid+1] = s_q[qidM+1];
        fQM[qid+2] = s_q[qidM+2];
        fQM[qid+3] = s_q[qidM+3];
      }
    }
  }
}

kernel void acousticsMRABPmlUpdate3D_wadg(const int pmlNelements,
           const int   * restrict pmlElementIds,
           const int   * restrict pmlIds,
           const dfloat dt,
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           const dfloat * restrict cubInterp,
           const dfloat * restrict cubProject,
           const dfloat * restrict c2,
           const int   * restrict vmapM,
           dfloat * restrict rhsq,
           dfloat * restrict pmlrhsq,
           dfloat * restrict q,
           dfloat * restrict pmlq,
           dfloat * restrict fQM,
           dfloat * restrict fQP,
           const int   rhsShift){

  for(int et=0;et<pmlNelements;++et;outer0){  // for all elements
    shared dfloat s_q[p_Np*p_Nfields];
    shared dfloat s_p[p_cubNp];

    for(int n=0; n < p_maxCubNodes; ++n; inner0){
      if (n < p_Np){
        const int e = pmlElementIds[et];
        const int pmlId = pmlIds[et];

        const int id = p_Nfields*(e*p_Np + n);
        const int pid = p_pmlNfields*(pmlId*p_Np + n);

        const int rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
        const int rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
        const int rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;
        const int pmlrhsId1 = 3*pid + ((rhsShift+0)%3)*p_pmlNfields;
        const int pmlrhsId2 = 3*pid + ((rhsShift+1)%3)*p_pmlNfields;
        const int pmlrhsId3 = 3*pid + ((rhsShift+2)%3)*p_pmlNfields;

        const dfloat px = pmlq[pid+0] + dt*(a1*pmlrhsq[pmlrhsId1+0] + a2*pmlrhsq[pmlrhsId2+0] + a3*pmlrhsq[pmlrhsId3+0]);
        const dfloat py = pmlq[pid+1] + dt*(a1*pmlrhsq[pmlrhsId1+1] + a2*pmlrhsq[pmlrhsId2+1] + a3*pmlrhsq[pmlrhsId3+1]);
        const dfloat pz = pmlq[pid+2] + dt*(a1*pmlrhsq[pmlrhsId1+2] + a2*pmlrhsq[pmlrhsId2+2] + a3*pmlrhsq[pmlrhsId3+2]);

        s_q[p_Nfields*n+0] = q[id+0] + dt*(a1*rhsq[rhsId1+0] + a2*rhsq[rhsId2+0] + a3*rhsq[rhsId3+0]);
        s_q[p_Nfields*n+1] = q[id+1] + dt*(a1*rhsq[rhsId1+1] + a2*rhsq[rhsId2+1] + a3*rhsq[rhsId3+1]);
        s_q[p_Nfields*n+2] = q[id+2] + dt*(a1*rhsq[rhsId1+2] + a2*rhsq[rhsId2+2] + a3*rhsq[rhsId3+2]);
        s_q[p_Nfields*n+3] = px+py+pz;

        //write update
        pmlq[pid+0] = px;
        pmlq[pid+1] = py;
        pmlq[pid+2] = pz;
        q[id+0] = s_q[p_Nfields*n+0];
        q[id+1] = s_q[p_Nfields*n+1];
        q[id+2] = s_q[p_Nfields*n+2];
      }
    }
    barrier(localMemFence);

    // Interpolate p to cubature nodes
    for(int n=0;n<p_maxCubNodes;++n;inner0){
      if (n<p_cubNp) {
        const int e = pmlElementIds[et];
        // Prefetch value of c2
        const dfloat c2n = c2[n + e*p_cubNp];

        s_p[n] = 0.f;
        for (int i=0;i<p_Np;++i){
          s_p[n] += cubInterp[n + i*p_cubNp] * s_q[p_Nfields*i+3];
        }
        // Multiply result by wavespeed c2 at cubature node
        s_p[n] *= c2n;
      }
    }
    barrier(localMemFence);

    // Project result back down
    for(int n=0;n<p_maxCubNodes;++n;inner0){
      if (n < p_Np){
        const int e = pmlElementIds[et];
        const int id = p_Nfields*(e*p_Np + n);

        // Project scaled rhs down
        dfloat c2p = 0.f;
        for (int i=0;i<p_cubNp;++i){
          c2p += cubProject[n + i*p_Np] * s_p[i];
        }

        s_q[p_Nfields*n+3] = c2p;
        q[id+3] = c2p;
      }
    }
    barrier(localMemFence);

    for(int n=0; n < p_maxCubNodes; ++n; inner0){
      if (n < p_Nfp*p_Nfaces){
        const int e = pmlElementIds[et];
        const int iid = e*p_Nfp*p_Nfaces + n;
        const int qidM = p_Nfields*(vmapM[iid]-e*p_Np);
        const int qid  = p_Nfields*iid;

        fQP[qid+0] = s_q[qidM+0];
        fQP[qid+1] = s_q[qidM+1];
        fQP[qid+2] = s_q[qidM+2];
        fQP[qid+3] = s_q[qidM+3];
        fQM[qid+0] = s_q[qidM+0];
        fQM[qid+1] = s_q[qidM+1];
        fQM[qid+2] = s_q[qidM+2];
        fQM[qid+3] = s_q[qidM+3];
      }
    }
  }
}

kernel void acousticsMRABPmlTraceUpdate3D_wadg(const int pmlNelements,
           const int   * restrict pmlElementIds,
           const int   * restrict pmlIds,
           const dfloat dt,
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           const dfloat * restrict cubInterp,
           const dfloat * restrict cubProject,
           const dfloat * restrict c2,
           const int   * restrict vmapM,
           const dfloat * restrict rhsq,
           const dfloat * restrict pmlrhsq,
           const dfloat * restrict q,
           const dfloat * restrict pmlq,
           dfloat * restrict fQM,
           dfloat * restrict fQP,
           const int   rhsShift){

  for(int et=0;et<pmlNelements;++et;outer0){  // for all elements
    shared dfloat s_q[p_Np*p_Nfields];
    shared dfloat s_p[p_cubNp];

    for(int n=0; n < p_maxCubNodes; ++n; inner0){
      if (n < p_Np){
        const int e = pmlElementIds[et];
        const int pmlId = pmlIds[et];

        const int id = p_Nfields*(e*p_Np + n);
        const int pid = p_pmlNfields*(pmlId*p_Np + n);

        const int rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
        const int rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
        const int rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;
        const int pmlrhsId1 = 3*pid + ((rhsShift+0)%3)*p_pmlNfields;
        const int pmlrhsId2 = 3*pid + ((rhsShift+1)%3)*p_pmlNfields;
        const int pmlrhsId3 = 3*pid + ((rhsShift+2)%3)*p_pmlNfields;

        const dfloat px = pmlq[pid+0] + dt*(a1*pmlrhsq[pmlrhsId1+0] + a2*pmlrhsq[pmlrhsId2+0] + a3*pmlrhsq[pmlrhsId3+0]);
        const dfloat py = pmlq[pid+1] + dt*(a1*pmlrhsq[pmlrhsId1+1] + a2*pmlrhsq[pmlrhsId2+1] + a3*pmlrhsq[pmlrhsId3+1]);
        const dfloat pz = pmlq[pid+2] + dt*(a1*pmlrhsq[pmlrhsId1+2] + a2*pmlrhsq[pmlrhsId2+2] + a3*pmlrhsq[pmlrhsId3+2]);

        s_q[p_Nfields*n+0] = q[id+0] + dt*(a1*rhsq[rhsId1+0] + a2*rhsq[rhsId2+0] + a3*rhsq[rhsId3+0]);
        s_q[p_Nfields*n+1] = q[id+1] + dt*(a1*rhsq[rhsId1+1] + a2*rhsq[rhsId2+1] + a3*rhsq[rhsId3+1]);
        s_q[p_Nfields*n+2] = q[id+2] + dt*(a1*rhsq[rhsId1+2] + a2*rhsq[rhsId2+2] + a3*rhsq[rhsId3+2]);
        s_q[p_Nfields*n+3] = px+py+pz;
      }
    }
    barrier(localMemFence);

    // Interpolate p to cubature nodes
    for(int n=0;n<p_maxCubNodes;++n;inner0){
      if (n<p_cubNp) {
        const int e = pmlElementIds[et];
        // Prefetch value of c2
        const dfloat c2n = c2[n + e*p_cubNp];

        s_p[n] = 0.f;
        for (int i=0;i<p_Np;++i){
          s_p[n] += cubInterp[n + i*p_cubNp] * s_q[p_Nfields*i+3];
        }
        // Multiply result by wavespeed c2 at cubature node
        s_p[n] *= c2n;
      }
    }
    barrier(localMemFence);

    // Project result back down
    for(int n=0;n<p_maxCubNodes;++n;inner0){
      if (n < p_Np){
        // Project scaled rhs down
        dfloat c2p = 0.f;
        for (int i=0;i<p_cubNp;++i){
          c2p += cubProject[n + i*p_Np] * s_p[i];
        }
        s_q[p_Nfields*n+3] = c2p;
      }
    }
    barrier(localMemFence);

    for(int n=0; n < p_maxCubNodes; ++n; inner0){
      if (n < p_Nfp*p_Nfaces){
        const int e = pmlElementIds[et];
        const int iid = e*p_Nfp*p_Nfaces + n;
        const int qidM = p_Nfields*(vmapM[iid]-e*p_Np);
        const int qid  = p_Nfields*iid;

        fQP[qid+0] = s_q[qidM+0];
        fQP[qid+1] = s_q[qidM+1];
        fQP[qid+2] = s_q[qidM+2];
        fQP[qid+3] = s_q[qidM+3];
        fQM[qid+0] = s_q[qidM+0];
        fQM[qid+1] = s_q[qidM+1];
        fQM[qid+2] = s_q[qidM+2];
        fQM[qid+3] = s_q[qidM+3];
      }
    }
  }
}
