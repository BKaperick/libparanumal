
kernel void insPoissonPenalty3D(const int Nelements,
        const dfloat * restrict sgeo,
        const dfloat * restrict vgeo,
        const dfloat * restrict DrT,
        const dfloat * restrict DsT,
        const dfloat * restrict DtT,
        const dfloat * restrict LIFTT,
        const dfloat * restrict MM,
        const int * restrict vmapM,
        const int * restrict vmapP,
        const int   * restrict EToB,
        const dfloat tau,
        const dfloat * restrict x,
        const dfloat * restrict y,
        const dfloat * restrict z,
        const dfloat time,
        const dfloat dt,
        const dfloat c0,
        const dfloat c1,
        const dfloat c2,
        const int index,
        const int offset,
        const dfloat * restrict P,
              dfloat * restrict rhsP){
  
  for(int e=0;e<Nelements;++e;outer0){
    
    shared  dfloat s_lapp[p_Np];
    shared  dfloat s_lapflux[p_NfacesNfp];
    
    for(int n=0;n<p_maxNodes;++n;inner0){
      if(n<p_NfacesNfp){
        const int id  = n + e*p_Nfaces*p_Nfp;
        const int idM = vmapM[id];          
        const int idP = vmapP[id];         
        // find face that owns this node
        const int face = n/p_Nfp;

        // load surface geofactors for this face
        int sid = p_Nsgeo*(e*p_Nfaces+face);
        // dfloat nx   = sgeo[sid+p_NXID];
        // dfloat ny   = sgeo[sid+p_NYID];
        // dfloat nz   = sgeo[sid+p_NZID];
        dfloat sJ   = sgeo[sid+p_SJID];
        dfloat invJ = sgeo[sid+p_IJID];
        dfloat hinv = sgeo[sid+p_IHID];

        dfloat PMm0, PMm1, PMm2;  //hard coded for 3 stages
        dfloat PPm0, PPm1, PPm2;  //hard coded for 3 stages

        int index0 = (index+0)%3;
        int index1 = (index+2)%3; //one step back
        int index2 = (index+1)%3; //two steps back

        PMm0 = P[idM+p_Np*index0*offset];
        PMm1 = P[idM+p_Np*index1*offset];
        PMm2 = P[idM+p_Np*index2*offset];
        
        PPm0 = P[idP+p_Np*index0*offset];
        PPm1 = P[idP+p_Np*index1*offset];
        PPm2 = P[idP+p_Np*index2*offset];

        int bc = EToB[face+p_Nfaces*e];
        if(bc>0) {
          insGradientBoundaryConditions3D(bc, time-1*dt, x[idM],y[idM],z[idM], nx,ny,nz, PMm0,&PPm0);
          insGradientBoundaryConditions3D(bc, time-2*dt, x[idM],y[idM],z[idM], nx,ny,nz, PMm1,&PPm1);
          insGradientBoundaryConditions3D(bc, time-3*dt, x[idM],y[idM],z[idM], nx,ny,nz, PMm2,&PPm2);
          //strong form 
          //PPm0  = 2*PPm0 - PMm0;  
          //PPm1  = 2*PPm1 - PMm1;  
          //PPm2  = 2*PPm2 - PMm2;  
        }
        const dfloat PM = c0*PMm0 + c1*PMm1 + c2*PMm2;
        const dfloat PP = c0*PPm0 + c1*PPm1 + c2*PPm2;

        const dfloat dq = PP - PM;
        const dfloat hlf = 0.5f;
        
        s_lapflux[n] = -hlf*sJ*invJ*tau*hinv*dq;
      }
    }

    barrier(localMemFence);

    for(int n=0;n<p_maxNodes;++n;inner0){
      if(n<p_Np){
        dfloat lap = 0;
        // lift surface terms
        occaUnroll(p_NfacesNfp)
        for(int i=0;i<p_NfacesNfp;++i){
          lap += LIFTT[n+i*p_Np]*s_lapflux[i];
        }
        s_lapp[n] = lap;
      }
    }

    barrier(localMemFence);

    for(int n=0;n<p_maxNodes;++n;inner0){
      if(n<p_Np){
        const dfloat J = vgeo[e*p_Nvgeo + p_JID];
        
        dfloat Mlapq = 0;
        // multiply by mass matrix
        occaUnroll(p_Np)
        for(int i=0;i<p_Np;++i){
          Mlapq += MM[n+i*p_Np]*s_lapp[i];
        }
        rhsP[n+e*p_Np] -= J*Mlapq;
      }
    }
  }
}
