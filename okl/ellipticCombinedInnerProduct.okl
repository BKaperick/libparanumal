kernel void ellipticCombinedInnerProduct(const iint N,
					 const dfloat * restrict invDegree,
					 const dfloat * restrict r,
					 const dfloat * restrict w,
					 dfloat * restrict results,
					 const int degreeWeighted){
  
  
  for(iint b=0;b<(N+p_blockSize-1)/p_blockSize;++b;outer0){
    
    volatile shared dfloat s_rdotr[p_blockSize];
    volatile shared dfloat s_rdotw[p_blockSize];

    for(iint t=0;t<p_blockSize;++t;inner0){
      const iint id = t + p_blockSize*b;
      dfloat  rn = 0, wn = 0, ideg = 1.f;
      if(id<N){
	ideg = (degreeWeighted) ? invDegree[id]:1.f;
	rn = r[id];
	wn = w[id];
      }
      s_rdotr[t] = ideg*rn*rn;
      s_rdotw[t] = ideg*rn*wn;
    }
    
    barrier(localMemFence);
#if p_blockSize>512
    for(iint t=0;t<p_blockSize;++t;inner0) if(t<512) { s_rdotr[t] += s_rdotr[t+512]; s_rdotw[t] += s_rdotw[t+512]; }
    barrier(localMemFence);
#endif
#if p_blockSize>256
    for(iint t=0;t<p_blockSize;++t;inner0) if(t<256) { s_rdotr[t] += s_rdotr[t+256]; s_rdotw[t] += s_rdotw[t+256]; }
    barrier(localMemFence);
#endif

    for(iint t=0;t<p_blockSize;++t;inner0) if(t<128) { s_rdotr[t] += s_rdotr[t+128]; s_rdotw[t] += s_rdotw[t+128]; }
    barrier(localMemFence);

    for(iint t=0;t<p_blockSize;++t;inner0) if(t< 64) { s_rdotr[t] += s_rdotr[t+64]; s_rdotw[t] += s_rdotw[t+64]; }
    barrier(localMemFence);

    for(iint t=0;t<p_blockSize;++t;inner0) if(t< 32) { s_rdotr[t] += s_rdotr[t+32]; s_rdotw[t] += s_rdotw[t+32]; }
    for(iint t=0;t<p_blockSize;++t;inner0) if(t< 16) { s_rdotr[t] += s_rdotr[t+16]; s_rdotw[t] += s_rdotw[t+16]; }
    for(iint t=0;t<p_blockSize;++t;inner0) if(t<  8) { s_rdotr[t] += s_rdotr[t+ 8]; s_rdotw[t] += s_rdotw[t+ 8]; }
    for(iint t=0;t<p_blockSize;++t;inner0) if(t<  4) { s_rdotr[t] += s_rdotr[t+ 4]; s_rdotw[t] += s_rdotw[t+ 4]; }
    for(iint t=0;t<p_blockSize;++t;inner0) if(t<  2) { s_rdotr[t] += s_rdotr[t+ 2]; s_rdotw[t] += s_rdotw[t+ 2]; }

    for(iint t=0;t<p_blockSize;++t;inner0){
      if(t==0){ // nasty
	dfloat rdotr = s_rdotr[0]+s_rdotr[1];
	dfloat rdotw = s_rdotw[0]+s_rdotw[1];
	atomicAdd(results,   rdotr);
	atomicAdd(results+1, rdotw);
      }
    }
  }
}

