// compute local gradients

kernel void ellipticGradientBBTri2D(const int Nelements,
                                  const dfloat * restrict vgeo,
                                  const int * restrict D1ids,
                                  const int * restrict D2ids,
                                  const int * restrict D3ids,
                                  const dfloat * restrict Dvals,  
                                  const dfloat * restrict q,
                                  dfloat4 * restrict gradq){  
  
  // block partition of elements
  for(int eo=0;eo<Nelements;eo+=p_NblockV;outer0){
    
    shared dfloat s_q[p_NblockV][p_Np];

    for(int e=eo;e<eo+p_NblockV;++e;inner1){
      for(int n=0;n<p_Np;++n;inner0){
        if(e<Nelements){
          const int id = e*p_Np+n;
          s_q[e-eo][n] = q[id];
        }
      }
    }
    
    barrier(localMemFence);

    for(int e=eo;e<eo+p_NblockV;++e;inner1){
      for(int n=0;n<p_Np;++n;inner0){
        if(e<Nelements){
          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
          const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];

          const int es = e-eo;

          const int D1i1 = D1ids[n];
          const int D2i1 = D2ids[n];
          const int D3i1 = D3ids[n];
          const dfloat Dval1 = Dvals[n];
          
          const int D1i2 = D1ids[n+p_Np];
          const int D2i2 = D2ids[n+p_Np];
          const int D3i2 = D3ids[n+p_Np];
          const dfloat Dval2 = Dvals[n+p_Np];

          const int D1i3 = D1ids[n+2*p_Np];
          const int D2i3 = D2ids[n+2*p_Np];
          const int D3i3 = D3ids[n+2*p_Np];    
          const dfloat Dval3 = Dvals[n+2*p_Np];

          const dfloat dqdr = .5f*(Dval1*(s_q[es][D2i1] - s_q[es][D1i1]) +
                                   Dval2*(s_q[es][D2i2] - s_q[es][D1i2]) +
                                   Dval3*(s_q[es][D2i3] - s_q[es][D1i3]));
          const dfloat dqds = .5f*(Dval1*(s_q[es][D3i1] - s_q[es][D1i1]) +
                                   Dval2*(s_q[es][D3i2] - s_q[es][D1i2]) +
                                   Dval3*(s_q[es][D3i3] - s_q[es][D1i3]));

          dfloat4 gradqn;
          gradqn.x = drdx*dqdr + dsdx*dqds;
          gradqn.y = drdy*dqdr + dsdy*dqds;
          gradqn.w = s_q[es][n];
          
          const int id = e*p_Np+n; 
          gradq[id] = gradqn;
        }
      }
    }
  }
}

kernel void ellipticPartialGradientBBTri2D(const int Nelements,
                                  const int offset,
                                  const dfloat * restrict vgeo,
                                  const int * restrict D1ids,
                                  const int * restrict D2ids,
                                  const int * restrict D3ids,
                                  const dfloat * restrict Dvals,  
                                  const dfloat * restrict q,
                                  dfloat4 * restrict gradq){  
  
  // block partition of elements
  for(int eo=0;eo<Nelements;eo+=p_NblockV;outer0){
    
    shared dfloat s_q[p_NblockV][p_Np];

    for(int e=eo;e<eo+p_NblockV;++e;inner1){
      for(int n=0;n<p_Np;++n;inner0){
        if(e<Nelements){
          const int id = (e+offset)*p_Np+n;
          s_q[e-eo][n] = q[id];
        }
      }
    }
    
    barrier(localMemFence);

    for(int e=eo;e<eo+p_NblockV;++e;inner1){
      for(int n=0;n<p_Np;++n;inner0){
        if(e<Nelements){
          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[(e+offset)*p_Nvgeo + p_RXID];
          const dfloat drdy = vgeo[(e+offset)*p_Nvgeo + p_RYID];
          const dfloat dsdx = vgeo[(e+offset)*p_Nvgeo + p_SXID];
          const dfloat dsdy = vgeo[(e+offset)*p_Nvgeo + p_SYID];

          const int es = e-eo;

          const int D1i1 = D1ids[n];
          const int D2i1 = D2ids[n];
          const int D3i1 = D3ids[n];
          const dfloat Dval1 = Dvals[n];
          
          const int D1i2 = D1ids[n+p_Np];
          const int D2i2 = D2ids[n+p_Np];
          const int D3i2 = D3ids[n+p_Np];
          const dfloat Dval2 = Dvals[n+p_Np];

          const int D1i3 = D1ids[n+2*p_Np];
          const int D2i3 = D2ids[n+2*p_Np];
          const int D3i3 = D3ids[n+2*p_Np];    
          const dfloat Dval3 = Dvals[n+2*p_Np];

          const dfloat dqdr = .5f*(Dval1*(s_q[es][D2i1] - s_q[es][D1i1]) +
                                   Dval2*(s_q[es][D2i2] - s_q[es][D1i2]) +
                                   Dval3*(s_q[es][D2i3] - s_q[es][D1i3]));
          const dfloat dqds = .5f*(Dval1*(s_q[es][D3i1] - s_q[es][D1i1]) +
                                   Dval2*(s_q[es][D3i2] - s_q[es][D1i2]) +
                                   Dval3*(s_q[es][D3i3] - s_q[es][D1i3]));

          dfloat4 gradqn;
          gradqn.x = drdx*dqdr + dsdx*dqds;
          gradqn.y = drdy*dqdr + dsdy*dqds;
          gradqn.w = s_q[es][n];
          
          const int id = (e+offset)*p_Np+n; 
          gradq[id] = gradqn;
        }
      }
    }
  }
}
