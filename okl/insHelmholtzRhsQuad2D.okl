// Compute RHS Forcing i.e. 1/nu*(-grad(Pr) + sum(a_i x u_i)^(n-i) -sum(b_i x N(u)^(n-i))
kernel void insHelmholtzRhsForcingQuad2D(const dlong Nelements,
                                         const int subcycling,  
                                         const dfloat * restrict vgeo,
                                         const dfloat idt,
                                         const dfloat inu,
                                         const dfloat a0,
                                         const dfloat a1,
                                         const dfloat a2,
                                         const dfloat b0,
                                         const dfloat b1,
                                         const dfloat b2,
                                         const dfloat c0,
                                         const dfloat c1,
                                         const dfloat c2,
                                         const int index,
                                         const dlong offset,
                                         const dfloat * restrict U,
                                         const dfloat * restrict V,
                                         const dfloat * restrict NU,
                                         const dfloat * restrict NV,
                                         const dfloat * restrict Px,
                                         const dfloat * restrict Py,
                                               dfloat * restrict rhsU,
                                               dfloat * restrict rhsV){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;outer0){

    for(int es=0;es<p_NblockV;++es;inner2){// for all elements in block
      for(int j=0;j<p_Nq;++j;inner1){ 
        for(int i=0;i<p_Nq;++i;inner0){
          const dlong e = eo+es; // element in block
          if(e<Nelements){
            //hard coded for 3 stages
            const int index0 = (index+0)%3;
            const int index1 = (index+2)%3; //back one step
            const int index2 = (index+1)%3; //back two steps

            const dlong id0   = i + j*p_Nq + p_Np*(e+index0*offset);
            const dlong id1   = i + j*p_Nq + p_Np*(e+index1*offset);
            const dlong id2   = i + j*p_Nq + p_Np*(e+index2*offset);

            const dlong gid = i + j*p_Nq + e*p_Np*p_Nvgeo;
            const dfloat JW = vgeo[gid + p_JWID*p_Np];
            
            // gradP
            const dfloat Pxm0 = Px[id0];
            const dfloat Pxm1 = Px[id1];
            const dfloat Pxm2 = Px[id2];

            const dfloat Pym0 = Py[id0];
            const dfloat Pym1 = Py[id1];
            const dfloat Pym2 = Py[id2];

            const dlong id = e*p_Np+n;
            if(subcycling==0){ //no subcycling
              //U
              const dfloat Um0  = U[id0];
              const dfloat Um1  = U[id1];
              const dfloat Um2  = U[id2];
              //V
              const dfloat Vm0  = V[id0];
              const dfloat Vm1  = V[id1];
              const dfloat Vm2  = V[id2];
              
              // NU
              const dfloat NUm0 = NU[id0];
              const dfloat NUm1 = NU[id1];
              const dfloat NUm2 = NU[id2];
              // NV
              const dfloat NVm0 = NV[id0];
              const dfloat NVm1 = NV[id1];
              const dfloat NVm2 = NV[id2];  

              // // -> (-L + gamma/dt*nu I)U = 1/nu*[sum(b_i*U_i)/dt - sum(a_i*NU_i) - sum(a_i*gradP_i)]
              rhsU[id]  = JW*inu*( + (b0*Um0 +b1*Um1 +b2*Um2 )*idt 
                                   - (c0*Pxm0+c1*Pxm1+c2*Pxm2) 
                                   - (a0*NUm0+a1*NUm1+a2*NUm2) );

              rhsV[id]  = JW*inu*( + (b0*Vm0 +b1*Vm1 +b2*Vm2 )*idt 
                                   - (c0*Pym0+c1*Pym1+c2*Pym2) 
                                   - (a0*NVm0+a1*NVm1+a2*NVm2) );
            } else{ //with subcycling
              //NU holds \hat{U} after subcycling
              const dfloat NUm0 = NU[id];
              const dfloat NVm0 = NV[id];

              // New Substeping Update
              rhsU[id]  = JW*inu*(NUm0*idt - (c0*Pxm0+c1*Pxm1+c2*Pxm2));                                          
              rhsV[id]  = JW*inu*(NVm0*idt - (c0*Pym0+c1*Pym1+c2*Pym2));                                                
            }
          }
        }
      }
    }
  }
}


#define surfaceTerms(sk,face,i, j)                                      \
  {                                                                     \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];                          \
  const dfloat hinv= sgeo[sk*p_Nsgeo+p_IHID];                           \
                                                                        \
  dfloat dudxP=0, dudyP=0, uP=0;                                        \
  dfloat dvdxP=0, dvdyP=0, vP=0;                                        \
                                                                        \
  const int bc = EToB[face+p_Nfaces*e];                                 \
  if(bc>0) {                                                            \
    const dlong idM = vmapM[sk];                                        \
    insHelmholtzBoundaryConditionsIpdg2D(bc, t, x[idM], y[idM], nx, ny, &uP, &dudxP, &dudyP, &vP, &dvdxP, &dvdyP);\
  }                                                                     \
                                                                        \
  const dfloat du = uP;                                                 \
  const dfloat dv = vP;                                                 \
                                                                        \
  s_dudx[j][i] += WsJ*nx*du;                                            \
  s_dudy[j][i] += WsJ*ny*du;                                            \
  s_dvdx[j][i] += WsJ*nx*dv;                                            \
  s_dvdy[j][i] += WsJ*ny*dv;                                            \
                                                                        \
  s_rhsu[j][i] -= WsJ*(nx*dudxP + ny*dudyP+ tau*du*hinv);               \
  s_rhsv[j][i] -= WsJ*(nx*dvdxP + ny*dvdyP+ tau*dv*hinv);               \
  }

kernel void insHelmholtzRhsIpdgBCQuad2D(const dlong Nelements,
                                        const dlong  * restrict vmapM,
                                        const dfloat tau,
                                        const dfloat t,
                                        const dfloat * restrict x,
                                        const dfloat * restrict y,
                                        const dfloat * restrict vgeo,
                                        const dfloat * restrict sgeo,
                                        const int    * restrict EToB,
                                        const dfloat * restrict D,
                                              dfloat * restrict rhsU,
                                              dfloat * restrict rhsV){

  for(dlong e=0;e<Nelements;++e;outer0){

    shared dfloat s_dudx[p_Nq][p_Nq];
    shared dfloat s_dudy[p_Nq][p_Nq];
    shared dfloat s_dvdx[p_Nq][p_Nq];
    shared dfloat s_dvdy[p_Nq][p_Nq];
    shared dfloat s_rhsu[p_Nq][p_Nq];
    shared dfloat s_rhsv[p_Nq][p_Nq];
    shared dfloat s_D[p_Nq][p_Nq];

    // loop over slabs
    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;inner0){
        s_dqdx[j][i] = 0.f;
        s_dqdy[j][i] = 0.f;
        s_rhsq[j][i] = 0.f;

        s_D[j][i] = D[j*p_Nq+i];
      }
    }

    barrier(localMemFence);

    // loop over faces to add pseudo-gradient

    // face 0 & 2
    for(int i=0;i<p_Nq;++i;inner0){
      const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i ;
      const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i ;

      surfaceTerms(sk0,0,i,0);
      surfaceTerms(sk2,2,i,p_Nq-1);
    }

    barrier(localMemFence);

    // face 1 & 3
    for(int j=0;j<p_Nq;++j;inner0){
      const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
      const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

      surfaceTerms(sk1,1,p_Nq-1,j);
      surfaceTerms(sk3,3,0,j);
    }

    barrier(localMemFence);

    // prescale by geofacs
    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;inner0){
        // does need the nasty geofacs
        const dlong gid = i + j*p_Nq + e*p_Np*p_Nvgeo;

        const dfloat drdx = vgeo[gid + p_RXID*p_Np];
        const dfloat drdy = vgeo[gid + p_RYID*p_Np];
        const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
        const dfloat dsdy = vgeo[gid + p_SYID*p_Np];

        const dfloat dudx = s_dudx[j][i];
        const dfloat dudy = s_dudy[j][i];
        const dfloat dvdx = s_dvdx[j][i];
        const dfloat dvdy = s_dvdy[j][i];

        s_dudx[j][i] = (drdx*dudx + drdy*dudy);
        s_dudy[j][i] = (dsdx*dudx + dsdy*dudy);
        s_dvdx[j][i] = (drdx*dvdx + drdy*dvdy);
        s_dvdy[j][i] = (dsdx*dvdx + dsdy*dvdy);
      }
    }

    barrier(localMemFence);

    // loop over slabs
    for(int j=0;j<p_Nq;++j){
      for(int i=0;i<p_Nq;++i;inner0){
        dfloat dur = 0, dus = 0;
        dfloat dvr = 0, dvs = 0;

        for(int n=0;n<p_Nq;++n){
          dur += s_D[n][i]*s_dudx[j][n];
          dus += s_D[n][j]*s_dudy[n][i];
          dvr += s_D[n][i]*s_dvdx[j][n];
          dvs += s_D[n][j]*s_dvdy[n][i];
        }

        const dlong id = e*p_Np + j*p_Nq + i;
        rhsU[id] -= s_rhsu[j][i]  + dur + dus;
        rhsV[id] -= s_rhsv[j][i]  + dvr + dvs;
      }
    }
  }
}
