// compute local gradients

kernel void ellipticGradientHex3D(const int Nelements,
				  const dfloat * restrict vgeo,
				  const dfloat * restrict  D,
				  const dfloat * restrict q,
				  dfloat4 * restrict gradq){  

  for(int e=0;e<Nelements;++e;outer0){

    shared dfloat s_D[p_Nq][p_Nq];
    shared dfloat s_q[p_Nq][p_Nq][p_Nq];
    
    // prefetch D
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
	s_D[j][i] = D[i + p_Nq*j];
      }
    }
    
    // prefetch q
    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;inner1){
	for(int i=0;i<p_Nq;++i;inner0){
	  const iint id = e*p_Np+k*p_Nq*p_Nq+j*p_Nq+i;
	  s_q[k][j][i] = q[id];
	}
      }
    }
    
    barrier(localMemFence);
    
    // loop over slabs
    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;inner1){
	for(int i=0;i<p_Nq;++i;inner0){
	
	  const int gid = i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np*p_Nvgeo;
	  
	  const dfloat drdx = vgeo[gid + p_RXID*p_Np];
	  const dfloat drdy = vgeo[gid + p_RYID*p_Np];
	  const dfloat drdz = vgeo[gid + p_RZID*p_Np];
	  
	  const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
	  const dfloat dsdy = vgeo[gid + p_SYID*p_Np];
	  const dfloat dsdz = vgeo[gid + p_SZID*p_Np];
	  
	  const dfloat dtdx = vgeo[gid + p_TXID*p_Np];
	  const dfloat dtdy = vgeo[gid + p_TYID*p_Np];
	  const dfloat dtdz = vgeo[gid + p_TZID*p_Np];
	  
	  // compute 1D derivatives
	  dfloat qr = 0, qs = 0, qt = 0;
	  for(int n=0;n<p_Nq;++n){
	    qr += s_D[i][n]*s_q[k][j][n];
	    qs += s_D[j][n]*s_q[k][n][i];
	    qt += s_D[k][n]*s_q[n][j][i];
	  }
	  
	  dfloat4 gradqn;
	  gradqn.x = drdx*qr + dsdx*qs + dtdx*qt;
	  gradqn.y = drdy*qr + dsdy*qs + dtdy*qt;
	  gradqn.z = drdz*qr + dsdz*qs + dtdz*qt;
	  gradqn.w = s_q[k][j][i];

	  const iint id = e*p_Np+k*p_Nq*p_Nq+j*p_Nq+i; 
	  gradq[id] = gradqn;
	}
      }
    }
  }
}


kernel void ellipticPartialGradientHex3D(const int Nelements,
					 const int startElement,
					 const dfloat * restrict vgeo,
					 const dfloat * restrict  D,
					 const dfloat * restrict q,
					 dfloat4 * restrict gradq){  

  for(int e=0;e<Nelements;++e;outer0){

    shared dfloat s_D[p_Nq][p_Nq];
    shared dfloat s_q[p_Nq][p_Nq][p_Nq];
    
    // prefetch D
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
	s_D[j][i] = D[i + p_Nq*j];
      }
    }
    
    // prefetch q
    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;inner1){
	for(int i=0;i<p_Nq;++i;inner0){
	  const iint id = (e+startElement)*p_Np+k*p_Nq*p_Nq+j*p_Nq+i;
	  s_q[k][j][i] = q[id];
	}
      }
    }
    
    barrier(localMemFence);
    
    // loop over slabs
    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;inner1){
	for(int i=0;i<p_Nq;++i;inner0){
	
	  const int gid = i + j*p_Nq + k*p_Nq*p_Nq + (e+startElement)*p_Np*p_Nvgeo;
	  
	  const dfloat drdx = vgeo[gid + p_RXID*p_Np];
	  const dfloat drdy = vgeo[gid + p_RYID*p_Np];
	  const dfloat drdz = vgeo[gid + p_RZID*p_Np];
	  
	  const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
	  const dfloat dsdy = vgeo[gid + p_SYID*p_Np];
	  const dfloat dsdz = vgeo[gid + p_SZID*p_Np];
	  
	  const dfloat dtdx = vgeo[gid + p_TXID*p_Np];
	  const dfloat dtdy = vgeo[gid + p_TYID*p_Np];
	  const dfloat dtdz = vgeo[gid + p_TZID*p_Np];
	  
	  // compute 1D derivatives
	  dfloat qr = 0, qs = 0, qt = 0;
	  for(int n=0;n<p_Nq;++n){
	    qr += s_D[i][n]*s_q[k][j][n];
	    qs += s_D[j][n]*s_q[k][n][i];
	    qt += s_D[k][n]*s_q[n][j][i];
	  }
	  
	  dfloat4 gradqn;
	  gradqn.x = drdx*qr + dsdx*qs + dtdx*qt;
	  gradqn.y = drdy*qr + dsdy*qs + dtdy*qt;
	  gradqn.z = drdz*qr + dsdz*qs + dtdz*qt;
	  gradqn.w = s_q[k][j][i];

	  const iint id = (e+startElement)*p_Np+k*p_Nq*p_Nq+j*p_Nq+i; 
	  gradq[id] = gradqn;
	}
      }
    }
  }
}
