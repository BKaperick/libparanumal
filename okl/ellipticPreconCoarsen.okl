kernel void ellipticPreconCoarsen_v0(const dlong Nelements,
                                     const dfloat * restrict invDegree,
                                     const dfloat * restrict V1,
                                     const dfloat * restrict qN,
                                     dfloat * restrict q1){

  for(dlong e=0;e<Nelements;++e;outer0){
    for(int n=0;n<p_Nverts;++n;inner0){
      dfloat tmp = 0;
      for(int i=0;i<p_Np;++i){
        tmp += V1[n*p_Np + i]*qN[e*p_Np+i];
      }
      q1[e*p_Nverts+n] = tmp; // *invDegree[e*p_Nverts+n];
    }
  }
}


kernel void ellipticPreconCoarsen(const dlong Nelements,
                                  const dfloat * restrict R,
                                  const dfloat * restrict qN,
                                  dfloat * restrict q1){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;outer0){

    shared dfloat s_qN[p_NblockV][p_NpFine];
    shared dfloat s_R[p_NpCoarse][p_NpFine];

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_NpCoarse;++n;inner0){
        dlong t = n + es*p_NpCoarse;

        while(t<p_NpFine*p_NblockV){
          if(eo*p_NpFine + t< Nelements*p_NpFine)
            s_qN[0][t] = qN[eo*p_NpFine+t];
          t += p_NpCoarse*p_NblockV;
        }

        t = n + es*p_NpCoarse;

        while(t<p_NpFine*p_NpCoarse){
          s_R[0][t] = R[t];
          t += p_NpCoarse*p_NblockV;
        }
      }
    }

    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_NpCoarse;++n;inner0){
        const dlong e = eo + es;
        if(e<Nelements){
          dfloat tmp = 0;
          occaUnroll(p_NpFine)
            for(int i=0;i<p_NpFine;++i){
              tmp += s_R[n][i]*s_qN[es][i]; // bank conflict ?
            }
          q1[e*p_NpCoarse+n] = tmp; // *invDegree[e*p_NpCoarse+n];
        }
      }
    }
  }
}


#if 0
kernel void ellipticPreconCoarsenQuad2D(const int Nelements,
                                        const dfloat * restrict R,
                                        const dfloat * restrict qN,
                                        dfloat * restrict q1){


  for(int e=0;e<Nelements;++e;outer0){
    shared dfloat s_qNN[p_Nq][p_Nq];
    shared dfloat s_q1N[p_Nq1][p_Nq];
    shared dfloat s_q11[p_Nq1][p_Nq1];

    // prefetch to shared

    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        s_qNN[j][i] = qN[i+j*p_Nq+e*p_Nq*p_Nq];
      }
    }

    barrier(localMemFence);

    // coarsen in j index

    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        if(j<2){
          dfloat res = 0;
          for(int m=0;m<p_Nq;++m)
            res += R[j*p_Nq + m]*s_qN[m][i];
          s_q1N[j][i] = res;
        }
      }
    }

    barrier(localMemFence);

    // coarsen in i index

    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        if(j<2 && i<2){
          dfloat rtmp = 0;
          for(int m=0;m<p_Nq;++m)
            rtmp += R[i*p_Nq + m]*s_qN[j][m];
          s_q11[j][i] = rtmp;
        }
      }
    }

    barrier(localMemFence);

    // collect writes
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const int id = i + j*p_Nq;
        if(id<p_Nq1*p_Nq1){
          q1[id + p_Nq1*p_Nq1*e] = s_q11[0][id];
        }
      }
    }

  }
}
#endif
