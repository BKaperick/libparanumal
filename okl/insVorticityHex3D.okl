kernel void insVorticityHex3D(const dlong Nelements,
                              const dfloat * restrict vgeo,
                              const dfloat * restrict const D,
                              const dlong offset,
                              const dfloat * restrict U,
                              const dfloat * restrict V,
                              const dfloat * restrict W,
                                    dfloat * restrict Vx,
                                    dfloat * restrict Vy,
                                    dfloat * restrict Vz){  
  
  // block partition of elements
  for(dlong e=0;e<Nelements;e++;outer0){
    
    shared dfloat s_U[p_Nq][p_Nq][p_Nq];
    shared dfloat s_V[p_Nq][p_Nq][p_Nq];
    shared dfloat s_W[p_Nq][p_Nq][p_Nq];
    shared dfloat s_D[p_Nq][p_Nq];

    for(int k=0;k<p_Nq;++k;inner2){ 
      for(int j=0;j<p_Nq;++j;inner1){ 
        for(int i=0;i<p_Nq;++i;inner0){     
          const dlong id = (e+offset)*p_Np + k*p_Nq*p_Nq + j*p_Nq+i;

          s_U[k][j][i]  = U[id];
          s_V[k][j][i]  = V[id];
          s_W[k][j][i]  = W[id];

          if (k==0)
            s_D[j][i] = D[j*p_Nq+i];
        }
      }
    }
          
    barrier(localMemFence);

    for(int k=0;k<p_Nq;++k;inner2){ 
      for(int j=0;j<p_Nq;++j;inner1){ 
        for(int i=0;i<p_Nq;++i;inner0){  
          const dlong gid = e*p_Np*p_Nvgeo +k*p_Nq*p_Nq +j*p_Nq +i;
          const dfloat drdx = vgeo[gid + p_RXID*p_Np];
          const dfloat drdy = vgeo[gid + p_RYID*p_Np];
          const dfloat drdz = vgeo[gid + p_RZID*p_Np];
          const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
          const dfloat dsdy = vgeo[gid + p_SYID*p_Np];
          const dfloat dsdz = vgeo[gid + p_SZID*p_Np];
          const dfloat dtdx = vgeo[gid + p_TXID*p_Np];
          const dfloat dtdy = vgeo[gid + p_TYID*p_Np];
          const dfloat dtdz = vgeo[gid + p_TZID*p_Np];

          // compute 'r' and 's' derivatives of (q_m) at node n
          dfloat dudr  = 0.f, duds  = 0.f, dudt  = 0.f;
          dfloat dvdr  = 0.f, dvds  = 0.f, dvdt  = 0.f;
          dfloat dwdr  = 0.f, dwds  = 0.f, dwdt  = 0.f;

          occaUnroll(p_Nq)
            for(int n=0;n<p_Nq;++n){
              const dfloat Dr = s_D[i][n];
              const dfloat Ds = s_D[j][n];
              const dfloat Dt = s_D[k][n];

              dudr += Dr*s_U[k][j][n];
              duds += Ds*s_U[k][n][i];
              dudt += Dt*s_U[n][j][i];
              dvdr += Dr*s_V[k][j][n];
              dvds += Ds*s_V[k][n][i];
              dvdt += Dt*s_V[n][j][i];
              dwdr += Dr*s_W[k][j][n];
              dwds += Ds*s_W[k][n][i];
              dwdt += Dt*s_W[n][j][i];
            }

          const dfloat uy = drdy*dudr + dsdy*duds + dtdy*dudt;
          const dfloat uz = drdz*dudr + dsdz*duds + dtdz*dudt;

          const dfloat vx = drdx*dvdr + dsdx*dvds + dtdx*dvdt;
          const dfloat vz = drdz*dvdr + dsdz*dvds + dtdz*dvdt;

          const dfloat wx = drdx*dwdr + dsdx*dwds + dtdx*dwdt;
          const dfloat wy = drdy*dwdr + dsdy*dwds + dtdy*dwdt;

          const dlong id = e*p_Np+k*p_Nq*p_Nq+j*p_Nq +i; 
          Vx[id] = wy-vz;
          Vy[id] = uz-wx;
          Vz[id] = vx-uy;
        }
      }
    }
  }
}