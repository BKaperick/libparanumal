#define RXID 0  
#define RYID 1  
#define RZID 2  
#define SXID 3
#define SYID 4
#define SZID 5
#define TXID 6
#define TYID 7
#define TZID 8


kernel void acousticsVolume3Dbbdg_o1(const iint Nelements,
          const iint * restrict Elements,
          const dfloat * restrict vgeo,
          const iint * restrict D0ids,
          const iint * restrict D1ids,
          const iint * restrict D2ids,
          const iint * restrict D3ids,
          const dfloat * restrict Dvals,    
          const dfloat * restrict q,
          dfloat * restrict rhsq){
  
  for(iint eo=0;eo<Nelements;eo+=p_NblockV_o1;outer0){  // for all elements

    shared dfloat s_u[p_NblockV_o1][4];
    shared dfloat s_v[p_NblockV_o1][4];
    shared dfloat s_w[p_NblockV_o1][4];
    shared dfloat s_p[p_NblockV_o1][4];

    for(iint es=0;es<p_NblockV_o1;++es;inner1){// for all elements in block
      for(iint n=0;n<4;++n;inner0){     // for all nodes in this element

        iint et = eo+es; // element in block

        if(et<Nelements){
          const iint id = p_Nfields*(Elements[et]*p_NpMax + n);
          s_u[es][n] = q[id+0];
          s_v[es][n] = q[id+1];
          s_w[es][n] = q[id+2];
          s_p[es][n] = q[id+3];
        }
      }
    }

    // make sure all node data is loaded into shared
    barrier(localMemFence);

    for(iint es=0;es<p_NblockV_o1;++es;inner1){// for all elements in block
      for(iint n=0;n<4;++n;inner0){     // for all nodes in this element
  
        iint et = eo+es; // element in block
        if(et<Nelements){
          const iint e = Elements[et];

          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + RYID];
          const dfloat drdz = vgeo[e*p_Nvgeo + RZID];
          const dfloat dsdx = vgeo[e*p_Nvgeo + SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + SYID];
          const dfloat dsdz = vgeo[e*p_Nvgeo + SZID];
          const dfloat dtdx = vgeo[e*p_Nvgeo + TXID];
          const dfloat dtdy = vgeo[e*p_Nvgeo + TYID];
          const dfloat dtdz = vgeo[e*p_Nvgeo + TZID];

          // compute 'r', 's',  and 't' derivatives of (q_m) at node n
          const iint D0i1 = D0ids[n];
          const iint D1i1 = D1ids[n];
          const iint D2i1 = D2ids[n];
          const iint D3i1 = D3ids[n];
          const dfloat Dval1 = Dvals[n];
          
          const iint D0i2 = D0ids[n+4];
          const iint D1i2 = D1ids[n+4];
          const iint D2i2 = D2ids[n+4];
          const iint D3i2 = D3ids[n+4];
          const dfloat Dval2 = Dvals[n+4];

          const iint D0i3 = D0ids[n+2*4];
          const iint D1i3 = D1ids[n+2*4];
          const iint D2i3 = D2ids[n+2*4];
          const iint D3i3 = D3ids[n+2*4];    
          const dfloat Dval3 = Dvals[n+2*4];

          const iint D0i4 = D0ids[n+3*4];
          const iint D1i4 = D1ids[n+3*4];
          const iint D2i4 = D2ids[n+3*4];
          const iint D3i4 = D3ids[n+3*4];    
          const dfloat Dval4 = Dvals[n+3*4];

          const dfloat dudr = .5f*(Dval1*(s_u[es][D1i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D1i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D1i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D1i4] - s_u[es][D0i4]));
          const dfloat duds = .5f*(Dval1*(s_u[es][D2i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D2i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D2i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D2i4] - s_u[es][D0i4]));
          const dfloat dudt = .5f*(Dval1*(s_u[es][D3i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D3i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D3i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D3i4] - s_u[es][D0i4]));
          
          const dfloat dvdr = .5f*(Dval1*(s_v[es][D1i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D1i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D1i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D1i4] - s_v[es][D0i4]));
          const dfloat dvds = .5f*(Dval1*(s_v[es][D2i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D2i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D2i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D2i4] - s_v[es][D0i4]));
          const dfloat dvdt = .5f*(Dval1*(s_v[es][D3i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D3i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D3i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D3i4] - s_v[es][D0i4]));
          
          const dfloat dwdr = .5f*(Dval1*(s_w[es][D1i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D1i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D1i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D1i4] - s_w[es][D0i4]));
          const dfloat dwds = .5f*(Dval1*(s_w[es][D2i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D2i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D2i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D2i4] - s_w[es][D0i4]));
          const dfloat dwdt = .5f*(Dval1*(s_w[es][D3i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D3i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D3i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D3i4] - s_w[es][D0i4]));
          
          const dfloat dpdr = .5f*(Dval1*(s_p[es][D1i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D1i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D1i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D1i4] - s_p[es][D0i4]));
          const dfloat dpds = .5f*(Dval1*(s_p[es][D2i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D2i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D2i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D2i4] - s_p[es][D0i4]));
          const dfloat dpdt = .5f*(Dval1*(s_p[es][D3i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D3i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D3i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D3i4] - s_p[es][D0i4]));

          // chain rule
          const dfloat dudx = drdx*dudr + dsdx*duds + dtdx*dudt;
          const dfloat dvdy = drdy*dvdr + dsdy*dvds + dtdy*dvdt;
          const dfloat dwdz = drdz*dwdr + dsdz*dwds + dtdz*dwdt;
          const dfloat dpdx = drdx*dpdr + dsdx*dpds + dtdx*dpdt;
          const dfloat dpdy = drdy*dpdr + dsdy*dpds + dtdy*dpdt;
          const dfloat dpdz = drdz*dpdr + dsdz*dpds + dtdz*dpdt;
          
          // store acoustics rhs contributions from collocation differentiation
          const iint id = p_Nfields*(e*p_NpMax + n);
          rhsq[id+0] = -dpdx;
          rhsq[id+1] = -dpdy;
          rhsq[id+2] = -dpdz;
          rhsq[id+3] = -dudx-dvdy-dwdz;
        }
      }
    }
  }
}

kernel void acousticsVolume3Dbbdg_o2(const iint Nelements,
          const iint * restrict Elements,
          const dfloat * restrict vgeo,
          const iint * restrict D0ids,
          const iint * restrict D1ids,
          const iint * restrict D2ids,
          const iint * restrict D3ids,
          const dfloat * restrict Dvals,    
          const dfloat * restrict q,
          dfloat * restrict rhsq){
  
  for(iint eo=0;eo<Nelements;eo+=p_NblockV_o2;outer0){  // for all elements

    shared dfloat s_u[p_NblockV_o2][10];
    shared dfloat s_v[p_NblockV_o2][10];
    shared dfloat s_w[p_NblockV_o2][10];
    shared dfloat s_p[p_NblockV_o2][10];

    for(iint es=0;es<p_NblockV_o2;++es;inner1){// for all elements in block
      for(iint n=0;n<10;++n;inner0){     // for all nodes in this element

        iint et = eo+es; // element in block

        if(et<Nelements){
          const iint id = p_Nfields*(Elements[et]*p_NpMax + n);
          s_u[es][n] = q[id+0];
          s_v[es][n] = q[id+1];
          s_w[es][n] = q[id+2];
          s_p[es][n] = q[id+3];
        }
      }
    }

    // make sure all node data is loaded into shared
    barrier(localMemFence);

    for(iint es=0;es<p_NblockV_o2;++es;inner1){// for all elements in block
      for(iint n=0;n<10;++n;inner0){     // for all nodes in this element
  
        iint et = eo+es; // element in block
        if(et<Nelements){
          const iint e = Elements[et];

          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + RYID];
          const dfloat drdz = vgeo[e*p_Nvgeo + RZID];
          const dfloat dsdx = vgeo[e*p_Nvgeo + SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + SYID];
          const dfloat dsdz = vgeo[e*p_Nvgeo + SZID];
          const dfloat dtdx = vgeo[e*p_Nvgeo + TXID];
          const dfloat dtdy = vgeo[e*p_Nvgeo + TYID];
          const dfloat dtdz = vgeo[e*p_Nvgeo + TZID];

          // compute 'r', 's',  and 't' derivatives of (q_m) at node n
          const iint D0i1 = D0ids[n];
          const iint D1i1 = D1ids[n];
          const iint D2i1 = D2ids[n];
          const iint D3i1 = D3ids[n];
          const dfloat Dval1 = Dvals[n];
          
          const iint D0i2 = D0ids[n+10];
          const iint D1i2 = D1ids[n+10];
          const iint D2i2 = D2ids[n+10];
          const iint D3i2 = D3ids[n+10];
          const dfloat Dval2 = Dvals[n+10];

          const iint D0i3 = D0ids[n+2*10];
          const iint D1i3 = D1ids[n+2*10];
          const iint D2i3 = D2ids[n+2*10];
          const iint D3i3 = D3ids[n+2*10];    
          const dfloat Dval3 = Dvals[n+2*10];

          const iint D0i4 = D0ids[n+3*10];
          const iint D1i4 = D1ids[n+3*10];
          const iint D2i4 = D2ids[n+3*10];
          const iint D3i4 = D3ids[n+3*10];    
          const dfloat Dval4 = Dvals[n+3*10];

          const dfloat dudr = .5f*(Dval1*(s_u[es][D1i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D1i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D1i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D1i4] - s_u[es][D0i4]));
          const dfloat duds = .5f*(Dval1*(s_u[es][D2i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D2i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D2i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D2i4] - s_u[es][D0i4]));
          const dfloat dudt = .5f*(Dval1*(s_u[es][D3i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D3i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D3i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D3i4] - s_u[es][D0i4]));
          
          const dfloat dvdr = .5f*(Dval1*(s_v[es][D1i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D1i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D1i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D1i4] - s_v[es][D0i4]));
          const dfloat dvds = .5f*(Dval1*(s_v[es][D2i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D2i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D2i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D2i4] - s_v[es][D0i4]));
          const dfloat dvdt = .5f*(Dval1*(s_v[es][D3i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D3i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D3i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D3i4] - s_v[es][D0i4]));
          
          const dfloat dwdr = .5f*(Dval1*(s_w[es][D1i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D1i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D1i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D1i4] - s_w[es][D0i4]));
          const dfloat dwds = .5f*(Dval1*(s_w[es][D2i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D2i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D2i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D2i4] - s_w[es][D0i4]));
          const dfloat dwdt = .5f*(Dval1*(s_w[es][D3i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D3i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D3i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D3i4] - s_w[es][D0i4]));
          
          const dfloat dpdr = .5f*(Dval1*(s_p[es][D1i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D1i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D1i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D1i4] - s_p[es][D0i4]));
          const dfloat dpds = .5f*(Dval1*(s_p[es][D2i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D2i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D2i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D2i4] - s_p[es][D0i4]));
          const dfloat dpdt = .5f*(Dval1*(s_p[es][D3i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D3i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D3i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D3i4] - s_p[es][D0i4]));

          // chain rule
          const dfloat dudx = drdx*dudr + dsdx*duds + dtdx*dudt;
          const dfloat dvdy = drdy*dvdr + dsdy*dvds + dtdy*dvdt;
          const dfloat dwdz = drdz*dwdr + dsdz*dwds + dtdz*dwdt;
          const dfloat dpdx = drdx*dpdr + dsdx*dpds + dtdx*dpdt;
          const dfloat dpdy = drdy*dpdr + dsdy*dpds + dtdy*dpdt;
          const dfloat dpdz = drdz*dpdr + dsdz*dpds + dtdz*dpdt;
          
          // store acoustics rhs contributions from collocation differentiation
          const iint id = p_Nfields*(e*p_NpMax + n);
          rhsq[id+0] = -dpdx;
          rhsq[id+1] = -dpdy;
          rhsq[id+2] = -dpdz;
          rhsq[id+3] = -dudx-dvdy-dwdz;
        }
      }
    }
  }
}

kernel void acousticsVolume3Dbbdg_o3(const iint Nelements,
          const iint * restrict Elements,
          const dfloat * restrict vgeo,
          const iint * restrict D0ids,
          const iint * restrict D1ids,
          const iint * restrict D2ids,
          const iint * restrict D3ids,
          const dfloat * restrict Dvals,    
          const dfloat * restrict q,
          dfloat * restrict rhsq){
  
  for(iint eo=0;eo<Nelements;eo+=p_NblockV_o3;outer0){  // for all elements

    shared dfloat s_u[p_NblockV_o3][20];
    shared dfloat s_v[p_NblockV_o3][20];
    shared dfloat s_w[p_NblockV_o3][20];
    shared dfloat s_p[p_NblockV_o3][20];

    for(iint es=0;es<p_NblockV_o3;++es;inner1){// for all elements in block
      for(iint n=0;n<20;++n;inner0){     // for all nodes in this element

        iint et = eo+es; // element in block

        if(et<Nelements){
          const iint id = p_Nfields*(Elements[et]*p_NpMax + n);
          s_u[es][n] = q[id+0];
          s_v[es][n] = q[id+1];
          s_w[es][n] = q[id+2];
          s_p[es][n] = q[id+3];
        }
      }
    }

    // make sure all node data is loaded into shared
    barrier(localMemFence);

    for(iint es=0;es<p_NblockV_o3;++es;inner1){// for all elements in block
      for(iint n=0;n<20;++n;inner0){     // for all nodes in this element
  
        iint et = eo+es; // element in block
        if(et<Nelements){
          const iint e = Elements[et];

          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + RYID];
          const dfloat drdz = vgeo[e*p_Nvgeo + RZID];
          const dfloat dsdx = vgeo[e*p_Nvgeo + SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + SYID];
          const dfloat dsdz = vgeo[e*p_Nvgeo + SZID];
          const dfloat dtdx = vgeo[e*p_Nvgeo + TXID];
          const dfloat dtdy = vgeo[e*p_Nvgeo + TYID];
          const dfloat dtdz = vgeo[e*p_Nvgeo + TZID];

          // compute 'r', 's',  and 't' derivatives of (q_m) at node n
          const iint D0i1 = D0ids[n];
          const iint D1i1 = D1ids[n];
          const iint D2i1 = D2ids[n];
          const iint D3i1 = D3ids[n];
          const dfloat Dval1 = Dvals[n];
          
          const iint D0i2 = D0ids[n+20];
          const iint D1i2 = D1ids[n+20];
          const iint D2i2 = D2ids[n+20];
          const iint D3i2 = D3ids[n+20];
          const dfloat Dval2 = Dvals[n+20];

          const iint D0i3 = D0ids[n+2*20];
          const iint D1i3 = D1ids[n+2*20];
          const iint D2i3 = D2ids[n+2*20];
          const iint D3i3 = D3ids[n+2*20];    
          const dfloat Dval3 = Dvals[n+2*20];

          const iint D0i4 = D0ids[n+3*20];
          const iint D1i4 = D1ids[n+3*20];
          const iint D2i4 = D2ids[n+3*20];
          const iint D3i4 = D3ids[n+3*20];    
          const dfloat Dval4 = Dvals[n+3*20];

          const dfloat dudr = .5f*(Dval1*(s_u[es][D1i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D1i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D1i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D1i4] - s_u[es][D0i4]));
          const dfloat duds = .5f*(Dval1*(s_u[es][D2i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D2i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D2i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D2i4] - s_u[es][D0i4]));
          const dfloat dudt = .5f*(Dval1*(s_u[es][D3i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D3i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D3i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D3i4] - s_u[es][D0i4]));
          
          const dfloat dvdr = .5f*(Dval1*(s_v[es][D1i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D1i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D1i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D1i4] - s_v[es][D0i4]));
          const dfloat dvds = .5f*(Dval1*(s_v[es][D2i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D2i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D2i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D2i4] - s_v[es][D0i4]));
          const dfloat dvdt = .5f*(Dval1*(s_v[es][D3i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D3i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D3i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D3i4] - s_v[es][D0i4]));
          
          const dfloat dwdr = .5f*(Dval1*(s_w[es][D1i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D1i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D1i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D1i4] - s_w[es][D0i4]));
          const dfloat dwds = .5f*(Dval1*(s_w[es][D2i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D2i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D2i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D2i4] - s_w[es][D0i4]));
          const dfloat dwdt = .5f*(Dval1*(s_w[es][D3i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D3i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D3i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D3i4] - s_w[es][D0i4]));
          
          const dfloat dpdr = .5f*(Dval1*(s_p[es][D1i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D1i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D1i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D1i4] - s_p[es][D0i4]));
          const dfloat dpds = .5f*(Dval1*(s_p[es][D2i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D2i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D2i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D2i4] - s_p[es][D0i4]));
          const dfloat dpdt = .5f*(Dval1*(s_p[es][D3i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D3i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D3i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D3i4] - s_p[es][D0i4]));

          // chain rule
          const dfloat dudx = drdx*dudr + dsdx*duds + dtdx*dudt;
          const dfloat dvdy = drdy*dvdr + dsdy*dvds + dtdy*dvdt;
          const dfloat dwdz = drdz*dwdr + dsdz*dwds + dtdz*dwdt;
          const dfloat dpdx = drdx*dpdr + dsdx*dpds + dtdx*dpdt;
          const dfloat dpdy = drdy*dpdr + dsdy*dpds + dtdy*dpdt;
          const dfloat dpdz = drdz*dpdr + dsdz*dpds + dtdz*dpdt;
          
          // store acoustics rhs contributions from collocation differentiation
          const iint id = p_Nfields*(e*p_NpMax + n);
          rhsq[id+0] = -dpdx;
          rhsq[id+1] = -dpdy;
          rhsq[id+2] = -dpdz;
          rhsq[id+3] = -dudx-dvdy-dwdz;
        }
      }
    }
  }
}

kernel void acousticsVolume3Dbbdg_o4(const iint Nelements,
          const iint * restrict Elements,
          const dfloat * restrict vgeo,
          const iint * restrict D0ids,
          const iint * restrict D1ids,
          const iint * restrict D2ids,
          const iint * restrict D3ids,
          const dfloat * restrict Dvals,    
          const dfloat * restrict q,
          dfloat * restrict rhsq){
  
  for(iint eo=0;eo<Nelements;eo+=p_NblockV_o4;outer0){  // for all elements

    shared dfloat s_u[p_NblockV_o4][35];
    shared dfloat s_v[p_NblockV_o4][35];
    shared dfloat s_w[p_NblockV_o4][35];
    shared dfloat s_p[p_NblockV_o4][35];

    for(iint es=0;es<p_NblockV_o4;++es;inner1){// for all elements in block
      for(iint n=0;n<35;++n;inner0){     // for all nodes in this element

        iint et = eo+es; // element in block

        if(et<Nelements){
          const iint id = p_Nfields*(Elements[et]*p_NpMax + n);
          s_u[es][n] = q[id+0];
          s_v[es][n] = q[id+1];
          s_w[es][n] = q[id+2];
          s_p[es][n] = q[id+3];
        }
      }
    }

    // make sure all node data is loaded into shared
    barrier(localMemFence);

    for(iint es=0;es<p_NblockV_o4;++es;inner1){// for all elements in block
      for(iint n=0;n<35;++n;inner0){     // for all nodes in this element
  
        iint et = eo+es; // element in block
        if(et<Nelements){
          const iint e = Elements[et];

          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + RYID];
          const dfloat drdz = vgeo[e*p_Nvgeo + RZID];
          const dfloat dsdx = vgeo[e*p_Nvgeo + SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + SYID];
          const dfloat dsdz = vgeo[e*p_Nvgeo + SZID];
          const dfloat dtdx = vgeo[e*p_Nvgeo + TXID];
          const dfloat dtdy = vgeo[e*p_Nvgeo + TYID];
          const dfloat dtdz = vgeo[e*p_Nvgeo + TZID];

          // compute 'r', 's',  and 't' derivatives of (q_m) at node n
          const iint D0i1 = D0ids[n];
          const iint D1i1 = D1ids[n];
          const iint D2i1 = D2ids[n];
          const iint D3i1 = D3ids[n];
          const dfloat Dval1 = Dvals[n];
          
          const iint D0i2 = D0ids[n+35];
          const iint D1i2 = D1ids[n+35];
          const iint D2i2 = D2ids[n+35];
          const iint D3i2 = D3ids[n+35];
          const dfloat Dval2 = Dvals[n+35];

          const iint D0i3 = D0ids[n+2*35];
          const iint D1i3 = D1ids[n+2*35];
          const iint D2i3 = D2ids[n+2*35];
          const iint D3i3 = D3ids[n+2*35];    
          const dfloat Dval3 = Dvals[n+2*35];

          const iint D0i4 = D0ids[n+3*35];
          const iint D1i4 = D1ids[n+3*35];
          const iint D2i4 = D2ids[n+3*35];
          const iint D3i4 = D3ids[n+3*35];    
          const dfloat Dval4 = Dvals[n+3*35];

          const dfloat dudr = .5f*(Dval1*(s_u[es][D1i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D1i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D1i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D1i4] - s_u[es][D0i4]));
          const dfloat duds = .5f*(Dval1*(s_u[es][D2i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D2i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D2i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D2i4] - s_u[es][D0i4]));
          const dfloat dudt = .5f*(Dval1*(s_u[es][D3i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D3i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D3i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D3i4] - s_u[es][D0i4]));
          
          const dfloat dvdr = .5f*(Dval1*(s_v[es][D1i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D1i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D1i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D1i4] - s_v[es][D0i4]));
          const dfloat dvds = .5f*(Dval1*(s_v[es][D2i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D2i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D2i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D2i4] - s_v[es][D0i4]));
          const dfloat dvdt = .5f*(Dval1*(s_v[es][D3i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D3i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D3i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D3i4] - s_v[es][D0i4]));
          
          const dfloat dwdr = .5f*(Dval1*(s_w[es][D1i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D1i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D1i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D1i4] - s_w[es][D0i4]));
          const dfloat dwds = .5f*(Dval1*(s_w[es][D2i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D2i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D2i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D2i4] - s_w[es][D0i4]));
          const dfloat dwdt = .5f*(Dval1*(s_w[es][D3i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D3i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D3i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D3i4] - s_w[es][D0i4]));
          
          const dfloat dpdr = .5f*(Dval1*(s_p[es][D1i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D1i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D1i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D1i4] - s_p[es][D0i4]));
          const dfloat dpds = .5f*(Dval1*(s_p[es][D2i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D2i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D2i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D2i4] - s_p[es][D0i4]));
          const dfloat dpdt = .5f*(Dval1*(s_p[es][D3i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D3i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D3i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D3i4] - s_p[es][D0i4]));

          // chain rule
          const dfloat dudx = drdx*dudr + dsdx*duds + dtdx*dudt;
          const dfloat dvdy = drdy*dvdr + dsdy*dvds + dtdy*dvdt;
          const dfloat dwdz = drdz*dwdr + dsdz*dwds + dtdz*dwdt;
          const dfloat dpdx = drdx*dpdr + dsdx*dpds + dtdx*dpdt;
          const dfloat dpdy = drdy*dpdr + dsdy*dpds + dtdy*dpdt;
          const dfloat dpdz = drdz*dpdr + dsdz*dpds + dtdz*dpdt;
          
          // store acoustics rhs contributions from collocation differentiation
          const iint id = p_Nfields*(e*p_NpMax + n);
          rhsq[id+0] = -dpdx;
          rhsq[id+1] = -dpdy;
          rhsq[id+2] = -dpdz;
          rhsq[id+3] = -dudx-dvdy-dwdz;
        }
      }
    }
  }
}

kernel void acousticsVolume3Dbbdg_o5(const iint Nelements,
          const iint * restrict Elements,
          const dfloat * restrict vgeo,
          const iint * restrict D0ids,
          const iint * restrict D1ids,
          const iint * restrict D2ids,
          const iint * restrict D3ids,
          const dfloat * restrict Dvals,    
          const dfloat * restrict q,
          dfloat * restrict rhsq){
  
  for(iint eo=0;eo<Nelements;eo+=p_NblockV_o5;outer0){  // for all elements

    shared dfloat s_u[p_NblockV_o5][56];
    shared dfloat s_v[p_NblockV_o5][56];
    shared dfloat s_w[p_NblockV_o5][56];
    shared dfloat s_p[p_NblockV_o5][56];

    for(iint es=0;es<p_NblockV_o5;++es;inner1){// for all elements in block
      for(iint n=0;n<56;++n;inner0){     // for all nodes in this element

        iint et = eo+es; // element in block

        if(et<Nelements){
          const iint id = p_Nfields*(Elements[et]*p_NpMax + n);
          s_u[es][n] = q[id+0];
          s_v[es][n] = q[id+1];
          s_w[es][n] = q[id+2];
          s_p[es][n] = q[id+3];
        }
      }
    }

    // make sure all node data is loaded into shared
    barrier(localMemFence);

    for(iint es=0;es<p_NblockV_o5;++es;inner1){// for all elements in block
      for(iint n=0;n<56;++n;inner0){     // for all nodes in this element
  
        iint et = eo+es; // element in block
        if(et<Nelements){
          const iint e = Elements[et];

          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + RYID];
          const dfloat drdz = vgeo[e*p_Nvgeo + RZID];
          const dfloat dsdx = vgeo[e*p_Nvgeo + SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + SYID];
          const dfloat dsdz = vgeo[e*p_Nvgeo + SZID];
          const dfloat dtdx = vgeo[e*p_Nvgeo + TXID];
          const dfloat dtdy = vgeo[e*p_Nvgeo + TYID];
          const dfloat dtdz = vgeo[e*p_Nvgeo + TZID];

          // compute 'r', 's',  and 't' derivatives of (q_m) at node n
          const iint D0i1 = D0ids[n];
          const iint D1i1 = D1ids[n];
          const iint D2i1 = D2ids[n];
          const iint D3i1 = D3ids[n];
          const dfloat Dval1 = Dvals[n];
          
          const iint D0i2 = D0ids[n+56];
          const iint D1i2 = D1ids[n+56];
          const iint D2i2 = D2ids[n+56];
          const iint D3i2 = D3ids[n+56];
          const dfloat Dval2 = Dvals[n+56];

          const iint D0i3 = D0ids[n+2*56];
          const iint D1i3 = D1ids[n+2*56];
          const iint D2i3 = D2ids[n+2*56];
          const iint D3i3 = D3ids[n+2*56];    
          const dfloat Dval3 = Dvals[n+2*56];

          const iint D0i4 = D0ids[n+3*56];
          const iint D1i4 = D1ids[n+3*56];
          const iint D2i4 = D2ids[n+3*56];
          const iint D3i4 = D3ids[n+3*56];    
          const dfloat Dval4 = Dvals[n+3*56];

          const dfloat dudr = .5f*(Dval1*(s_u[es][D1i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D1i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D1i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D1i4] - s_u[es][D0i4]));
          const dfloat duds = .5f*(Dval1*(s_u[es][D2i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D2i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D2i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D2i4] - s_u[es][D0i4]));
          const dfloat dudt = .5f*(Dval1*(s_u[es][D3i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D3i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D3i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D3i4] - s_u[es][D0i4]));
          
          const dfloat dvdr = .5f*(Dval1*(s_v[es][D1i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D1i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D1i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D1i4] - s_v[es][D0i4]));
          const dfloat dvds = .5f*(Dval1*(s_v[es][D2i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D2i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D2i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D2i4] - s_v[es][D0i4]));
          const dfloat dvdt = .5f*(Dval1*(s_v[es][D3i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D3i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D3i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D3i4] - s_v[es][D0i4]));
          
          const dfloat dwdr = .5f*(Dval1*(s_w[es][D1i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D1i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D1i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D1i4] - s_w[es][D0i4]));
          const dfloat dwds = .5f*(Dval1*(s_w[es][D2i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D2i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D2i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D2i4] - s_w[es][D0i4]));
          const dfloat dwdt = .5f*(Dval1*(s_w[es][D3i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D3i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D3i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D3i4] - s_w[es][D0i4]));
          
          const dfloat dpdr = .5f*(Dval1*(s_p[es][D1i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D1i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D1i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D1i4] - s_p[es][D0i4]));
          const dfloat dpds = .5f*(Dval1*(s_p[es][D2i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D2i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D2i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D2i4] - s_p[es][D0i4]));
          const dfloat dpdt = .5f*(Dval1*(s_p[es][D3i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D3i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D3i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D3i4] - s_p[es][D0i4]));

          // chain rule
          const dfloat dudx = drdx*dudr + dsdx*duds + dtdx*dudt;
          const dfloat dvdy = drdy*dvdr + dsdy*dvds + dtdy*dvdt;
          const dfloat dwdz = drdz*dwdr + dsdz*dwds + dtdz*dwdt;
          const dfloat dpdx = drdx*dpdr + dsdx*dpds + dtdx*dpdt;
          const dfloat dpdy = drdy*dpdr + dsdy*dpds + dtdy*dpdt;
          const dfloat dpdz = drdz*dpdr + dsdz*dpds + dtdz*dpdt;
          
          // store acoustics rhs contributions from collocation differentiation
          const iint id = p_Nfields*(e*p_NpMax + n);
          rhsq[id+0] = -dpdx;
          rhsq[id+1] = -dpdy;
          rhsq[id+2] = -dpdz;
          rhsq[id+3] = -dudx-dvdy-dwdz;
        }
      }
    }
  }
}

kernel void acousticsVolume3Dbbdg_o6(const iint Nelements,
          const iint * restrict Elements,
          const dfloat * restrict vgeo,
          const iint * restrict D0ids,
          const iint * restrict D1ids,
          const iint * restrict D2ids,
          const iint * restrict D3ids,
          const dfloat * restrict Dvals,    
          const dfloat * restrict q,
          dfloat * restrict rhsq){
  
  for(iint eo=0;eo<Nelements;eo+=p_NblockV_o6;outer0){  // for all elements

    shared dfloat s_u[p_NblockV_o6][84];
    shared dfloat s_v[p_NblockV_o6][84];
    shared dfloat s_w[p_NblockV_o6][84];
    shared dfloat s_p[p_NblockV_o6][84];

    for(iint es=0;es<p_NblockV_o6;++es;inner1){// for all elements in block
      for(iint n=0;n<84;++n;inner0){     // for all nodes in this element

        iint et = eo+es; // element in block

        if(et<Nelements){
          const iint id = p_Nfields*(Elements[et]*p_NpMax + n);
          s_u[es][n] = q[id+0];
          s_v[es][n] = q[id+1];
          s_w[es][n] = q[id+2];
          s_p[es][n] = q[id+3];
        }
      }
    }

    // make sure all node data is loaded into shared
    barrier(localMemFence);

    for(iint es=0;es<p_NblockV_o6;++es;inner1){// for all elements in block
      for(iint n=0;n<84;++n;inner0){     // for all nodes in this element
  
        iint et = eo+es; // element in block
        if(et<Nelements){
          const iint e = Elements[et];

          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + RYID];
          const dfloat drdz = vgeo[e*p_Nvgeo + RZID];
          const dfloat dsdx = vgeo[e*p_Nvgeo + SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + SYID];
          const dfloat dsdz = vgeo[e*p_Nvgeo + SZID];
          const dfloat dtdx = vgeo[e*p_Nvgeo + TXID];
          const dfloat dtdy = vgeo[e*p_Nvgeo + TYID];
          const dfloat dtdz = vgeo[e*p_Nvgeo + TZID];

          // compute 'r', 's',  and 't' derivatives of (q_m) at node n
          const iint D0i1 = D0ids[n];
          const iint D1i1 = D1ids[n];
          const iint D2i1 = D2ids[n];
          const iint D3i1 = D3ids[n];
          const dfloat Dval1 = Dvals[n];
          
          const iint D0i2 = D0ids[n+84];
          const iint D1i2 = D1ids[n+84];
          const iint D2i2 = D2ids[n+84];
          const iint D3i2 = D3ids[n+84];
          const dfloat Dval2 = Dvals[n+84];

          const iint D0i3 = D0ids[n+2*84];
          const iint D1i3 = D1ids[n+2*84];
          const iint D2i3 = D2ids[n+2*84];
          const iint D3i3 = D3ids[n+2*84];    
          const dfloat Dval3 = Dvals[n+2*84];

          const iint D0i4 = D0ids[n+3*84];
          const iint D1i4 = D1ids[n+3*84];
          const iint D2i4 = D2ids[n+3*84];
          const iint D3i4 = D3ids[n+3*84];    
          const dfloat Dval4 = Dvals[n+3*84];

          const dfloat dudr = .5f*(Dval1*(s_u[es][D1i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D1i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D1i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D1i4] - s_u[es][D0i4]));
          const dfloat duds = .5f*(Dval1*(s_u[es][D2i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D2i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D2i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D2i4] - s_u[es][D0i4]));
          const dfloat dudt = .5f*(Dval1*(s_u[es][D3i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D3i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D3i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D3i4] - s_u[es][D0i4]));
          
          const dfloat dvdr = .5f*(Dval1*(s_v[es][D1i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D1i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D1i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D1i4] - s_v[es][D0i4]));
          const dfloat dvds = .5f*(Dval1*(s_v[es][D2i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D2i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D2i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D2i4] - s_v[es][D0i4]));
          const dfloat dvdt = .5f*(Dval1*(s_v[es][D3i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D3i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D3i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D3i4] - s_v[es][D0i4]));
          
          const dfloat dwdr = .5f*(Dval1*(s_w[es][D1i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D1i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D1i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D1i4] - s_w[es][D0i4]));
          const dfloat dwds = .5f*(Dval1*(s_w[es][D2i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D2i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D2i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D2i4] - s_w[es][D0i4]));
          const dfloat dwdt = .5f*(Dval1*(s_w[es][D3i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D3i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D3i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D3i4] - s_w[es][D0i4]));
          
          const dfloat dpdr = .5f*(Dval1*(s_p[es][D1i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D1i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D1i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D1i4] - s_p[es][D0i4]));
          const dfloat dpds = .5f*(Dval1*(s_p[es][D2i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D2i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D2i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D2i4] - s_p[es][D0i4]));
          const dfloat dpdt = .5f*(Dval1*(s_p[es][D3i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D3i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D3i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D3i4] - s_p[es][D0i4]));

          // chain rule
          const dfloat dudx = drdx*dudr + dsdx*duds + dtdx*dudt;
          const dfloat dvdy = drdy*dvdr + dsdy*dvds + dtdy*dvdt;
          const dfloat dwdz = drdz*dwdr + dsdz*dwds + dtdz*dwdt;
          const dfloat dpdx = drdx*dpdr + dsdx*dpds + dtdx*dpdt;
          const dfloat dpdy = drdy*dpdr + dsdy*dpds + dtdy*dpdt;
          const dfloat dpdz = drdz*dpdr + dsdz*dpds + dtdz*dpdt;
          
          // store acoustics rhs contributions from collocation differentiation
          const iint id = p_Nfields*(e*p_NpMax + n);
          rhsq[id+0] = -dpdx;
          rhsq[id+1] = -dpdy;
          rhsq[id+2] = -dpdz;
          rhsq[id+3] = -dudx-dvdy-dwdz;
        }
      }
    }
  }
}

kernel void acousticsVolume3Dbbdg_o7(const iint Nelements,
          const iint * restrict Elements,
          const dfloat * restrict vgeo,
          const iint * restrict D0ids,
          const iint * restrict D1ids,
          const iint * restrict D2ids,
          const iint * restrict D3ids,
          const dfloat * restrict Dvals,    
          const dfloat * restrict q,
          dfloat * restrict rhsq){
  
  for(iint eo=0;eo<Nelements;eo+=p_NblockV_o7;outer0){  // for all elements

    shared dfloat s_u[p_NblockV_o7][120];
    shared dfloat s_v[p_NblockV_o7][120];
    shared dfloat s_w[p_NblockV_o7][120];
    shared dfloat s_p[p_NblockV_o7][120];

    for(iint es=0;es<p_NblockV_o7;++es;inner1){// for all elements in block
      for(iint n=0;n<120;++n;inner0){     // for all nodes in this element

        iint et = eo+es; // element in block

        if(et<Nelements){
          const iint id = p_Nfields*(Elements[et]*p_NpMax + n);
          s_u[es][n] = q[id+0];
          s_v[es][n] = q[id+1];
          s_w[es][n] = q[id+2];
          s_p[es][n] = q[id+3];
        }
      }
    }

    // make sure all node data is loaded into shared
    barrier(localMemFence);

    for(iint es=0;es<p_NblockV_o7;++es;inner1){// for all elements in block
      for(iint n=0;n<120;++n;inner0){     // for all nodes in this element
  
        iint et = eo+es; // element in block
        if(et<Nelements){
          const iint e = Elements[et];

          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + RYID];
          const dfloat drdz = vgeo[e*p_Nvgeo + RZID];
          const dfloat dsdx = vgeo[e*p_Nvgeo + SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + SYID];
          const dfloat dsdz = vgeo[e*p_Nvgeo + SZID];
          const dfloat dtdx = vgeo[e*p_Nvgeo + TXID];
          const dfloat dtdy = vgeo[e*p_Nvgeo + TYID];
          const dfloat dtdz = vgeo[e*p_Nvgeo + TZID];

          // compute 'r', 's',  and 't' derivatives of (q_m) at node n
          const iint D0i1 = D0ids[n];
          const iint D1i1 = D1ids[n];
          const iint D2i1 = D2ids[n];
          const iint D3i1 = D3ids[n];
          const dfloat Dval1 = Dvals[n];
          
          const iint D0i2 = D0ids[n+120];
          const iint D1i2 = D1ids[n+120];
          const iint D2i2 = D2ids[n+120];
          const iint D3i2 = D3ids[n+120];
          const dfloat Dval2 = Dvals[n+120];

          const iint D0i3 = D0ids[n+2*120];
          const iint D1i3 = D1ids[n+2*120];
          const iint D2i3 = D2ids[n+2*120];
          const iint D3i3 = D3ids[n+2*120];    
          const dfloat Dval3 = Dvals[n+2*120];

          const iint D0i4 = D0ids[n+3*120];
          const iint D1i4 = D1ids[n+3*120];
          const iint D2i4 = D2ids[n+3*120];
          const iint D3i4 = D3ids[n+3*120];    
          const dfloat Dval4 = Dvals[n+3*120];

          const dfloat dudr = .5f*(Dval1*(s_u[es][D1i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D1i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D1i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D1i4] - s_u[es][D0i4]));
          const dfloat duds = .5f*(Dval1*(s_u[es][D2i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D2i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D2i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D2i4] - s_u[es][D0i4]));
          const dfloat dudt = .5f*(Dval1*(s_u[es][D3i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D3i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D3i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D3i4] - s_u[es][D0i4]));
          
          const dfloat dvdr = .5f*(Dval1*(s_v[es][D1i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D1i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D1i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D1i4] - s_v[es][D0i4]));
          const dfloat dvds = .5f*(Dval1*(s_v[es][D2i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D2i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D2i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D2i4] - s_v[es][D0i4]));
          const dfloat dvdt = .5f*(Dval1*(s_v[es][D3i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D3i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D3i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D3i4] - s_v[es][D0i4]));
          
          const dfloat dwdr = .5f*(Dval1*(s_w[es][D1i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D1i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D1i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D1i4] - s_w[es][D0i4]));
          const dfloat dwds = .5f*(Dval1*(s_w[es][D2i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D2i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D2i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D2i4] - s_w[es][D0i4]));
          const dfloat dwdt = .5f*(Dval1*(s_w[es][D3i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D3i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D3i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D3i4] - s_w[es][D0i4]));
          
          const dfloat dpdr = .5f*(Dval1*(s_p[es][D1i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D1i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D1i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D1i4] - s_p[es][D0i4]));
          const dfloat dpds = .5f*(Dval1*(s_p[es][D2i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D2i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D2i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D2i4] - s_p[es][D0i4]));
          const dfloat dpdt = .5f*(Dval1*(s_p[es][D3i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D3i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D3i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D3i4] - s_p[es][D0i4]));

          // chain rule
          const dfloat dudx = drdx*dudr + dsdx*duds + dtdx*dudt;
          const dfloat dvdy = drdy*dvdr + dsdy*dvds + dtdy*dvdt;
          const dfloat dwdz = drdz*dwdr + dsdz*dwds + dtdz*dwdt;
          const dfloat dpdx = drdx*dpdr + dsdx*dpds + dtdx*dpdt;
          const dfloat dpdy = drdy*dpdr + dsdy*dpds + dtdy*dpdt;
          const dfloat dpdz = drdz*dpdr + dsdz*dpds + dtdz*dpdt;
          
          // store acoustics rhs contributions from collocation differentiation
          const iint id = p_Nfields*(e*p_NpMax + n);
          rhsq[id+0] = -dpdx;
          rhsq[id+1] = -dpdy;
          rhsq[id+2] = -dpdz;
          rhsq[id+3] = -dudx-dvdy-dwdz;
        }
      }
    }
  }
}

kernel void acousticsVolume3Dbbdg_o8(const iint Nelements,
          const iint * restrict Elements,
          const dfloat * restrict vgeo,
          const iint * restrict D0ids,
          const iint * restrict D1ids,
          const iint * restrict D2ids,
          const iint * restrict D3ids,
          const dfloat * restrict Dvals,    
          const dfloat * restrict q,
          dfloat * restrict rhsq){
  
  for(iint eo=0;eo<Nelements;eo+=p_NblockV_o8;outer0){  // for all elements

    shared dfloat s_u[p_NblockV_o8][165];
    shared dfloat s_v[p_NblockV_o8][165];
    shared dfloat s_w[p_NblockV_o8][165];
    shared dfloat s_p[p_NblockV_o8][165];

    for(iint es=0;es<p_NblockV_o8;++es;inner1){// for all elements in block
      for(iint n=0;n<165;++n;inner0){     // for all nodes in this element

        iint et = eo+es; // element in block

        if(et<Nelements){
          const iint id = p_Nfields*(Elements[et]*p_NpMax + n);
          s_u[es][n] = q[id+0];
          s_v[es][n] = q[id+1];
          s_w[es][n] = q[id+2];
          s_p[es][n] = q[id+3];
        }
      }
    }

    // make sure all node data is loaded into shared
    barrier(localMemFence);

    for(iint es=0;es<p_NblockV_o8;++es;inner1){// for all elements in block
      for(iint n=0;n<165;++n;inner0){     // for all nodes in this element
  
        iint et = eo+es; // element in block
        if(et<Nelements){
          const iint e = Elements[et];

          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + RYID];
          const dfloat drdz = vgeo[e*p_Nvgeo + RZID];
          const dfloat dsdx = vgeo[e*p_Nvgeo + SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + SYID];
          const dfloat dsdz = vgeo[e*p_Nvgeo + SZID];
          const dfloat dtdx = vgeo[e*p_Nvgeo + TXID];
          const dfloat dtdy = vgeo[e*p_Nvgeo + TYID];
          const dfloat dtdz = vgeo[e*p_Nvgeo + TZID];

          // compute 'r', 's',  and 't' derivatives of (q_m) at node n
          const iint D0i1 = D0ids[n];
          const iint D1i1 = D1ids[n];
          const iint D2i1 = D2ids[n];
          const iint D3i1 = D3ids[n];
          const dfloat Dval1 = Dvals[n];
          
          const iint D0i2 = D0ids[n+165];
          const iint D1i2 = D1ids[n+165];
          const iint D2i2 = D2ids[n+165];
          const iint D3i2 = D3ids[n+165];
          const dfloat Dval2 = Dvals[n+165];

          const iint D0i3 = D0ids[n+2*165];
          const iint D1i3 = D1ids[n+2*165];
          const iint D2i3 = D2ids[n+2*165];
          const iint D3i3 = D3ids[n+2*165];    
          const dfloat Dval3 = Dvals[n+2*165];

          const iint D0i4 = D0ids[n+3*165];
          const iint D1i4 = D1ids[n+3*165];
          const iint D2i4 = D2ids[n+3*165];
          const iint D3i4 = D3ids[n+3*165];    
          const dfloat Dval4 = Dvals[n+3*165];

          const dfloat dudr = .5f*(Dval1*(s_u[es][D1i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D1i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D1i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D1i4] - s_u[es][D0i4]));
          const dfloat duds = .5f*(Dval1*(s_u[es][D2i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D2i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D2i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D2i4] - s_u[es][D0i4]));
          const dfloat dudt = .5f*(Dval1*(s_u[es][D3i1] - s_u[es][D0i1]) +
                                   Dval2*(s_u[es][D3i2] - s_u[es][D0i2]) +
                                   Dval3*(s_u[es][D3i3] - s_u[es][D0i3]) +
                                   Dval4*(s_u[es][D3i4] - s_u[es][D0i4]));
          
          const dfloat dvdr = .5f*(Dval1*(s_v[es][D1i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D1i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D1i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D1i4] - s_v[es][D0i4]));
          const dfloat dvds = .5f*(Dval1*(s_v[es][D2i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D2i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D2i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D2i4] - s_v[es][D0i4]));
          const dfloat dvdt = .5f*(Dval1*(s_v[es][D3i1] - s_v[es][D0i1]) +
                                   Dval2*(s_v[es][D3i2] - s_v[es][D0i2]) +
                                   Dval3*(s_v[es][D3i3] - s_v[es][D0i3]) +
                                   Dval4*(s_v[es][D3i4] - s_v[es][D0i4]));
          
          const dfloat dwdr = .5f*(Dval1*(s_w[es][D1i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D1i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D1i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D1i4] - s_w[es][D0i4]));
          const dfloat dwds = .5f*(Dval1*(s_w[es][D2i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D2i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D2i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D2i4] - s_w[es][D0i4]));
          const dfloat dwdt = .5f*(Dval1*(s_w[es][D3i1] - s_w[es][D0i1]) +
                                   Dval2*(s_w[es][D3i2] - s_w[es][D0i2]) +
                                   Dval3*(s_w[es][D3i3] - s_w[es][D0i3]) +
                                   Dval4*(s_w[es][D3i4] - s_w[es][D0i4]));
          
          const dfloat dpdr = .5f*(Dval1*(s_p[es][D1i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D1i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D1i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D1i4] - s_p[es][D0i4]));
          const dfloat dpds = .5f*(Dval1*(s_p[es][D2i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D2i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D2i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D2i4] - s_p[es][D0i4]));
          const dfloat dpdt = .5f*(Dval1*(s_p[es][D3i1] - s_p[es][D0i1]) +
                                   Dval2*(s_p[es][D3i2] - s_p[es][D0i2]) +
                                   Dval3*(s_p[es][D3i3] - s_p[es][D0i3]) +
                                   Dval4*(s_p[es][D3i4] - s_p[es][D0i4]));

          // chain rule
          const dfloat dudx = drdx*dudr + dsdx*duds + dtdx*dudt;
          const dfloat dvdy = drdy*dvdr + dsdy*dvds + dtdy*dvdt;
          const dfloat dwdz = drdz*dwdr + dsdz*dwds + dtdz*dwdt;
          const dfloat dpdx = drdx*dpdr + dsdx*dpds + dtdx*dpdt;
          const dfloat dpdy = drdy*dpdr + dsdy*dpds + dtdy*dpdt;
          const dfloat dpdz = drdz*dpdr + dsdz*dpds + dtdz*dpdt;
          
          // store acoustics rhs contributions from collocation differentiation
          const iint id = p_Nfields*(e*p_NpMax + n);
          rhsq[id+0] = -dpdx;
          rhsq[id+1] = -dpdy;
          rhsq[id+2] = -dpdz;
          rhsq[id+3] = -dudx-dvdy-dwdz;
        }
      }
    }
  }
}