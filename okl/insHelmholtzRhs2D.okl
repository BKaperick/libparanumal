
void boundaryConditionsIpdg2D(const iint bc,
			      const dfloat  t, const dfloat  x, const dfloat  y,
			      const dfloat  nx,   const dfloat  ny,
			      dfloat * restrict uB, dfloat * restrict uxB, dfloat * restrict uyB,
			      dfloat * restrict vB, dfloat * restrict vxB, dfloat * restrict vyB){
  if((bc==1)||(bc==4)){ // Wall/Slip 
    *uB = 0.f; 
    *vB = 0.f;

    *uxB = 0.f; 
    *uyB = 0.f; 
    *vxB = 0.f;
    *vyB = 0.f;
  } else if(bc==2){ // Inflow 
#if 0
    dfloat nu   = 1.0f/40.0f;
    dfloat lambda = 1.f/(2.f * nu) - occaSqrt(1.f/(4.f*nu*nu) + 4.f*OCCA_PI*OCCA_PI) ;
    
    *uB = 1.0f - occaExp(lambda*x)*occaCos(2.f*OCCA_PI*y) ; 
    *vB = 0.5f*lambda/(OCCA_PI)*occaExp(lambda*x)*occaSin(2.f*OCCA_PI*y);
#endif
#if 0
    *uB = y*(4.5f-y)/(2.25f*2.25f);
    *vB = 0;
#endif
#if 1
    *uB = 1;
    *vB = 0;
#endif
    *uxB = 0.f; 
    *uyB = 0.f; 
    *vxB = 0.f;
    *vyB = 0.f; 
  } else if(bc==3){ // Outflow 
     // do nothing 
    *uB = 0.f; 
    *vB = 0.f; 
#if 0
    dfloat nu   = 1.0f/40.0f;
    dfloat lambda = 1.f/(2.f * nu) - occaSqrt(1.f/(4.f*nu*nu) + 4.f*OCCA_PI*OCCA_PI) ;
    
    *uxB = -lambda*occaExp(lambda*x)*occaCos(2*OCCA_PI*y);
    *uyB = 2.f*OCCA_PI*occaExp(lambda*x)*occaSin(2.f*OCCA_PI*y);
    *vxB =  lambda*lambda*occaExp(lambda*x)*occaSin(2*OCCA_PI*y)/(2*OCCA_PI);
    *vyB =  lambda*occaExp(lambda*x)*occaCos(2*OCCA_PI*y);
#else
    *uxB = 0.f; 
    *uyB = 0.f; 
    *vxB = 0.f;
    *vyB = 0.f;
    #endif
  }
}

// Compute RHS Forcing i.e. 1/nu*(-grad(Pr) + sum(a_i x u_i)^(n-i) -sum(b_i x N(u)^(n-i))
kernel void insHelmholtzRhsForcing2D(const iint Nelements,
				     const dfloat * restrict vgeo,
				     const dfloat * restrict MM,
				     const dfloat a0,
				     const dfloat a1,
				     const dfloat a2,
				     const dfloat b0,
				     const dfloat b1,
				     const dfloat b2,
				     const dfloat c0,
				     const dfloat c1,
				     const dfloat c2,
             const iint index,
             const iint offset,
             const dfloat * restrict U,
             const dfloat * restrict V,
				     const dfloat * restrict NU,
				     const dfloat * restrict NV,
             const dfloat * restrict Px,
             const dfloat * restrict Py,
				     dfloat * restrict rhsU, 
             dfloat * restrict rhsV){
  
  for(iint eo=0;eo<Nelements;eo+=p_NblockV;outer0){ 

    shared dfloat s_rhsU[p_NblockV][p_Np];
    shared dfloat s_rhsV[p_NblockV][p_Np];
   
    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element
      	iint e = eo+es; // element in block
      	if(e<Nelements){ 
          //hard coded for 3 stages
          const int index0 = (index+0)%3;
          const int index1 = (index+2)%3; //back one step 
          const int index2 = (index+1)%3; //back two steps

      	  const iint id0   = n + p_Np*(e+index0*offset);
          const iint id1   = n + p_Np*(e+index1*offset);
          const iint id2   = n + p_Np*(e+index2*offset);
      	  
      	  const dfloat J = vgeo[e*p_Nvgeo + p_JID];
      	  
          //U 
      	  const dfloat Um0  = U[id0];
          const dfloat Um1  = U[id1];
          const dfloat Um2  = U[id2];
          const dfloat Vm0  = V[id0];
          const dfloat Vm1  = V[id1];
          const dfloat Vm2  = V[id2];
      	  // NU 
      	  const dfloat NUm0 = NU[id0];
          const dfloat NUm1 = NU[id1];
          const dfloat NUm2 = NU[id2];
      	  const dfloat NVm0 = NV[id0];
          const dfloat NVm1 = NV[id1];
          const dfloat NVm2 = NV[id2];
          // gradP 
          const dfloat Pxm0 = Px[id0];
          const dfloat Pxm1 = Px[id1];
          const dfloat Pxm2 = Px[id2];
          const dfloat Pym0 = Py[id0];
          const dfloat Pym1 = Py[id1];
          const dfloat Pym2 = Py[id2];

      	  // -> (-L + gamma/dt*nu I)U = 1/nu*[sum(b_i*U_i)/dt - sum(a_i*NU_i) - sum(a_i*gradP_i)]
          s_rhsU[es][n]  = J*p_inu*( + (b0*Um0 +b1*Um1 +b2*Um2 )*p_idt 
                                     - (c0*Pxm0+c1*Pxm1+c2*Pxm2) 
                                     - (a0*NUm0+a1*NUm1+a2*NUm2));
          s_rhsV[es][n]  = J*p_inu*( + (b0*Vm0 +b1*Vm1 +b2*Vm2 )*p_idt 
                                     - (c0*Pym0+c1*Pym1+c2*Pym2) 
                                     - (a0*NVm0+a1*NVm1+a2*NVm2)); 
      	}
      }
    }

    // make sure all node data is loaded into shared
    barrier(localMemFence);

    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element
      	iint e = eo+es; // element in block
      	if(e<Nelements){	  
      	  // Multiplay with Mass Matrix
      	  dfloat rhsu = 0.f, rhsv = 0.f; 
      	  occaUnroll(p_Np)			
    	    for(iint i=0;i<p_Np;++i){
    	      const dfloat M = MM[n+i*p_Np];
    	      rhsu  += M*s_rhsU[es][i];
    	      rhsv  += M*s_rhsV[es][i];
    	    }
      	  // Update
      	  const iint id = e*p_Np+n;
      	  rhsU[id] = rhsu;
      	  rhsV[id] = rhsv; 	 
      	}
      }
    }
  }
}

kernel void insHelmholtzRhsIpdgBC2D(const int Nelements,
				    const iint * restrict vmapM,
				    const iint * restrict vmapP,
				    const dfloat tau,
				    const dfloat t,
				    const dfloat * restrict x,
				    const dfloat * restrict y,
				    const dfloat * restrict vgeo,
				    const dfloat * restrict sgeo,
				    const iint   * restrict EToB,
				    const dfloat * restrict DrT,
				    const dfloat * restrict DsT,
				    const dfloat * restrict LIFTT,
				    const dfloat * restrict MM,
				    dfloat * restrict rhsU,
				    dfloat * restrict rhsV){
  
  for(int e=0;e<Nelements;++e;outer0){
    shared  dfloat s_dudx[p_Np];
    shared  dfloat s_dudy[p_Np];
    shared  dfloat s_dvdx[p_Np];
    shared  dfloat s_dvdy[p_Np];

    shared  dfloat s_lapu[p_Np];
    shared  dfloat s_lapv[p_Np];

    shared  dfloat s_nxdu[p_NfacesNfp];
    shared  dfloat s_nydu[p_NfacesNfp];
    shared  dfloat s_nxdv[p_NfacesNfp];
    shared  dfloat s_nydv[p_NfacesNfp];

    shared  dfloat s_lapuflux[p_NfacesNfp];
    shared  dfloat s_lapvflux[p_NfacesNfp];

    shared  dfloat s_Lnxdu[p_Np];
    shared  dfloat s_Lnydu[p_Np];
    shared  dfloat s_Lnxdv[p_Np];
    shared  dfloat s_Lnydv[p_Np];

    exclusive iint idM, bcsum;
    exclusive dfloat nx, ny, sJ, invJ, hinv;
    
    for(int n=0;n<p_maxNodes;++n;inner0){
      if(n<p_NfacesNfp){
      	const iint id  = n + e*p_Nfaces*p_Nfp;
      	idM = vmapM[id];					
     
      	const iint face = n/p_Nfp;

      	dfloat4 graduP, gradvP;
      	graduP.x = 0.f; graduP.y = 0.f; graduP.w = 0.f;
      	gradvP.x = 0.f; gradvP.y = 0.f; gradvP.w = 0.f;
      	
      	// load surface geofactors for this face
      	iint sid = p_Nsgeo*(e*p_Nfaces+face);
      	nx = sgeo[sid+p_NXID];
      	ny = sgeo[sid+p_NYID];
      	sJ = sgeo[sid+p_SJID];
      	invJ = sgeo[sid+p_IJID];
      	hinv = sgeo[sid+p_IHID];

        int bc = EToB[face+p_Nfaces*e];
        if(bc>0) boundaryConditionsIpdg2D(bc, t, x[idM], y[idM], nx, ny, 
					  &graduP.w, &graduP.x, &graduP.y,
					  &gradvP.w, &gradvP.x, &gradvP.y);

      	const dfloat du = graduP.w;
      	const dfloat dv = gradvP.w;
      	const dfloat half = 1f;
      	
      	s_nxdu[n] = half*sJ*invJ*nx*du;
      	s_nydu[n] = half*sJ*invJ*ny*du;
      	s_nxdv[n] = half*sJ*invJ*nx*dv;
	      s_nydv[n] = half*sJ*invJ*ny*dv;

      	s_lapuflux[n] = half*sJ*invJ*(-nx*(graduP.x)-ny*(graduP.y)
				               -tau*hinv*du);
      	s_lapvflux[n] = half*sJ*invJ*(-nx*(gradvP.x)-ny*(gradvP.y)
				               -tau*hinv*dv);
      }
    }

    barrier(localMemFence);

    // dqdx += LIFT*(sJ/J)*nx*dq
    for(int n=0;n<p_maxNodes;++n;inner0){
      if(n<p_Np){
      	const int gid = e*p_Nvgeo;
      	const dfloat drdx = vgeo[gid + p_RXID];
      	const dfloat drdy = vgeo[gid + p_RYID];
      	const dfloat dsdx = vgeo[gid + p_SXID];
      	const dfloat dsdy = vgeo[gid + p_SYID];

      	dfloat Lnxdu = 0;
      	dfloat Lnydu = 0;
      	dfloat Lnxdv = 0;
      	dfloat Lnydv = 0;
      				
      	occaUnroll(p_NfacesNfp)
      	  for(iint i=0;i<p_NfacesNfp;++i){
      	    Lnxdu += LIFTT[n+i*p_Np]*s_nxdu[i];
      	    Lnydu += LIFTT[n+i*p_Np]*s_nydu[i];
      	    Lnxdv += LIFTT[n+i*p_Np]*s_nxdv[i];
      	    Lnydv += LIFTT[n+i*p_Np]*s_nydv[i];
      	  }
    
      	dfloat dudx = Lnxdu;
      	dfloat dudy = Lnydu;
      	dfloat dvdx = Lnxdv;
      	dfloat dvdy = Lnydv;
      	s_dudx[n] = drdx*dudx + drdy*dudy; // abuse of notation
      	s_dudy[n] = dsdx*dudx + dsdy*dudy;
      	s_dvdx[n] = drdx*dvdx + drdy*dvdy; // abuse of notation
      	s_dvdy[n] = dsdx*dvdx + dsdy*dvdy;

      	s_Lnxdu[n] = Lnxdu;
      	s_Lnydu[n] = Lnydu;
      	s_Lnxdv[n] = Lnxdv;
      	s_Lnydv[n] = Lnydv;
      }
    }

    barrier(localMemFence);

    for(int n=0;n<p_maxNodes;++n;inner0){
      if(n<p_NfacesNfp){
      	iint id = idM%p_Np;
      	s_lapuflux[n] += sJ*invJ*(nx*s_Lnxdu[id]+ny*s_Lnydu[id]);
      	s_lapvflux[n] += sJ*invJ*(nx*s_Lnxdv[id]+ny*s_Lnydv[id]);
      }

      if(n<p_Np){
      	dfloat laur = 0, laus = 0;
      	dfloat lavr = 0, lavs = 0;

      	occaUnroll(p_Np)
    	  for(int i=0;i<p_Np;++i) {
  	      laur += DrT[n+i*p_Np]*s_dudx[i];
  	      laus += DsT[n+i*p_Np]*s_dudy[i];
  	      lavr += DrT[n+i*p_Np]*s_dvdx[i];
  	      lavs += DsT[n+i*p_Np]*s_dvdy[i];
  	    }

      	s_lapu[n] = -(laur+laus);
      	s_lapv[n] = -(lavr+lavs);
      }
      
    }
    
    barrier(localMemFence);

    for(int n=0;n<p_maxNodes;++n;inner0){
      if(n<p_Np){
      	dfloat lau = 0;
      	dfloat lav = 0;
      				
      	// lift remaining surface terms
      	occaUnroll(p_NfacesNfp)
    	  for(int i=0;i<p_NfacesNfp;++i){
    	    lau += LIFTT[n+i*p_Np]*s_lapuflux[i];
    	    lav += LIFTT[n+i*p_Np]*s_lapvflux[i];
    	  }
      				
      	s_lapu[n] += lau;
      	s_lapv[n] += lav;
      }
    }

    barrier(localMemFence);

    for(int n=0;n<p_maxNodes;++n;inner0){
      if(n<p_Np){
      	const dfloat J = vgeo[e*p_Nvgeo + p_JID];
      				
      	dfloat Mlapu = 0;
      	dfloat Mlapv = 0;

      	// multiply by mass matrix
      	occaUnroll(p_Np)
    	  for(int i=0;i<p_Np;++i){
    	    Mlapu += MM[n+i*p_Np]*s_lapu[i];
    	    Mlapv += MM[n+i*p_Np]*s_lapv[i];
    	  }
      			
      	const iint id = e*p_Np+n;
    	  rhsU[id] -=  J*Mlapu;
    	  rhsV[id] -=  J*Mlapv;
      }
    }
  }
}
