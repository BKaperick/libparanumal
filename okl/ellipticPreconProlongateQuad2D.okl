kernel void ellipticPreconProlongateQuad2D(const int Nelements,
					   const dfloat * restrict V1,
					   const dfloat * restrict q1,
					   dfloat * restrict qN){
  
  for(int e=0;e<Nelements;++e;outer0){
    for(int n=0;n<p_Np;++n;inner0){
      dfloat tmp = 0; // qN[e*p_Np+n] ;

      for(int i=0;i<p_Nverts;++i){
	tmp += V1[i*p_Np + n]*q1[e*p_Nverts + i];
      }
      qN[e*p_Np+n] = tmp;
    }
  }
}


#if 0
kernel void ellipticPreconProlongateQuad2D(const int Nelements,
					   const dfloat * restrict V1,
					   const dfloat * restrict q1,
					   dfloat * restrict qN){
  
  
  for(int e=0;e<Nelements;++e;outer0){
    shared dfloat s_q1N[p_Nq1][p_Nq];
    shared dfloat s_q11[p_Nq1][p_Nq1];
    shared dfloat s_V1[p_Nq1][p_Nq];
    
    // prefetch to shared
    
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
	int id = i+j*p_Nq;
	if(id<p_Nq1*p_Nq1){
	  s_q11[0][id] = q1[id+e*p_Nq1*p_Nq1];
	}
	if(id<p_Nq1*p_Nq){
	  s_V1[0][id] = V1[id];
	}
      }
    }
    
    barrier(localMemFence);

    // prolongate in i index
    
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
	if(j<2){
	  dfloat res = 0;
	  for(int m=0;m<p_Nq1;++m)
	    res += s_V1[i][m]*s_q11[j][m];
	  s_q1N[j][i] = res;
	}
      }
    }

    barrier(localMemFence);

    // coarsen in i index

    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){

	dfloat res = 0;
	for(int m=0;m<p_Nq1;++m)
	  res += s_V1[j][m]*s_q1N[m][i];

	qN[i+j*p_Nq+e*p_Nq*p_Nq] = res;
      }
    }
  }
}
#endif
