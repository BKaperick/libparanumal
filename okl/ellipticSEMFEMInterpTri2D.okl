// block Jacobi preconditioner with inverse of mass matrix
// (assumes mass matrix dominant)
kernel void ellipticSEMFEMInterpTri2D(const int Nelements,
                                     const dfloat * restrict I,
                                     const dfloat * restrict q,
                                     dfloat * restrict Iq){

  for(iint eo=0;eo<Nelements;eo+=p_NblockV;outer0){

    shared dfloat s_q[p_NblockV][p_Np];
    shared dfloat s_I[p_Np][p_NpFEM];

    for(iint es=0;es<p_NblockV;++es;inner1){
      for(iint n=0;n<p_NpFEM;++n;inner0){
        iint t = n + es*p_NpFEM;

        if(t<p_Np*p_NblockV)
          if((eo*p_Np + t)<Nelements*p_Np)
            s_q[0][t] = q[eo*p_Np+t];

        while(t<p_NpFEM*p_Np){
          s_I[0][t] = I[t];
          t += p_NpFEM*p_NblockV;
        }
      }
    }

    barrier(localMemFence);

    for(iint es=0;es<p_NblockV;++es;inner1){
      for(iint n=0;n<p_NpFEM;++n;inner0){
        iint e = eo + es;
        if(e<Nelements){
          dfloat tmp = 0.;

          occaUnroll(p_Np)
            for(iint i=0;i<p_Np;++i){
              tmp += s_I[i][n]*s_q[es][i];
            }

          Iq[e*p_NpFEM+n] = tmp;
        }
      }
    }
  }
}
