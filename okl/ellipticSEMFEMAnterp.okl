
kernel void ellipticSEMFEMAnterp(const dlong Nelements,
                                 const dfloat * restrict P,
                                 const dfloat * restrict q,
                                 dfloat * restrict Pq){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;outer0){

    shared dfloat s_q[p_NblockV][p_NpFEM];

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){
        dlong t = n + es*p_Np;

        while(t<p_NpFEM*p_NblockV){
          if(eo*p_NpFEM + t<Nelements*p_NpFEM)
            s_q[0][t] = q[eo*p_NpFEM+t];
          t += p_Np*p_NblockV;
        }
      }
    }

    barrier(localMemFence);

    for(int es=0;es<p_NblockV;++es;inner1){
      for(int n=0;n<p_Np;++n;inner0){
        const dlong e = eo + es;
        if(e<Nelements){
          dfloat tmp = 0;
          occaUnroll(p_NpFEM)
            for(int i=0;i<p_NpFEM;++i){
              const dfloat Pn = P[i+n*p_NpFEM];
              tmp += Pn*s_q[es][i]; // bank conflict ?
            }
          Pq[e*p_Np+n] = tmp; // *invDegree[e*p_Np+n];
        }
      }
    }
  }
}
