
//partially sum the entries of a vector using a block-wise reductions

@kernel void sum(const dlong N,
                @restrict const  dfloat *  x,
                @restrict dfloat *  sx){
  

  for(dlong b=0;b<(N+p_blockSize-1)/p_blockSize;++b;@outer(0)){
    
    @shared volatile dfloat s_sx[p_blockSize];

    for(int t=0;t<p_blockSize;++t;@inner(0)){
      const dlong id = t + b*p_blockSize;
      s_sx[t] = (id<N) ? x[id] : 0.f;
    }

    @barrier("local");

#if p_blockSize>512
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<512) s_sx[t] += s_sx[t+512];
    @barrier("local");
#endif

#if p_blockSize>256
    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<256) s_sx[t] += s_sx[t+256];
    @barrier("local");
#endif

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<128) s_sx[t] += s_sx[t+128];
    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 64) s_sx[t] += s_sx[t+ 64];
    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 32) s_sx[t] += s_sx[t+ 32];
    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t< 16) s_sx[t] += s_sx[t+ 16];
    //    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  8) s_sx[t] += s_sx[t+  8];
    //    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  4) s_sx[t] += s_sx[t+  4];
    //    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  2) s_sx[t] += s_sx[t+  2];
    //    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) if(t<  1) sx[b] = s_sx[0] + s_sx[1];
  }
}
