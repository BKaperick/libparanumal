kernel void ellipticPreconProlongate_v0(const iint Nelements,
          const dfloat * restrict V1,
          const dfloat * restrict q1,
          dfloat * restrict qN){

  for(iint e=0;e<Nelements;++e;outer0){
    for(iint n=0;n<p_Np;++n;inner0){
      dfloat tmp = 0; // qN[e*p_Np+n] ;

      for(iint i=0;i<p_Nverts;++i){
        tmp += V1[i*p_Np + n]*q1[e*p_Nverts + i];
      }
      qN[e*p_Np+n] = tmp;
    }
  }
}


kernel void ellipticPreconProlongate(const iint Nelements,
             const dfloat * restrict R,
             const dfloat * restrict qCoarse,
             dfloat * restrict qFine){

  for(iint eo=0;eo<Nelements;eo+=p_NblockV;outer0){

    shared dfloat s_qCoarse[p_NblockV][p_NpCoarse];
    shared dfloat s_R[p_NpCoarse][p_NpFine];

    for(iint es=0;es<p_NblockV;++es;inner1){
      for(iint n=0;n<p_NpFine;++n;inner0){
        iint t = n + es*p_NpFine;

        if(t<p_NpCoarse*p_NblockV)
          if((eo*p_NpCoarse + t)<Nelements*p_NpCoarse)
            s_qCoarse[0][t] = qCoarse[eo*p_NpCoarse+t];

        while(t<p_NpFine*p_NpCoarse){
          s_R[0][t] = R[t];
          t += p_NpFine*p_NblockV;
        }
      }
    }

    barrier(localMemFence);

    for(iint es=0;es<p_NblockV;++es;inner1){
      for(iint n=0;n<p_NpFine;++n;inner0){
        iint e = eo + es;
        if(e<Nelements){
          dfloat tmp = 0.;
          //dfloat tmp = qFine[e*p_NpFine+n];

          occaUnroll(p_NpCoarse)
            for(iint i=0;i<p_NpCoarse;++i){
              tmp += s_R[i][n]*s_qCoarse[es][i];
            }

          qFine[e*p_NpFine+n] = tmp;
        }
      }
    }
  }
}


#if 0
kernel void ellipticPreconProlongateQuad2D(const iint Nelements,
             const dfloat * restrict V1,
             const dfloat * restrict q1,
             dfloat * restrict qN){


  for(iint e=0;e<Nelements;++e;outer0){
    shared dfloat s_q1N[p_Nq1][p_Nq];
    shared dfloat s_q11[p_Nq1][p_Nq1];
    shared dfloat s_V1[p_Nq1][p_Nq];

    // prefetch to shared

    for(iint j=0;j<p_Nq;++j;inner1){
      for(iint i=0;i<p_Nq;++i;inner0){
  iint id = i+j*p_Nq;
  if(id<p_Nq1*p_Nq1){
    s_q11[0][id] = q1[id+e*p_Nq1*p_Nq1];
  }
  if(id<p_Nq1*p_Nq){
    s_V1[0][id] = V1[id];
  }
      }
    }

    barrier(localMemFence);

    // prolongate in i index

    for(iint j=0;j<p_Nq;++j;inner1){
      for(iint i=0;i<p_Nq;++i;inner0){
  if(j<2){
    dfloat res = 0;
    for(iint m=0;m<p_Nq1;++m)
      res += s_V1[i][m]*s_q11[j][m];
    s_q1N[j][i] = res;
  }
      }
    }

    barrier(localMemFence);

    // coarsen in i index

    for(iint j=0;j<p_Nq;++j;inner1){
      for(iint i=0;i<p_Nq;++i;inner0){

  dfloat res = 0;
  for(iint m=0;m<p_Nq1;++m)
    res += s_V1[j][m]*s_q1N[m][i];

  qN[i+j*p_Nq+e*p_Nq*p_Nq] = res;
      }
    }
  }
}
#endif
