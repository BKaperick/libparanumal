#define RXID 0  
#define RYID 1  
#define RZID 2  
#define SXID 3
#define SYID 4
#define SZID 5
#define TXID 6
#define TYID 7
#define TZID 8

// function to compute collocation differentiation
// contributions to nodal DG rhs for acoustics
kernel void acousticsVolumeHex3D(const iint Nelements,
				 const dfloat * restrict vgeo,
				 const dfloat * restrict DrT,
				 const dfloat * restrict DsT,
				 const dfloat * restrict DtT,
				 const dfloat * restrict q,
				 dfloat * restrict rhsq){
  
  for(iint e=0;e<Nelements;++e;outer0){  // for all elements
    for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element

      // prefetch geometric factors (constant on triangle)
      const iint base = e*p_Np*p_Nvgeo + n;
      const dfloat drdx = vgeo[base + RXID*p_Np];
      const dfloat drdy = vgeo[base + RYID*p_Np];
      const dfloat drdz = vgeo[base + RZID*p_Np];
      const dfloat dsdx = vgeo[base + SXID*p_Np];
      const dfloat dsdy = vgeo[base + SYID*p_Np];
      const dfloat dsdz = vgeo[base + SZID*p_Np];
      const dfloat dtdx = vgeo[base + TXID*p_Np];
      const dfloat dtdy = vgeo[base + TYID*p_Np];
      const dfloat dtdz = vgeo[base + TZID*p_Np];
      
      // compute 'r', 's', and 't' derivatives of (u,v,w,p) at node n
      dfloat dudr = 0, duds = 0, dudt = 0;
      dfloat dvdr = 0, dvds = 0, dvdt = 0;
      dfloat dwdr = 0, dwds = 0, dwdt = 0;
      dfloat dpdr = 0, dpds = 0, dpdt = 0;
      
      for(iint i=0;i<p_Np;++i){
	// load data at node i of element e
	const iint id = p_Nfields*(e*p_Np + i);
	const dfloat u = q[id+0], v = q[id+1], w = q[id+2], p = q[id+3];

 	const dfloat Drni = DrT[n+i*p_Np];
	const dfloat Dsni = DsT[n+i*p_Np];
	const dfloat Dtni = DtT[n+i*p_Np];

	// compute 'r', 's', and 't' derivatives of (u,v,w,p) at node n
	dudr += Drni*u; duds += Dsni*u; dudt += Dtni*u;
	dvdr += Drni*v; dvds += Dsni*v; dvdt += Dtni*v;
	dwdr += Drni*w; dwds += Dsni*w; dwdt += Dtni*w;
	dpdr += Drni*p;	dpds += Dsni*p; dpdt += Dtni*p;
      }

      // chain rule
      const dfloat dudx = drdx*dudr + dsdx*duds + dtdx*dudt;
      const dfloat dvdy = drdy*dvdr + dsdy*dvds + dtdy*dvdt;
      const dfloat dwdz = drdz*dwdr + dsdz*dwds + dtdz*dwdt;
      const dfloat dpdx = drdx*dpdr + dsdx*dpds + dtdx*dpdt;
      const dfloat dpdy = drdy*dpdr + dsdy*dpds + dtdy*dpdt;
      const dfloat dpdz = drdz*dpdr + dsdz*dpds + dtdz*dpdt;
      
      // store acoustics rhs contributions from collocation differentiation
      const iint id = p_Nfields*(e*p_Np + n);
      rhsq[id+0] = -dpdx;
      rhsq[id+1] = -dpdy;
      rhsq[id+2] = -dpdz;
      rhsq[id+3] = -dudx-dvdy-dwdz;
    }
  }
}
