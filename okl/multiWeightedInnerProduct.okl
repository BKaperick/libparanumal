
//computes multiple weighted inner products.
// x holds several vectors x_l 
// returns partial redcutons of w . x_l . y
@kernel void multiWeightedInnerProduct(const int L,
                                      const int Nblock,
                                      const int N,
                                      @restrict const  dfloat *  w,
                                      @restrict const  dfloat *  x,
                                      @restrict const  dfloat *  y,
                                      @restrict dfloat *  wxy){
  

  for(int b=0;b<Nblock;++b;@outer(0)){
    
    @shared volatile dfloat s_wxy[p_blockSize*p_maxMultiVectors];

    for(int t=0;t<p_blockSize;++t;@inner(0)){
      const int id = t + p_blockSize*b;
      
      for (int l=0;l<L;l++) {
        s_wxy[t+l*p_blockSize] = (id<N) ? w[id]*x[id+l*N]*y[id] : 0.f;  
      }
    }

    @barrier("local");

#if p_blockSize>512
    
    for(int t=0;t<p_blockSize;++t;@inner(0)) {
      if(t<512) {
        for (int l=0;l<L;l++) {
          s_wxy[t+l*p_blockSize] += s_wxy[t+l*p_blockSize+512];
        }
      }
    }
    @barrier("local");

#endif
#if p_blockSize>256

    for(int t=0;t<p_blockSize;++t;@inner(0)) {
      if(t<256) {
        for (int l=0;l<L;l++) {
          s_wxy[t+l*p_blockSize] += s_wxy[t+l*p_blockSize+256];
        }
      }
    }
    @barrier("local");

#endif

    for(int t=0;t<p_blockSize;++t;@inner(0)) {
      if(t<128) {
        for (int l=0;l<L;l++) {
          s_wxy[t+l*p_blockSize] += s_wxy[t+l*p_blockSize+128];
        }
      }
    }
    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) {
      if(t<64) {
        for (int l=0;l<L;l++) {
          s_wxy[t+l*p_blockSize] += s_wxy[t+l*p_blockSize+64];
        }
      }
    }
    @barrier("local");

    for(int t=0;t<p_blockSize;++t;@inner(0)) {
      if(t<32) {
        for (int l=0;l<L;l++) {
          s_wxy[t+l*p_blockSize] += s_wxy[t+l*p_blockSize+32];
        }
      }
    }
    for(int t=0;t<p_blockSize;++t;@inner(0)) {
      if(t<16) {
        for (int l=0;l<L;l++) {
          s_wxy[t+l*p_blockSize] += s_wxy[t+l*p_blockSize+16];
        }
      }
    }
    for(int t=0;t<p_blockSize;++t;@inner(0)) {
      if(t<8) {
        for (int l=0;l<L;l++) {
          s_wxy[t+l*p_blockSize] += s_wxy[t+l*p_blockSize+8];
        }
      }
    }
    for(int t=0;t<p_blockSize;++t;@inner(0)) {
      if(t<4) {
        for (int l=0;l<L;l++) {
          s_wxy[t+l*p_blockSize] += s_wxy[t+l*p_blockSize+4];
        }
      }
    }
    for(int t=0;t<p_blockSize;++t;@inner(0)) {
      if(t<2) {
        for (int l=0;l<L;l++) {
          s_wxy[t+l*p_blockSize] += s_wxy[t+l*p_blockSize+2];
        }
      }
    }
    for(int t=0;t<p_blockSize;++t;@inner(0)) {
      if(t<1) {
        for (int l=0;l<L;l++) {
          wxy[b+l*Nblock] = s_wxy[0+l*p_blockSize] + s_wxy[1+l*p_blockSize];
        }
      }
    }
  }
}