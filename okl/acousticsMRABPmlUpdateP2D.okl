

kernel void acousticsMRABPmlUpdateP2D(const iint pmlNelements,
           const iint   * restrict pmlElementIds,
           const iint   * restrict pmlIds,
           const iint   * restrict N,
           const dfloat dt,
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           const iint   * restrict EToE,
           const dfloat * restrict BBLower,
           const iint   * restrict BBRaiseids,
           const dfloat * restrict BBRaiseVals,  
           const iint   * restrict vmapM,
           const dfloat * restrict rhsq,
           const dfloat * restrict pmlrhsq,
           dfloat * restrict q,
           dfloat * restrict pmlq,
           dfloat * restrict fQM,
           dfloat * restrict fQP,
           const iint   rhsShift){

  for(iint et=0;et<pmlNelements;++et;outer0){  // for all elements
    shared dfloat s_q[p_Np*p_Nfields];

    shared dfloat s_un[p_Nfaces*p_Nfp];
    shared dfloat s_vn[p_Nfaces*p_Nfp];
    shared dfloat s_pn[p_Nfaces*p_Nfp];

    shared dfloat s_unp[p_Nfaces*p_Nfpp1];
    shared dfloat s_vnp[p_Nfaces*p_Nfpp1];
    shared dfloat s_pnp[p_Nfaces*p_Nfpp1];

    for(iint n=0; n < p_maxNodes; ++n; inner0){
      if (n < p_Np){
        const iint e = pmlElementIds[et];
        const iint pmlId = pmlIds[et];

        const iint id = p_Nfields*(e*p_NpMax + n);
        const iint pid = p_pmlNfields*(pmlId*p_NpMax + n);

        const iint rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
        const iint rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
        const iint rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;
        const iint pmlrhsId1 = 3*pid + ((rhsShift+0)%3)*p_pmlNfields;
        const iint pmlrhsId2 = 3*pid + ((rhsShift+1)%3)*p_pmlNfields;
        const iint pmlrhsId3 = 3*pid + ((rhsShift+2)%3)*p_pmlNfields;

        const dfloat px = pmlq[pid+0] + dt*(a1*pmlrhsq[pmlrhsId1+0] + a2*pmlrhsq[pmlrhsId2+0] + a3*pmlrhsq[pmlrhsId3+0]);
        const dfloat py = pmlq[pid+1] + dt*(a1*pmlrhsq[pmlrhsId1+1] + a2*pmlrhsq[pmlrhsId2+1] + a3*pmlrhsq[pmlrhsId3+1]);

        s_q[p_Nfields*n+0] = q[id+0] + dt*(a1*rhsq[rhsId1+0] + a2*rhsq[rhsId2+0] + a3*rhsq[rhsId3+0]);
        s_q[p_Nfields*n+1] = q[id+1] + dt*(a1*rhsq[rhsId1+1] + a2*rhsq[rhsId2+1] + a3*rhsq[rhsId3+1]);
        s_q[p_Nfields*n+2] = px+py;

        //write update
        pmlq[pid+0] = px;
        pmlq[pid+1] = py;
        q[id+0] = s_q[p_Nfields*n+0];
        q[id+1] = s_q[p_Nfields*n+1];
        q[id+2] = s_q[p_Nfields*n+2];
      }
    }
    barrier(localMemFence);

    for(iint n=0; n < p_maxNodes; ++n; inner0){ 
      if (n<p_Nfaces*p_Nfp) {
        const iint e = pmlElementIds[et];
        const iint f = n / p_Nfp;
        const iint iid = n % p_Nfp;
        const iint id  = e*p_NfpMax*p_Nfaces + f*p_NfpMax + iid;
        const iint qidM = p_Nfields*(vmapM[id]-e*p_NpMax);
        const iint qid   = p_Nfields*id;

        //gather negative traces
        s_un[n] = s_q[qidM+0];
        s_vn[n] = s_q[qidM+1];
        s_pn[n] = s_q[qidM+2];

        //write negative traces
        fQM[qid+0] = s_un[n];
        fQM[qid+1] = s_vn[n];
        fQM[qid+2] = s_pn[n];
      }
    }

    barrier(localMemFence);    

    for(iint n=0; n < p_maxNodes; ++n; inner0){  
      if (n < p_Nfp*p_Nfaces){
        const iint e = pmlElementIds[et];
        const iint f = n / p_Nfp;
              iint id = n % p_Nfp;

        iint eP = EToE[e*p_Nfaces+f];
        if (eP < 0) eP = e;
        const iint NP = N[eP];

        if (NP > p_N) { 
          while (id<p_Nfpp1) {
            s_unp[f*p_Nfpp1+id] = 0.0;
            s_vnp[f*p_Nfpp1+id] = 0.0;
            s_pnp[f*p_Nfpp1+id] = 0.0;
            occaUnroll(2)
            for (iint m=0;m<2;m++){ //apply raise operator sparsly
              const dfloat BBRaiseVal = BBRaiseVals[2*id+m];
              const iint BBRaiseid = BBRaiseids[2*id+m] + f*p_Nfp;
              s_unp[f*p_Nfpp1+id] += BBRaiseVal*s_un[BBRaiseid];
              s_vnp[f*p_Nfpp1+id] += BBRaiseVal*s_vn[BBRaiseid];
              s_pnp[f*p_Nfpp1+id] += BBRaiseVal*s_pn[BBRaiseid];
            }
            
            //write positive trace
            const iint qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
            fQP[qid+0] = s_unp[f*p_Nfpp1+id];
            fQP[qid+1] = s_vnp[f*p_Nfpp1+id];
            fQP[qid+2] = s_pnp[f*p_Nfpp1+id];

            id += p_Nfp;
          }
        } else if (NP < p_N) { 
          if (id < p_Nfpm1) {
            s_unp[f*p_Nfpp1+id] = 0.0;
            s_vnp[f*p_Nfpp1+id] = 0.0;
            s_pnp[f*p_Nfpp1+id] = 0.0;
            occaUnroll(p_Nfp)
            for (iint m=0;m<p_Nfp;m++){
              s_unp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_un[f*p_Nfp + m];
              s_vnp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_vn[f*p_Nfp + m];
              s_pnp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_pn[f*p_Nfp + m];
            }

            //write positive trace
            const iint qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
            fQP[qid+0] = s_unp[f*p_Nfpp1+id];
            fQP[qid+1] = s_vnp[f*p_Nfpp1+id];
            fQP[qid+2] = s_pnp[f*p_Nfpp1+id];
          }
        } else { //equal order neighbor
          //write positive trace
          const iint qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
          fQP[qid+0] = s_un[n];
          fQP[qid+1] = s_vn[n];
          fQP[qid+2] = s_pn[n];
        }        
      }
    }
  }
}

kernel void acousticsMRABPmlTraceUpdateP2D(const iint pmlNelements,
           const iint   * restrict pmlElementIds,
           const iint   * restrict pmlIds,
           const iint   * restrict N,
           const dfloat dt,
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           const iint   * restrict EToE,
           const dfloat * restrict BBLower,
           const iint   * restrict BBRaiseids,
           const dfloat * restrict BBRaiseVals,  
           const iint   * restrict vmapM,
           const dfloat * restrict rhsq,
           const dfloat * restrict pmlrhsq,
           const dfloat * restrict q,
           const dfloat * restrict pmlq,
           dfloat * restrict fQM,
           dfloat * restrict fQP,
           const iint   rhsShift){

  for(iint et=0;et<pmlNelements;++et;outer0){  // for all elements
    shared dfloat s_q[p_Np*p_Nfields];

    shared dfloat s_un[p_Nfaces*p_Nfp];
    shared dfloat s_vn[p_Nfaces*p_Nfp];
    shared dfloat s_pn[p_Nfaces*p_Nfp];

    shared dfloat s_unp[p_Nfaces*p_Nfpp1];
    shared dfloat s_vnp[p_Nfaces*p_Nfpp1];
    shared dfloat s_pnp[p_Nfaces*p_Nfpp1];

    for(iint n=0; n < p_maxNodes; ++n; inner0){
      if (n < p_Np){
        const iint e = pmlElementIds[et];
        const iint pmlId = pmlIds[et];

        const iint id = p_Nfields*(e*p_NpMax + n);
        const iint pid = p_pmlNfields*(pmlId*p_NpMax + n);

        const iint rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
        const iint rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
        const iint rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;
        const iint pmlrhsId1 = 3*pid + ((rhsShift+0)%3)*p_pmlNfields;
        const iint pmlrhsId2 = 3*pid + ((rhsShift+1)%3)*p_pmlNfields;
        const iint pmlrhsId3 = 3*pid + ((rhsShift+2)%3)*p_pmlNfields;

        const dfloat px = pmlq[pid+0] + dt*(a1*pmlrhsq[pmlrhsId1+0] + a2*pmlrhsq[pmlrhsId2+0] + a3*pmlrhsq[pmlrhsId3+0]);
        const dfloat py = pmlq[pid+1] + dt*(a1*pmlrhsq[pmlrhsId1+1] + a2*pmlrhsq[pmlrhsId2+1] + a3*pmlrhsq[pmlrhsId3+1]);

        s_q[p_Nfields*n+0] = q[id+0] + dt*(a1*rhsq[rhsId1+0] + a2*rhsq[rhsId2+0] + a3*rhsq[rhsId3+0]);
        s_q[p_Nfields*n+1] = q[id+1] + dt*(a1*rhsq[rhsId1+1] + a2*rhsq[rhsId2+1] + a3*rhsq[rhsId3+1]);
        s_q[p_Nfields*n+2] = px+py;
      }
    }
    barrier(localMemFence);
    
    for(iint n=0; n < p_maxNodes; ++n; inner0){ 
      if (n<p_Nfaces*p_Nfp) {
        const iint e = pmlElementIds[et];
        const iint f = n / p_Nfp;
        const iint iid = n % p_Nfp;
        const iint id  = e*p_NfpMax*p_Nfaces + f*p_NfpMax + iid;
        const iint qidM = p_Nfields*(vmapM[id]-e*p_NpMax);
        const iint qid   = p_Nfields*id;

        //gather negative traces
        s_un[n] = s_q[qidM+0];
        s_vn[n] = s_q[qidM+1];
        s_pn[n] = s_q[qidM+2];

        //write negative traces
        fQM[qid+0] = s_un[n];
        fQM[qid+1] = s_vn[n];
        fQM[qid+2] = s_pn[n];
      }
    }

    barrier(localMemFence);    

    for(iint n=0; n < p_maxNodes; ++n; inner0){  
      if (n < p_Nfp*p_Nfaces){
        const iint e = pmlElementIds[et];
        const iint f = n / p_Nfp;
              iint id = n % p_Nfp;

        iint eP = EToE[e*p_Nfaces+f];
        if (eP < 0) eP = e;
        const iint NP = N[eP];

        if (NP > p_N) { 
          while (id<p_Nfpp1) {
            s_unp[f*p_Nfpp1+id] = 0.0;
            s_vnp[f*p_Nfpp1+id] = 0.0;
            s_pnp[f*p_Nfpp1+id] = 0.0;
            occaUnroll(2)
            for (iint m=0;m<2;m++){ //apply raise operator sparsly
              const dfloat BBRaiseVal = BBRaiseVals[2*id+m];
              const iint BBRaiseid = BBRaiseids[2*id+m] + f*p_Nfp;
              s_unp[f*p_Nfpp1+id] += BBRaiseVal*s_un[BBRaiseid];
              s_vnp[f*p_Nfpp1+id] += BBRaiseVal*s_vn[BBRaiseid];
              s_pnp[f*p_Nfpp1+id] += BBRaiseVal*s_pn[BBRaiseid];
            }
            
            //write positive trace
            const iint qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
            fQP[qid+0] = s_unp[f*p_Nfpp1+id];
            fQP[qid+1] = s_vnp[f*p_Nfpp1+id];
            fQP[qid+2] = s_pnp[f*p_Nfpp1+id];

            id += p_Nfp;
          }
        } else if (NP < p_N) { 
          if (id < p_Nfpm1) {
            s_unp[f*p_Nfpp1+id] = 0.0;
            s_vnp[f*p_Nfpp1+id] = 0.0;
            s_pnp[f*p_Nfpp1+id] = 0.0;
            occaUnroll(p_Nfp)
            for (iint m=0;m<p_Nfp;m++){
              s_unp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_un[f*p_Nfp + m];
              s_vnp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_vn[f*p_Nfp + m];
              s_pnp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_pn[f*p_Nfp + m];
            }

            //write positive trace
            const iint qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
            fQP[qid+0] = s_unp[f*p_Nfpp1+id];
            fQP[qid+1] = s_vnp[f*p_Nfpp1+id];
            fQP[qid+2] = s_pnp[f*p_Nfpp1+id];
          }
        } else { //equal order neighbor
          //write positive trace
          const iint qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
          fQP[qid+0] = s_un[n];
          fQP[qid+1] = s_vn[n];
          fQP[qid+2] = s_pn[n];
        }        
      }
    }
  }
}

kernel void acousticsMRABPmlUpdateP2D_wadg(const iint pmlNelements,
           const iint   * restrict pmlElementIds,
           const iint   * restrict pmlIds,
           const iint   * restrict N,
           const dfloat dt,
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           const dfloat * restrict cubInterp,
           const dfloat * restrict cubProject,
           const dfloat * restrict c2,
           const iint   * restrict EToE,
           const dfloat * restrict BBLower,
           const iint   * restrict BBRaiseids,
           const dfloat * restrict BBRaiseVals,  
           const iint   * restrict vmapM,
           dfloat * restrict rhsq,
           dfloat * restrict pmlrhsq,
           dfloat * restrict q,
           dfloat * restrict pmlq,
           dfloat * restrict fQM,
           dfloat * restrict fQP,
           const iint   rhsShift){

  for(iint et=0;et<pmlNelements;++et;outer0){  // for all elements
    shared dfloat s_q[p_Np*p_Nfields];
    shared dfloat s_p[p_cubNp];

    shared dfloat s_un[p_Nfaces*p_Nfp];
    shared dfloat s_vn[p_Nfaces*p_Nfp];
    shared dfloat s_pn[p_Nfaces*p_Nfp];

    shared dfloat s_unp[p_Nfaces*p_Nfpp1];
    shared dfloat s_vnp[p_Nfaces*p_Nfpp1];
    shared dfloat s_pnp[p_Nfaces*p_Nfpp1];

    for(iint n=0; n < p_maxCubNodes; ++n; inner0){
      if (n < p_Np){
        const iint e = pmlElementIds[et];
        const iint pmlId = pmlIds[et];

        const iint id = p_Nfields*(e*p_NpMax + n);
        const iint pid = p_pmlNfields*(pmlId*p_NpMax + n);

        const iint rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
        const iint rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
        const iint rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;
        const iint pmlrhsId1 = 3*pid + ((rhsShift+0)%3)*p_pmlNfields;
        const iint pmlrhsId2 = 3*pid + ((rhsShift+1)%3)*p_pmlNfields;
        const iint pmlrhsId3 = 3*pid + ((rhsShift+2)%3)*p_pmlNfields;

        const dfloat px = pmlq[pid+0] + dt*(a1*pmlrhsq[pmlrhsId1+0] + a2*pmlrhsq[pmlrhsId2+0] + a3*pmlrhsq[pmlrhsId3+0]);
        const dfloat py = pmlq[pid+1] + dt*(a1*pmlrhsq[pmlrhsId1+1] + a2*pmlrhsq[pmlrhsId2+1] + a3*pmlrhsq[pmlrhsId3+1]);

        s_q[p_Nfields*n+0] = q[id+0] + dt*(a1*rhsq[rhsId1+0] + a2*rhsq[rhsId2+0] + a3*rhsq[rhsId3+0]);
        s_q[p_Nfields*n+1] = q[id+1] + dt*(a1*rhsq[rhsId1+1] + a2*rhsq[rhsId2+1] + a3*rhsq[rhsId3+1]);
        s_q[p_Nfields*n+2] = px+py;

        //write update
        pmlq[pid+0] = px;
        pmlq[pid+1] = py;
        q[id+0] = s_q[p_Nfields*n+0];
        q[id+1] = s_q[p_Nfields*n+1];
      }
    }
    barrier(localMemFence);

    // Interpolate p to cubature nodes
    for(iint n=0;n<p_maxCubNodes;++n;inner0){
      if (n<p_cubNp) {
        const iint e = pmlElementIds[et];
        // Prefetch value of c2
        const dfloat c2n = c2[n + e*p_cubNpMax];

        s_p[n] = 0.f;
        for (int i=0;i<p_Np;++i){
          s_p[n] += cubInterp[n + i*p_cubNp] * s_q[p_Nfields*i+2];
        }
        // Multiply result by wavespeed c2 at cubature node
        s_p[n] *= c2n;
      }
    }
    barrier(localMemFence);

    // Project result back down
    for(iint n=0;n<p_maxCubNodes;++n;inner0){
      if (n < p_Np){
        const iint e = pmlElementIds[et];
        const iint id = p_Nfields*(e*p_NpMax + n);

        // Project scaled rhs down
        dfloat c2p = 0.f;
        for (int i=0;i<p_cubNp;++i){
          c2p += cubProject[n + i*p_Np] * s_p[i];
        }

        s_q[p_Nfields*n+2] = c2p;
        q[id+2] = c2p;
      }
    }
    barrier(localMemFence);

    for(iint n=0; n < p_maxCubNodes; ++n; inner0){ 
      if (n<p_Nfaces*p_Nfp) {
        const iint e = pmlElementIds[et];
        const iint f = n / p_Nfp;
        const iint iid = n % p_Nfp;
        const iint id  = e*p_NfpMax*p_Nfaces + f*p_NfpMax + iid;
        const iint qidM = p_Nfields*(vmapM[id]-e*p_NpMax);
        const iint qid   = p_Nfields*id;

        //gather negative traces
        s_un[n] = s_q[qidM+0];
        s_vn[n] = s_q[qidM+1];
        s_pn[n] = s_q[qidM+2];

        //write negative traces
        fQM[qid+0] = s_un[n];
        fQM[qid+1] = s_vn[n];
        fQM[qid+2] = s_pn[n];
      }
    }

    barrier(localMemFence);    

    for(iint n=0; n < p_maxCubNodes; ++n; inner0){  
      if (n < p_Nfp*p_Nfaces){
        const iint e = pmlElementIds[et];
        const iint f = n / p_Nfp;
              iint id = n % p_Nfp;

        iint eP = EToE[e*p_Nfaces+f];
        if (eP < 0) eP = e;
        const iint NP = N[eP];

        if (NP > p_N) { 
          while (id<p_Nfpp1) {
            s_unp[f*p_Nfpp1+id] = 0.0;
            s_vnp[f*p_Nfpp1+id] = 0.0;
            s_pnp[f*p_Nfpp1+id] = 0.0;
            occaUnroll(2)
            for (iint m=0;m<2;m++){ //apply raise operator sparsly
              const dfloat BBRaiseVal = BBRaiseVals[2*id+m];
              const iint BBRaiseid = BBRaiseids[2*id+m] + f*p_Nfp;
              s_unp[f*p_Nfpp1+id] += BBRaiseVal*s_un[BBRaiseid];
              s_vnp[f*p_Nfpp1+id] += BBRaiseVal*s_vn[BBRaiseid];
              s_pnp[f*p_Nfpp1+id] += BBRaiseVal*s_pn[BBRaiseid];
            }
            
            //write positive trace
            const iint qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
            fQP[qid+0] = s_unp[f*p_Nfpp1+id];
            fQP[qid+1] = s_vnp[f*p_Nfpp1+id];
            fQP[qid+2] = s_pnp[f*p_Nfpp1+id];

            id += p_Nfp;
          }
        } else if (NP < p_N) { 
          if (id < p_Nfpm1) {
            s_unp[f*p_Nfpp1+id] = 0.0;
            s_vnp[f*p_Nfpp1+id] = 0.0;
            s_pnp[f*p_Nfpp1+id] = 0.0;
            occaUnroll(p_Nfp)
            for (iint m=0;m<p_Nfp;m++){
              s_unp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_un[f*p_Nfp + m];
              s_vnp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_vn[f*p_Nfp + m];
              s_pnp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_pn[f*p_Nfp + m];
            }

            //write positive trace
            const iint qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
            fQP[qid+0] = s_unp[f*p_Nfpp1+id];
            fQP[qid+1] = s_vnp[f*p_Nfpp1+id];
            fQP[qid+2] = s_pnp[f*p_Nfpp1+id];
          }
        } else { //equal order neighbor
          //write positive trace
          const iint qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
          fQP[qid+0] = s_un[n];
          fQP[qid+1] = s_vn[n];
          fQP[qid+2] = s_pn[n];
        }        
      }
    }
  }
}

kernel void acousticsMRABPmlTraceUpdateP2D_wadg(const iint pmlNelements,
           const iint   * restrict pmlElementIds,
           const iint   * restrict pmlIds,
           const iint   * restrict N,
           const dfloat dt,
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           const dfloat * restrict cubInterp,
           const dfloat * restrict cubProject,
           const dfloat * restrict c2,
           const iint   * restrict EToE,
           const dfloat * restrict BBLower,
           const iint   * restrict BBRaiseids,
           const dfloat * restrict BBRaiseVals,  
           const iint   * restrict vmapM,
           const dfloat * restrict rhsq,
           const dfloat * restrict pmlrhsq,
           const dfloat * restrict q,
           const dfloat * restrict pmlq,
           dfloat * restrict fQM,
           dfloat * restrict fQP,
           const iint   rhsShift){

  for(iint et=0;et<pmlNelements;++et;outer0){  // for all elements
    shared dfloat s_q[p_Np*p_Nfields];
    shared dfloat s_p[p_cubNp];

    shared dfloat s_un[p_Nfaces*p_Nfp];
    shared dfloat s_vn[p_Nfaces*p_Nfp];
    shared dfloat s_pn[p_Nfaces*p_Nfp];

    shared dfloat s_unp[p_Nfaces*p_Nfpp1];
    shared dfloat s_vnp[p_Nfaces*p_Nfpp1];
    shared dfloat s_pnp[p_Nfaces*p_Nfpp1];

    for(iint n=0; n < p_maxCubNodes; ++n; inner0){
      if (n < p_Np){
        const iint e = pmlElementIds[et];
        const iint pmlId = pmlIds[et];

        const iint id = p_Nfields*(e*p_NpMax + n);
        const iint pid = p_pmlNfields*(pmlId*p_NpMax + n);

        const iint rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
        const iint rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
        const iint rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;
        const iint pmlrhsId1 = 3*pid + ((rhsShift+0)%3)*p_pmlNfields;
        const iint pmlrhsId2 = 3*pid + ((rhsShift+1)%3)*p_pmlNfields;
        const iint pmlrhsId3 = 3*pid + ((rhsShift+2)%3)*p_pmlNfields;

        const dfloat px = pmlq[pid+0] + dt*(a1*pmlrhsq[pmlrhsId1+0] + a2*pmlrhsq[pmlrhsId2+0] + a3*pmlrhsq[pmlrhsId3+0]);
        const dfloat py = pmlq[pid+1] + dt*(a1*pmlrhsq[pmlrhsId1+1] + a2*pmlrhsq[pmlrhsId2+1] + a3*pmlrhsq[pmlrhsId3+1]);

        s_q[p_Nfields*n+0] = q[id+0] + dt*(a1*rhsq[rhsId1+0] + a2*rhsq[rhsId2+0] + a3*rhsq[rhsId3+0]);
        s_q[p_Nfields*n+1] = q[id+1] + dt*(a1*rhsq[rhsId1+1] + a2*rhsq[rhsId2+1] + a3*rhsq[rhsId3+1]);
        s_q[p_Nfields*n+2] = px+py;
      }
    }
    barrier(localMemFence);

    // Interpolate p to cubature nodes
    for(iint n=0;n<p_maxCubNodes;++n;inner0){
      if (n<p_cubNp) {
        const iint e = pmlElementIds[et];
        // Prefetch value of c2
        const dfloat c2n = c2[n + e*p_cubNp];

        s_p[n] = 0.f;
        for (int i=0;i<p_Np;++i){
          s_p[n] += cubInterp[n + i*p_cubNp] * s_q[p_Nfields*i+2];
        }
        // Multiply result by wavespeed c2 at cubature node
        s_p[n] *= c2n;
      }
    }
    barrier(localMemFence);

    // Project result back down
    for(iint n=0;n<p_maxCubNodes;++n;inner0){
      if (n < p_Np){
        // Project scaled rhs down
        dfloat c2p = 0.f;
        for (int i=0;i<p_cubNp;++i){
          c2p += cubProject[n + i*p_Np] * s_p[i];
        }
        s_q[p_Nfields*n+2] = c2p;
      }
    }
    barrier(localMemFence);
    
    for(iint n=0; n < p_maxCubNodes; ++n; inner0){ 
      if (n<p_Nfaces*p_Nfp) {
        const iint e = pmlElementIds[et];
        const iint f = n / p_Nfp;
        const iint iid = n % p_Nfp;
        const iint id  = e*p_NfpMax*p_Nfaces + f*p_NfpMax + iid;
        const iint qidM = p_Nfields*(vmapM[id]-e*p_NpMax);
        const iint qid   = p_Nfields*id;

        //gather negative traces
        s_un[n] = s_q[qidM+0];
        s_vn[n] = s_q[qidM+1];
        s_pn[n] = s_q[qidM+2];

        //write negative traces
        fQM[qid+0] = s_un[n];
        fQM[qid+1] = s_vn[n];
        fQM[qid+2] = s_pn[n];
      }
    }

    barrier(localMemFence);    

    for(iint n=0; n < p_maxCubNodes; ++n; inner0){  
      if (n < p_Nfp*p_Nfaces){
        const iint e = pmlElementIds[et];
        const iint f = n / p_Nfp;
              iint id = n % p_Nfp;

        iint eP = EToE[e*p_Nfaces+f];
        if (eP < 0) eP = e;
        const iint NP = N[eP];

        if (NP > p_N) { 
          while (id<p_Nfpp1) {
            s_unp[f*p_Nfpp1+id] = 0.0;
            s_vnp[f*p_Nfpp1+id] = 0.0;
            s_pnp[f*p_Nfpp1+id] = 0.0;
            occaUnroll(2)
            for (iint m=0;m<2;m++){ //apply raise operator sparsly
              const dfloat BBRaiseVal = BBRaiseVals[2*id+m];
              const iint BBRaiseid = BBRaiseids[2*id+m] + f*p_Nfp;
              s_unp[f*p_Nfpp1+id] += BBRaiseVal*s_un[BBRaiseid];
              s_vnp[f*p_Nfpp1+id] += BBRaiseVal*s_vn[BBRaiseid];
              s_pnp[f*p_Nfpp1+id] += BBRaiseVal*s_pn[BBRaiseid];
            }
            
            //write positive trace
            const iint qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
            fQP[qid+0] = s_unp[f*p_Nfpp1+id];
            fQP[qid+1] = s_vnp[f*p_Nfpp1+id];
            fQP[qid+2] = s_pnp[f*p_Nfpp1+id];

            id += p_Nfp;
          }
        } else if (NP < p_N) { 
          if (id < p_Nfpm1) {
            s_unp[f*p_Nfpp1+id] = 0.0;
            s_vnp[f*p_Nfpp1+id] = 0.0;
            s_pnp[f*p_Nfpp1+id] = 0.0;
            occaUnroll(p_Nfp)
            for (iint m=0;m<p_Nfp;m++){
              s_unp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_un[f*p_Nfp + m];
              s_vnp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_vn[f*p_Nfp + m];
              s_pnp[f*p_Nfpp1+id] += BBLower[p_Nfp*id+m]*s_pn[f*p_Nfp + m];
            }

            //write positive trace
            const iint qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
            fQP[qid+0] = s_unp[f*p_Nfpp1+id];
            fQP[qid+1] = s_vnp[f*p_Nfpp1+id];
            fQP[qid+2] = s_pnp[f*p_Nfpp1+id];
          }
        } else { //equal order neighbor
          //write positive trace
          const iint qid = p_Nfields*(e*p_NfpMax*p_Nfaces + f*p_NfpMax + id);
          fQP[qid+0] = s_un[n];
          fQP[qid+1] = s_vn[n];
          fQP[qid+2] = s_pn[n];
        }        
      }
    }
  }
}
