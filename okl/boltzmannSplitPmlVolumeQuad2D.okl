
#define RXID 0  
#define RYID 1  
#define SXID 2  
#define SYID 3

kernel void boltzmannSplitPmlVolumeQuad2D(const iint Nelements,
					  const dfloat * restrict vgeo,
					  const dfloat * restrict sigmax,
					  const dfloat * restrict sigmay,
					  const dfloat * restrict DrT,
					  const dfloat * restrict DsT,
					  const dfloat * restrict D,
					  const dfloat4 * restrict q,
					  const dfloat * restrict pmlqx,
					  const dfloat * restrict pmlqy,
					  const dfloat * restrict pmlNT,
					  dfloat * restrict rhspmlqx,
					  dfloat * restrict rhspmlqy,
					  dfloat * restrict rhspmlNT
					  ){
  
  for(iint eo=0;eo<Nelements;eo+=p_NblockV;outer0){  // for all elements

    shared dfloat s_q[p_NblockV][p_Nfields][p_Np];
    
    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element
	
	iint e = eo+es; // element in block
	if(e<Nelements){
	  const iint id = e*p_Np+n;
	  dfloat4 qan = q[2*id];
	  dfloat4 qbn = q[2*id+1];
	  
	  s_q[es][0][n] = qan.x;
	  s_q[es][1][n] = qan.y;
	  s_q[es][2][n] = qan.z;
	  s_q[es][3][n] = qan.w;

	  s_q[es][4][n] = qbn.x;
	  s_q[es][5][n] = qbn.y;
	}
      }
    }

    // make sure all node data is loaded into shared
    barrier(localMemFence);

    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element
	
	iint e = eo+es; // element in block
	if(e<Nelements){
	  
	  // prefetch geometric factors (constant on triangle)
	  const dfloat drdx = vgeo[e*p_Np*p_Nvgeo n + p_Np*RXID];
	  const dfloat drdy = vgeo[e*p_Np*p_Nvgeo n + p_Np*RYID];
	  const dfloat dsdx = vgeo[e*p_Np*p_Nvgeo n + p_Np*SXID];
	  const dfloat dsdy = vgeo[e*p_Np*p_Nvgeo n + p_Np*SYID];

	  const dfloat sigmaxe = sigmax[e*p_Np+n];
	  const dfloat sigmaye = sigmay[e*p_Np+n];

	  const dfloat msigmaxe = sigmaxe + sigmaye*p_pmlAlpha;
	  const dfloat msigmaye = sigmaye + sigmaxe*p_pmlAlpha;

	  iint base = e*p_Np*p_Nfields+n;
	  dfloat pmlqx1 = pmlqx[base+0*p_Np];
	  dfloat pmlqx2 = pmlqx[base+1*p_Np];
	  dfloat pmlqx3 = pmlqx[base+2*p_Np];
	  dfloat pmlqx4 = pmlqx[base+3*p_Np];
	  dfloat pmlqx5 = pmlqx[base+4*p_Np];
	  dfloat pmlqx6 = pmlqx[base+5*p_Np];

	  dfloat pmlqy1 = pmlqy[base+0*p_Np];
	  dfloat pmlqy2 = pmlqy[base+1*p_Np];
	  dfloat pmlqy3 = pmlqy[base+2*p_Np];
	  dfloat pmlqy4 = pmlqy[base+3*p_Np];
	  dfloat pmlqy5 = pmlqy[base+4*p_Np];
	  dfloat pmlqy6 = pmlqy[base+5*p_Np];

	  dfloat pmlNT4 = pmlNT[base+3*p_Np];
	  dfloat pmlNT5 = pmlNT[base+4*p_Np];
	  dfloat pmlNT6 = pmlNT[base+5*p_Np];
	  
	  // compute 'r' and 's' derivatives of (q_m) at node n
	  dfloat dq1dr = 0, dq2dr = 0, dq3dr = 0, dq4dr = 0, dq5dr = 0, dq6dr = 0;
	  dfloat dq1ds = 0, dq2ds = 0, dq3ds = 0, dq4ds = 0, dq5ds = 0, dq6ds = 0;

	  occaUnroll(p_Np)
	  for(iint i=0;i<p_Np;++i){
	    const dfloat Drni = DrT[n+i*p_Np];
	    const dfloat Dsni = DsT[n+i*p_Np];
	    
	    // differentiate q components with respect to 'r' and 's'
	    dq1dr += Drni*s_q[es][0][i];
	    dq1ds += Dsni*s_q[es][0][i];
	    dq2dr += Drni*s_q[es][1][i];
	    dq2ds += Dsni*s_q[es][1][i];
	    dq3dr += Drni*s_q[es][2][i];
	    dq3ds += Dsni*s_q[es][2][i];
	    dq4dr += Drni*s_q[es][3][i];
	    dq4ds += Dsni*s_q[es][3][i];
	    dq5dr += Drni*s_q[es][4][i];
	    dq5ds += Dsni*s_q[es][4][i];
	    dq6dr += Drni*s_q[es][5][i];
	    dq6ds += Dsni*s_q[es][5][i];
	  }
	  
	  // chain rule
	  dfloat dq1dx = drdx*dq1dr + dsdx*dq1ds;
	  dfloat dq2dx = drdx*dq2dr + dsdx*dq2ds;
	  dfloat dq3dx = drdx*dq3dr + dsdx*dq3ds;
	  dfloat dq4dx = drdx*dq4dr + dsdx*dq4ds;
	  dfloat dq5dx = drdx*dq5dr + dsdx*dq5ds;
	  dfloat dq6dx = drdx*dq6dr + dsdx*dq6ds;
	  
	  dfloat dq1dy = drdy*dq1dr + dsdy*dq1ds;
	  dfloat dq2dy = drdy*dq2dr + dsdy*dq2ds;
	  dfloat dq3dy = drdy*dq3dr + dsdy*dq3ds;
	  dfloat dq4dy = drdy*dq4dr + dsdy*dq4ds;
	  dfloat dq5dy = drdy*dq5dr + dsdy*dq5ds;
	  dfloat dq6dy = drdy*dq6dr + dsdy*dq6ds;
	  	 	  
	  // transport operator
	  dfloat rhspmlqx1 = -p_sqrtRT*(dq2dx);
	  dfloat rhspmlqx2 = -p_sqrtRT*(dq1dx + p_sqrt2*dq5dx);	
	  dfloat rhspmlqx3 = -p_sqrtRT*(dq4dx);
	  dfloat rhspmlqx4 = -p_sqrtRT*(dq3dx);
	  dfloat rhspmlqx5 = -p_sqrtRT*p_sqrt2*dq2dx;			
	  dfloat rhspmlqx6 = 0;

	  dfloat rhspmlqy1 = -p_sqrtRT*(dq3dy);
	  dfloat rhspmlqy2 = -p_sqrtRT*(dq4dy);	
	  dfloat rhspmlqy3 = -p_sqrtRT*(dq1dy + p_sqrt2*dq6dy);	
	  dfloat rhspmlqy4 = -p_sqrtRT*(dq2dy);		
	  dfloat rhspmlqy5 = 0;
	  dfloat rhspmlqy6 = -p_sqrtRT*p_sqrt2*dq3dy;                   

#if 1
	  // BGK relaxation approximation to the Boltzmann collision operator
	  dfloat N4 = -p_tauInv*(s_q[es][3][n]-(s_q[es][1][n]*s_q[es][2][n]/s_q[es][0][n]));
	  dfloat N5 = -p_tauInv*(s_q[es][4][n]-(p_invsqrt2*s_q[es][1][n]*s_q[es][1][n]/s_q[es][0][n]));
	  dfloat N6 = -p_tauInv*(s_q[es][5][n]-(p_invsqrt2*s_q[es][2][n]*s_q[es][2][n]/s_q[es][0][n]));

	  rhspmlqx4 += 0.5f*N4; // split
	  rhspmlqx5 += 0.5f*N5;
	  rhspmlqx6 += 0.5f*N6;

	  rhspmlqy4 += 0.5f*N4; // split
	  rhspmlqy5 += 0.5f*N5;
	  rhspmlqy6 += 0.5f*N6;
#endif

	  // pml relaxation back to mean flow
	  rhspmlqx1 += -msigmaxe*(pmlqx1);
	  rhspmlqx2 += -msigmaxe*(pmlqx2);
	  rhspmlqx3 += -msigmaxe*(pmlqx3);
	  rhspmlqx4 += -msigmaxe*(pmlqx4) + 0.5f*msigmaxe*pmlNT4;
	  rhspmlqx5 += -msigmaxe*(pmlqx5) + 0.5f*msigmaxe*pmlNT5;
	  rhspmlqx6 += -msigmaxe*(pmlqx6) + 0.5f*msigmaxe*pmlNT6;

	  rhspmlqy1 += -msigmaye*(pmlqy1);
	  rhspmlqy2 += -msigmaye*(pmlqy2);
	  rhspmlqy3 += -msigmaye*(pmlqy3);
	  rhspmlqy4 += -msigmaye*(pmlqy4) + 0.5f*msigmaye*pmlNT4;
	  rhspmlqy5 += -msigmaye*(pmlqy5) + 0.5f*msigmaye*pmlNT5;
	  rhspmlqy6 += -msigmaye*(pmlqy6) + 0.5f*msigmaye*pmlNT6;
	  
	  rhspmlqx[base+0*p_Np] = rhspmlqx1;
	  rhspmlqx[base+1*p_Np] = rhspmlqx2;
	  rhspmlqx[base+2*p_Np] = rhspmlqx3;
	  rhspmlqx[base+3*p_Np] = rhspmlqx4;
	  rhspmlqx[base+4*p_Np] = rhspmlqx5;
	  rhspmlqx[base+5*p_Np] = rhspmlqx6;
	  
	  rhspmlqy[base+0*p_Np] = rhspmlqy1;
	  rhspmlqy[base+1*p_Np] = rhspmlqy2;
	  rhspmlqy[base+2*p_Np] = rhspmlqy3;
	  rhspmlqy[base+3*p_Np] = rhspmlqy4;
	  rhspmlqy[base+4*p_Np] = rhspmlqy5;
	  rhspmlqy[base+5*p_Np] = rhspmlqy6;

#if 1
	  rhspmlNT[base+3*p_Np] = N4;
	  rhspmlNT[base+4*p_Np] = N5;
	  rhspmlNT[base+5*p_Np] = N6;
#endif	  
	}
      }
    }
  }
}


