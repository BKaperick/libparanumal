
kernel void boltzmannSplitPmlUpdateQuad2D(const int Nelements,
					  const int recombine,
					  const dfloat dt,	
					  const dfloat rka,
					  const dfloat rkb,
					  const dfloat ramp,
					  const dfloat * restrict rhsqx,
					  const dfloat * restrict rhsqy,
					  const dfloat * restrict rhsNT,	
					  dfloat * restrict resqx,
					  dfloat * restrict resqy,
					  dfloat * restrict resNT,
					  dfloat * restrict qx,
					  dfloat * restrict qy,
					  dfloat * restrict NT,
					  dfloat4 * restrict q){
  
  // Low storage Runge Kutta time step update
  for(int e=0;e<Nelements;++e;outer0){
    for(int n=0;n<p_Np;++n;inner0){

      const int base = n + e*p_Nfields*p_Np;

      dfloat resqx1 = resqx[base+0*p_Np];
      dfloat resqx2 = resqx[base+1*p_Np];
      dfloat resqx3 = resqx[base+2*p_Np];
      dfloat resqx4 = resqx[base+3*p_Np];
      dfloat resqx5 = resqx[base+4*p_Np];
      dfloat resqx6 = resqx[base+5*p_Np];

      dfloat resqy1 = resqy[base+0*p_Np];
      dfloat resqy2 = resqy[base+1*p_Np];
      dfloat resqy3 = resqy[base+2*p_Np];
      dfloat resqy4 = resqy[base+3*p_Np];
      dfloat resqy5 = resqy[base+4*p_Np];
      dfloat resqy6 = resqy[base+5*p_Np];

      dfloat resNT1 = resNT[base+0*p_Np];
      dfloat resNT2 = resNT[base+1*p_Np];
      dfloat resNT3 = resNT[base+2*p_Np];
      dfloat resNT4 = resNT[base+3*p_Np];
      dfloat resNT5 = resNT[base+4*p_Np];
      dfloat resNT6 = resNT[base+5*p_Np];
      
      dfloat rhsqx1 = rhsqx[base+0*p_Np];
      dfloat rhsqx2 = rhsqx[base+1*p_Np];
      dfloat rhsqx3 = rhsqx[base+2*p_Np];
      dfloat rhsqx4 = rhsqx[base+3*p_Np];
      dfloat rhsqx5 = rhsqx[base+4*p_Np];
      dfloat rhsqx6 = rhsqx[base+5*p_Np];

      dfloat rhsqy1 = rhsqy[base+0*p_Np];
      dfloat rhsqy2 = rhsqy[base+1*p_Np];
      dfloat rhsqy3 = rhsqy[base+2*p_Np];
      dfloat rhsqy4 = rhsqy[base+3*p_Np];
      dfloat rhsqy5 = rhsqy[base+4*p_Np];
      dfloat rhsqy6 = rhsqy[base+5*p_Np];

      dfloat rhsNT1 = rhsNT[base+0*p_Np];
      dfloat rhsNT2 = rhsNT[base+1*p_Np];
      dfloat rhsNT3 = rhsNT[base+2*p_Np];
      dfloat rhsNT4 = rhsNT[base+3*p_Np];
      dfloat rhsNT5 = rhsNT[base+4*p_Np];
      dfloat rhsNT6 = rhsNT[base+5*p_Np];

      dfloat qx1 = qx[base+0*p_Np];
      dfloat qx2 = qx[base+1*p_Np];
      dfloat qx3 = qx[base+2*p_Np];
      dfloat qx4 = qx[base+3*p_Np];
      dfloat qx5 = qx[base+4*p_Np];
      dfloat qx6 = qx[base+5*p_Np];

      dfloat qy1 = qy[base+0*p_Np];
      dfloat qy2 = qy[base+1*p_Np];
      dfloat qy3 = qy[base+2*p_Np];
      dfloat qy4 = qy[base+3*p_Np];
      dfloat qy5 = qy[base+4*p_Np];
      dfloat qy6 = qy[base+5*p_Np];

      dfloat NT1 = NT[base+0*p_Np];
      dfloat NT2 = NT[base+1*p_Np];
      dfloat NT3 = NT[base+2*p_Np];
      dfloat NT4 = NT[base+3*p_Np];
      dfloat NT5 = NT[base+4*p_Np];
      dfloat NT6 = NT[base+5*p_Np];

      
      resqx1 = rka*resqx1 + dt*rhsqx1;
      resqx2 = rka*resqx2 + dt*rhsqx2;
      resqx3 = rka*resqx3 + dt*rhsqx3;
      resqx4 = rka*resqx4 + dt*rhsqx4;
      resqx5 = rka*resqx5 + dt*rhsqx5;
      resqx6 = rka*resqx6 + dt*rhsqx6;

      resqy1 = rka*resqy1 + dt*rhsqy1;
      resqy2 = rka*resqy2 + dt*rhsqy2;
      resqy3 = rka*resqy3 + dt*rhsqy3;
      resqy4 = rka*resqy4 + dt*rhsqy4;
      resqy5 = rka*resqy5 + dt*rhsqy5;
      resqy6 = rka*resqy6 + dt*rhsqy6;

      resNT1 = rka*resNT1 + dt*rhsNT1;
      resNT2 = rka*resNT2 + dt*rhsNT2;
      resNT3 = rka*resNT3 + dt*rhsNT3;
      resNT4 = rka*resNT4 + dt*rhsNT4;
      resNT5 = rka*resNT5 + dt*rhsNT5;
      resNT6 = rka*resNT6 + dt*rhsNT6;

      qx1 += rkb*resqx1;
      qx2 += rkb*resqx2;
      qx3 += rkb*resqx3;
      qx4 += rkb*resqx4;
      qx5 += rkb*resqx5;
      qx6 += rkb*resqx6;

      qy1 += rkb*resqy1;
      qy2 += rkb*resqy2;
      qy3 += rkb*resqy3;
      qy4 += rkb*resqy4;
      qy5 += rkb*resqy5;
      qy6 += rkb*resqy6;

      NT1 += rkb*resNT1;
      NT2 += rkb*resNT2;
      NT3 += rkb*resNT3;
      NT4 += rkb*resNT4;
      NT5 += rkb*resNT5;
      NT6 += rkb*resNT6;

      if(recombine == 1){
	qx1 = 0.5f*(qx1+qy1);
	qx2 = 0.5f*(qx2+qy2);
	qx3 = 0.5f*(qx3+qy3);
	qx4 = 0.5f*(qx4+qy4);
	qx5 = 0.5f*(qx5+qy5);
	qx6 = 0.5f*(qx6+qy6);
	qy1 = qx1;
	qy2 = qx2;
	qy3 = qx3;
	qy4 = qx4;
	qy5 = qx5;
	qy6 = qx6;
      }

      dfloat4 qa, qb;
      qa.x = p_q1bar + qx1 + qy1;
      qa.y = ramp*p_q2bar + qx2 + qy2;
      qa.z = ramp*p_q3bar + qx3 + qy3;
      qa.w = ramp*ramp*p_q4bar + qx4 + qy4;
      
      qb.x = ramp*ramp*p_q5bar + qx5 + qy5;
      qb.y = ramp*ramp*p_q6bar + qx6 + qy6;

      q[2*(n+e*p_Np)] = qa;
      q[2*(n+e*p_Np)+1] = qb;

      resqx[base+0*p_Np] = resqx1;
      resqx[base+1*p_Np] = resqx2;
      resqx[base+2*p_Np] = resqx3;
      resqx[base+3*p_Np] = resqx4;
      resqx[base+4*p_Np] = resqx5;
      resqx[base+5*p_Np] = resqx6;

      resqy[base+0*p_Np] = resqy1;
      resqy[base+1*p_Np] = resqy2;
      resqy[base+2*p_Np] = resqy3;
      resqy[base+3*p_Np] = resqy4;
      resqy[base+4*p_Np] = resqy5;
      resqy[base+5*p_Np] = resqy6;

      resNT[base+0*p_Np] = resNT1;
      resNT[base+1*p_Np] = resNT2;
      resNT[base+2*p_Np] = resNT3;
      resNT[base+3*p_Np] = resNT4;
      resNT[base+4*p_Np] = resNT5;
      resNT[base+5*p_Np] = resNT6;

      qx[base+0*p_Np] = qx1;
      qx[base+1*p_Np] = qx2;
      qx[base+2*p_Np] = qx3;
      qx[base+3*p_Np] = qx4;
      qx[base+4*p_Np] = qx5;
      qx[base+5*p_Np] = qx6;

      qy[base+0*p_Np] = qy1;
      qy[base+1*p_Np] = qy2;
      qy[base+2*p_Np] = qy3;
      qy[base+3*p_Np] = qy4;
      qy[base+4*p_Np] = qy5;
      qy[base+5*p_Np] = qy6;

      NT[base+0*p_Np] = NT1;
      NT[base+1*p_Np] = NT2;
      NT[base+2*p_Np] = NT3;
      NT[base+3*p_Np] = NT4;
      NT[base+4*p_Np] = NT5;
      NT[base+5*p_Np] = NT6;
    }
  }
}

