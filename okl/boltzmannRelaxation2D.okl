// MRAB relaxation cub
kernel void boltzmannRelaxationCub2D(const iint Nelements,
                         const iint * restrict elementIds,
                         const iint nrhs, 
                         const iint shift,
                         const dfloat * restrict cubInterpT,
                         const dfloat * restrict cubProjectT,
                         const dfloat * restrict q,
                               dfloat * restrict rhsq){
  
  for(iint eo=0;eo<Nelements;eo+=p_NblockCub;outer0){  // for all elements

    // shared memory for q at nodes
    shared dfloat s_q[p_NblockCub][p_Nfields][p_Np];

    // sub-group of p_Np cubature node interpolants of N4,N5,N6
    shared dfloat s_cubN4[p_NblockCub][p_cubNp];
    shared dfloat s_cubN5[p_NblockCub][p_cubNp];
    shared dfloat s_cubN6[p_NblockCub][p_cubNp];

    exclusive iint e;

    // prefetch q to shared
    for(iint es=0;es<p_NblockCub;++es;inner1){
      for(iint n=0;n<p_maxCubNodes;++n;inner0){    
    
    iint et = eo+es; // element in block
    if(et<Nelements){
      e = elementIds[et];

      if(n<p_Np){
        const iint id = p_Nfields*(e*p_Np + n);
        for(iint fld=0; fld<p_Nfields;++fld){
          s_q[es][fld][n] = q[id+fld];
        }
      }
     }
    }
   }
    
    // make sure all node data is loaded into shared
    barrier(localMemFence);

    // interpolate q to cubature
    for(iint es=0;es<p_NblockCub;++es;inner1){
      for(iint n=0;n<p_maxCubNodes;++n;inner0){     
    
    iint et = eo+es; // element in block
    if(et<Nelements){
      if(n<p_cubNp){
        dfloat cubq1 = 0.0f, cubq2 = 0.0f, cubq3 = 0.0f;
        dfloat cubq4 = 0.0f, cubq5 = 0.0f, cubq6 = 0.0f;
        
        for(iint m=0;m<p_Np;++m){
          const dfloat Icn  = cubInterpT[m*p_cubNp+n];
          cubq1 += Icn*s_q[es][0][m];
          cubq2 += Icn*s_q[es][1][m];
          cubq3 += Icn*s_q[es][2][m];
          cubq4 += Icn*s_q[es][3][m];
          cubq5 += Icn*s_q[es][4][m];
          cubq6 += Icn*s_q[es][5][m];
        }
       
        dfloat icubq1 = 1.f/cubq1;
        // BGK relaxation approximation to the Boltzmann collision operator
        s_cubN4[es][n] = -p_tauInv*(cubq4 -            cubq2*cubq3*icubq1);
        s_cubN5[es][n] = -p_tauInv*(cubq5 - p_invsqrt2*cubq2*cubq2*icubq1);
        s_cubN6[es][n] = -p_tauInv*(cubq6 - p_invsqrt2*cubq3*cubq3*icubq1);
      }
    }
      }
    }

    //make sure all cubature node data is loaded into shared
    barrier(localMemFence);
    
    // partial projection to nodes from cubature-sub-group
    for(iint es=0;es<p_NblockCub;++es;inner1){
      for(iint n=0;n<p_maxCubNodes;++n;inner0){     
    
        iint et = eo+es; // element in block
        if(et<Nelements){
            if(n<p_Np){
             //Update 
                const iint id = p_Nfields*(e*p_Np + n);
                const iint rhsId = nrhs*id + p_Nfields*shift;

                dfloat N4 = rhsq[rhsId + 3];
                dfloat N5 = rhsq[rhsId + 4];
                dfloat N6 = rhsq[rhsId + 5];

                for(iint i=0;i<p_cubNp;++i){
                  const dfloat Pnc  = cubProjectT[i*p_Np+n];
                  N4 += Pnc*s_cubN4[es][i];
                  N5 += Pnc*s_cubN5[es][i];
                  N6 += Pnc*s_cubN6[es][i];
                }

              // Update  
              rhsq[rhsId + 3] = N4;
              rhsq[rhsId + 4] = N5;
              rhsq[rhsId + 5] = N6;
        
           }
         }
        }
     }
  }
}



// Fully Explicit Scheme Uses Clasical half Half Splitting
kernel void boltzmannPmlRelaxationCub2D(const iint pmlNelements,
                                    const iint * restrict pmlElementIds,
                                    const iint * restrict pmlIds,
                                    const iint nrhs,
                                    const iint shift,
                                    const dfloat * restrict cubInterpT,
                                    const dfloat * restrict cubProjectT,
                                    const dfloat * restrict pmlSigmaX,
                                    const dfloat * restrict pmlSigmaY, 
                                    const dfloat * restrict q,
                                    const dfloat * restrict pmlqx,
                                    const dfloat * restrict pmlqy,
                                          dfloat * restrict rhsq,
                                          dfloat * restrict pmlrhsqx,
                                          dfloat * restrict pmlrhsqy){

    for(iint eo=0;eo<pmlNelements;eo+=p_NblockCub;outer0){  // for all elements

    // shared memory for q at nodes
    shared dfloat  s_q[p_NblockCub][p_Nfields][p_Np];
    shared dfloat s_qx[p_NblockCub][p_Nfields][p_Np];
    shared dfloat s_qy[p_NblockCub][p_Nfields][p_Np];

    // sub-group of p_Np cubature node interpolants of N4,N5,N6
    shared dfloat s_cubq[p_NblockCub][3][p_cubNp];
    shared dfloat s_cubqx[p_NblockCub][p_Nfields][p_cubNp];
    shared dfloat s_cubqy[p_NblockCub][p_Nfields][p_cubNp];
    // shared dfloat s_cubqt[p_NblockCub][p_Nfields][p_cubNp];

    exclusive iint e, pmlId;

    // prefetch q to shared
    for(iint es=0;es<p_NblockCub;++es;inner1){
      for(iint n=0;n<p_maxCubNodes;++n;inner0){      
        iint et = eo+es; // element in block
        if(et<pmlNelements){
            e     = pmlElementIds[et];
            pmlId = pmlIds[et];
            
            if(n<p_Np){
              const iint id  = p_Nfields*(e*p_Np + n);
              const iint pid = p_Nfields*(pmlId*p_Np + n);
              
              for(iint fld=0; fld<p_Nfields;++fld){
                s_q[es][fld][n]   = q[id +fld];
                s_qx[es][fld][n]  = pmlqx[pid+fld];
                s_qy[es][fld][n]  = pmlqy[pid+fld];
              }
            }
         }
       }
    }
    
    // make sure all node data is loaded into shared
    barrier(localMemFence);

    // interpolate q to cubature
    for(iint es=0;es<p_NblockCub;++es;inner1){
      for(iint n=0;n<p_maxCubNodes;++n;inner0){     
        iint et = eo+es; // element in block
        if(et<pmlNelements){
          if(n<p_cubNp){
            dfloat r_q[p_Nfields];
            dfloat r_qx[p_Nfields];
            dfloat r_qy[p_Nfields];

            for(iint fld=0; fld<p_Nfields ; fld++){
              r_q[fld]  = 0.f;
              r_qx[fld] = 0.f;
              r_qy[fld] = 0.f;
            }

            for(iint m=0;m<p_Np;++m){
              const dfloat Icn  = cubInterpT[m*p_cubNp+n];
              for(iint fld=0; fld<p_Nfields;++fld){
                r_q[fld]  += Icn*s_q[es][fld][m];
                r_qx[fld] += Icn*s_qx[es][fld][m];
                r_qy[fld] += Icn*s_qy[es][fld][m];
              }
            }
            
            // Prefetch sigma
            const dfloat sigmaxe = pmlSigmaX[pmlId*p_cubNp+n];
            const dfloat sigmaye = pmlSigmaY[pmlId*p_cubNp+n];

            const dfloat msigmaxe = sigmaxe + sigmaye*p_pmlAlpha;
            const dfloat msigmaye = sigmaye + sigmaxe*p_pmlAlpha;
            
            for(iint fld=0; fld<p_Nfields;++fld){       
              s_cubqx[es][fld][n] = -msigmaxe*r_qx[fld];
              s_cubqy[es][fld][n] = -msigmaye*r_qy[fld];
            }
            
            
            dfloat icubq1 = 1.f/r_q[0];
            // BGK relaxation approximation to the Boltzmann collision operator
            s_cubq[es][0][n] = -p_tauInv*(r_q[3]-(           r_q[1]*r_q[2]*icubq1));
            s_cubq[es][1][n] = -p_tauInv*(r_q[4]-(p_invsqrt2*r_q[1]*r_q[1]*icubq1));
            s_cubq[es][2][n] = -p_tauInv*(r_q[5]-(p_invsqrt2*r_q[2]*r_q[2]*icubq1));
          }
        }
      }
    }

    // make sure all cubature node data is loaded into shared
    barrier(localMemFence);
    
    // partial projection to nodes from cubature-sub-group
    for(iint es=0;es<p_NblockCub;++es;inner1){
      for(iint n=0;n<p_maxCubNodes;++n;inner0){     
    
        iint et = eo+es; // element in block
          if(et<pmlNelements){
            if(n<p_Np){
          // Update
              const iint rhsId    = nrhs*p_Nfields*(p_Np*e + n)     + p_Nfields*shift;
              const iint pmlrhsId = nrhs*p_Nfields*(p_Np*pmlId + n) + p_Nfields*shift;

              dfloat r_rhsq[p_Nfields];
              dfloat r_rhsqx[p_Nfields];
              dfloat r_rhsqy[p_Nfields]; 
              // dfloat r_rhsqt[p_Nfields];

             for(iint fld=0; fld<p_Nfields;++fld){
                r_rhsq[fld]  = 0.f;
                r_rhsqx[fld] = 0.f;
                r_rhsqy[fld] = 0.f;
              }
           
           
              // use temporaries for part sums for N4,N5,N6 because of exclusives
              for(iint m=0;m<p_cubNp;++m){
                const dfloat Pnc  = cubProjectT[m*p_Np+n];
                //
                 for(iint fld=0; fld<p_Nfields; fld++){
                  if(fld<3){
                    r_rhsq[fld+3] += Pnc*s_cubq[es][fld][m];
                  } 
                  r_rhsqx[fld] += Pnc*s_cubqx[es][fld][m];
                  r_rhsqy[fld] += Pnc*s_cubqy[es][fld][m];
                 }
              }
            
              //
             for(iint fld=0; fld<p_Nfields;++fld){
                pmlrhsqx[pmlrhsId + fld] += r_rhsqx[fld];
                pmlrhsqy[pmlrhsId + fld] += r_rhsqy[fld];
                rhsq[rhsId + fld]        += (r_rhsqx[fld] + r_rhsqy[fld] + r_rhsq[fld]);
              }   
          }
        }
      }
    }

  }
}




// MRAB relaxation cub
kernel void boltzmannSARelaxationCub2D(const iint Nelements,
                         const iint * restrict elementIds,
                         const iint nrhs, 
                         const iint shift,
                         const dfloat * restrict cubInterpT,
                         const dfloat * restrict cubProjectT,
                         const dfloat * restrict q,
                               dfloat * restrict rhsq){
  
  for(iint eo=0;eo<Nelements;eo+=p_NblockCub;outer0){  // for all elements

    // shared memory for q at nodes
    shared dfloat s_q[p_NblockCub][p_Nfields][p_Np];

    // sub-group of p_Np cubature node interpolants of N4,N5,N6
    shared dfloat s_cubN4[p_NblockCub][p_cubNp];
    shared dfloat s_cubN5[p_NblockCub][p_cubNp];
    shared dfloat s_cubN6[p_NblockCub][p_cubNp];

    exclusive iint e;

    // prefetch q to shared
    for(iint es=0;es<p_NblockCub;++es;inner1){
      for(iint n=0;n<p_maxCubNodes;++n;inner0){    
    
    iint et = eo+es; // element in block
    if(et<Nelements){
      e = elementIds[et];

      if(n<p_Np){
        const iint id = p_Nfields*(e*p_Np + n);
        for(iint fld=0; fld<p_Nfields;++fld){
          s_q[es][fld][n] = q[id+fld];
        }
      }
     }
    }
   }
    
    // make sure all node data is loaded into shared
    barrier(localMemFence);

    // interpolate q to cubature
    for(iint es=0;es<p_NblockCub;++es;inner1){
      for(iint n=0;n<p_maxCubNodes;++n;inner0){     
    
    iint et = eo+es; // element in block
    if(et<Nelements){
      if(n<p_cubNp){
        dfloat cubq1 = 0.0f, cubq2 = 0.0f, cubq3 = 0.0f;
        dfloat cubq4 = 0.0f, cubq5 = 0.0f, cubq6 = 0.0f;
        
        for(iint m=0;m<p_Np;++m){
          const dfloat Icn  = cubInterpT[m*p_cubNp+n];
          cubq1 += Icn*s_q[es][0][m];
          cubq2 += Icn*s_q[es][1][m];
          cubq3 += Icn*s_q[es][2][m];
          cubq4 += Icn*s_q[es][3][m];
          cubq5 += Icn*s_q[es][4][m];
          cubq6 += Icn*s_q[es][5][m];
        }
        //
        dfloat icubq1 = 1.f/cubq1;

        // BGK relaxation approximation to the Boltzmann collision operator
        s_cubN4[es][n] = p_tauInv*(           cubq2*cubq3*icubq1);
        s_cubN5[es][n] = p_tauInv*(p_invsqrt2*cubq2*cubq2*icubq1);
        s_cubN6[es][n] = p_tauInv*(p_invsqrt2*cubq3*cubq3*icubq1);
      }
    }
      }
    }

    //make sure all cubature node data is loaded into shared
    barrier(localMemFence);
    
    // partial projection to nodes from cubature-sub-group
    for(iint es=0;es<p_NblockCub;++es;inner1){
      for(iint n=0;n<p_maxCubNodes;++n;inner0){     
    
        iint et = eo+es; // element in block
        if(et<Nelements){
            if(n<p_Np){
             //Update 
                const iint id = p_Nfields*(e*p_Np + n);
                const iint rhsId = nrhs*id + p_Nfields*shift;

                dfloat N4 = rhsq[rhsId + 3];
                dfloat N5 = rhsq[rhsId + 4];
                dfloat N6 = rhsq[rhsId + 5];

                for(iint i=0;i<p_cubNp;++i){
                  const dfloat Pnc  = cubProjectT[i*p_Np+n];
                  N4 += Pnc*s_cubN4[es][i];
                  N5 += Pnc*s_cubN5[es][i];
                  N6 += Pnc*s_cubN6[es][i];
                }

              // Update  
              rhsq[rhsId + 3] = N4;
              rhsq[rhsId + 4] = N5;
              rhsq[rhsId + 5] = N6;
        
           }
         }
        }
     }
  }
}




// 
kernel void boltzmannSAPmlRelaxationCub2D(const iint pmlNelements,
                                    const iint * restrict pmlElementIds,
                                    const iint * restrict pmlIds,
                                    const iint nrhs,
                                    const iint shift,
                                    const dfloat * restrict cubInterpT,
                                    const dfloat * restrict cubProjectT,
                                    const dfloat * restrict pmlSigmaX,
                                    const dfloat * restrict pmlSigmaY, 
                                    const dfloat * restrict q,
                                    const dfloat * restrict pmlqx,
                                    const dfloat * restrict pmlqy,
                                          dfloat * restrict rhsq,
                                          dfloat * restrict pmlrhsqx,
                                          dfloat * restrict pmlrhsqy){
  
   for(iint eo=0;eo<pmlNelements;eo+=p_NblockCub;outer0){  // for all elements

    // shared memory for q at nodes
    shared dfloat  s_q[p_NblockCub][p_Nfields][p_Np];
    shared dfloat s_qx[p_NblockCub][p_Nfields][p_Np];
    shared dfloat s_qy[p_NblockCub][p_Nfields][p_Np];

    // sub-group of p_Np cubature node interpolants of N4,N5,N6
    shared dfloat s_cubq[p_NblockCub][p_Nfields][p_cubNp];
    shared dfloat s_cubqx[p_NblockCub][p_Nfields][p_cubNp];
    shared dfloat s_cubqy[p_NblockCub][p_Nfields][p_cubNp];

    exclusive iint e, pmlId;

    // prefetch q to shared
    for(iint es=0;es<p_NblockCub;++es;inner1){
      for(iint n=0;n<p_maxCubNodes;++n;inner0){      
        iint et = eo+es; // element in block
        if(et<pmlNelements){
            e     = pmlElementIds[et];
            pmlId = pmlIds[et];
            
            if(n<p_Np){
              const iint id  = p_Nfields*(e*p_Np + n);
              const iint pid = p_Nfields*(pmlId*p_Np + n);
              
              for(iint fld=0; fld<p_Nfields;++fld){
                s_q[es][fld][n]   = q[id +fld];
                s_qx[es][fld][n]  = pmlqx[pid+fld];
                s_qy[es][fld][n]  = pmlqy[pid+fld];
              }
            }
         }
       }
    }
    
    // make sure all node data is loaded into shared
    barrier(localMemFence);

    // interpolate q to cubature
    for(iint es=0;es<p_NblockCub;++es;inner1){
      for(iint n=0;n<p_maxCubNodes;++n;inner0){     
        iint et = eo+es; // element in block
        if(et<pmlNelements){
          if(n<p_cubNp){
            dfloat r_q[p_Nfields];
            dfloat r_qx[p_Nfields];
            dfloat r_qy[p_Nfields];

            for(iint fld=0; fld<p_Nfields ; fld++){
              r_q[fld]  = 0.f;
              r_qx[fld] = 0.f;
              r_qy[fld] = 0.f;
            }

            for(iint m=0;m<p_Np;++m){
              const dfloat Icn  = cubInterpT[m*p_cubNp+n];
              for(iint fld=0; fld<p_Nfields;++fld){
                r_q[fld]  += Icn*s_q[es][fld][m];
                r_qx[fld] += Icn*s_qx[es][fld][m];
                r_qy[fld] += Icn*s_qy[es][fld][m];
              }
            }
            //
            
             // Prefetch sigma
            const dfloat sigmaxe = pmlSigmaX[pmlId*p_cubNp+n];
            const dfloat sigmaye = pmlSigmaY[pmlId*p_cubNp+n];

            const dfloat msigmaxe = sigmaxe + sigmaye*p_pmlAlpha; //
            const dfloat msigmaye = sigmaye + sigmaxe*p_pmlAlpha;
            
            for(iint fld=0; fld<p_Nfields;++fld){
              s_cubqx[es][fld][n] = -msigmaxe*r_qx[fld];
              s_cubqy[es][fld][n] = -msigmaye*r_qy[fld];
              s_cubq[es][fld][n] = -msigmaxe*r_qx[fld] - msigmaye*r_qy[fld];  
            }
            

            // // !!!!!!!!
            //  s_cubq [es][5][n] = -msigmaxe*r_qx[5]   -msigmaye*r_qy[5];


            dfloat icubq1 = 1.f/r_q[0];
            // BGK relaxation approximation to the Boltzmann collision operator
            s_cubq[es][3][n] += p_tauInv*(           r_q[1]*r_q[2]*icubq1);
            s_cubq[es][4][n] += p_tauInv*(p_invsqrt2*r_q[1]*r_q[1]*icubq1);
            s_cubq[es][5][n] += p_tauInv*(p_invsqrt2*r_q[2]*r_q[2]*icubq1);


             // s_cubqy[es][4][n] += p_tauInv*(p_invsqrt2*r_q[1]*r_q[1]*icubq1);
             // s_cubqx[es][5][n] += p_tauInv*(p_invsqrt2*r_q[2]*r_q[2]*icubq1);



          }
        }
      }
    }

    // make sure all cubature node data is loaded into shared
    barrier(localMemFence);
    
    // partial projection to nodes from cubature-sub-group
    for(iint es=0;es<p_NblockCub;++es;inner1){
      for(iint n=0;n<p_maxCubNodes;++n;inner0){     
    
        iint et = eo+es; // element in block
          if(et<pmlNelements){
            if(n<p_Np){
          // Update
              const iint rhsId    = nrhs*p_Nfields*(p_Np*e + n)     + p_Nfields*shift;
              const iint pmlrhsId = nrhs*p_Nfields*(p_Np*pmlId + n) + p_Nfields*shift;

              dfloat r_rhsq[p_Nfields];
              dfloat r_rhsqx[p_Nfields];
              dfloat r_rhsqy[p_Nfields];

              for(iint fld=0; fld<p_Nfields;++fld){
                r_rhsq[fld]  = 0.f;
                r_rhsqx[fld] = 0.f;
                r_rhsqy[fld] = 0.f;
              }
           
              // use temporaries for part sums for N4,N5,N6 because of exclusives
              for(iint m=0;m<p_cubNp;++m){
                const dfloat Pnc  = cubProjectT[m*p_Np+n];
                //
                 for(iint fld=0; fld<p_Nfields; fld++){
                  r_rhsq[fld]  += Pnc*s_cubq[es][fld][m];
                  r_rhsqx[fld] += Pnc*s_cubqx[es][fld][m];
                  r_rhsqy[fld] += Pnc*s_cubqy[es][fld][m];
                 }
              }
            
              //
             for(iint fld=0; fld<p_Nfields;++fld){
                pmlrhsqx[pmlrhsId + fld] += r_rhsqx[fld];
                pmlrhsqy[pmlrhsId + fld] += r_rhsqy[fld];
                rhsq[rhsId + fld]        += r_rhsq[fld];
              }   
          }
        }
      }
    }

  }
}