#define RXID 0  
#define RYID 1  
#define SXID 2  
#define SYID 3
//
#define UXID 0
#define UYID 1
#define PRID 2

#define PRS 0
#define PRI 1
/* offsets for nx, ny, sJ, 1/J */
#define NXID 0  
#define NYID 1  
#define SJID 2  
#define IJID 3  
#define WSJID 4
#define IHID 5


// Gradient only applies to Pressure and Pressure Incremament
// Boundary Conditions are implemented in strong form
void boundaryConditions2D(const iint bc,
			                  const dfloat  t, const dfloat  x, const dfloat  y,
			                  const dfloat  nx, const dfloat  ny,
                        const dfloat prM, dfloat * restrict prB){
	dfloat nu   = 1.0f/40.0f;
  dfloat lambda = 1.f/(2.f * nu) - occaSqrt( 1.f/(4.f*nu*nu) + 4.f*OCCA_PI*OCCA_PI) ;

  if(bc==1){ // Wall 
    *prB = prM ; // Neumann for Pressure // do nothing
  }
  if(bc==2){ // Inflow
  	//
    *prB = prM; // Neumann for Pressure // do nothing
  }
  if(bc==3){ // Outflow 
   #if 0 
   dfloat prbc = 0.5f*(1.0f - occaExp(2.0f*lambda*x));
   #else
   dfloat prbc = 0.f; 
   #endif
   *prB = 2.0f* prbc - prM ; //Dirichlet for pressure in strong form: 2*pr_D-prM
  }
}





// Compute Gradient in Strong Form
kernel void insGradientVolume2D(const iint Nelements,
																const dfloat * restrict vgeo,
																const dfloat * restrict DrT,
																const dfloat * restrict DsT,
																const dfloat * restrict U,
															        dfloat * restrict Ux, 
																		  dfloat * restrict Uy){
  
  for(iint eo=0;eo<Nelements;eo+=p_NblockV;outer0){  
  // for all elements
   shared dfloat s_U[p_NblockV][p_Np];

    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element
				iint e = eo+es; // element in block
				if(e<Nelements){ 
          s_U[es][n]  = U[n + e*p_Np];
				}
      }
    }

     // Make sure all node data is loaded into shared
    barrier(localMemFence);


    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element
	
			iint e = eo+es; // element in block
			if(e<Nelements){	  
			  // prefetch geometric factors (constant on triangle)
			  const dfloat drdx = vgeo[e*p_Nvgeo + RXID];
			  const dfloat drdy = vgeo[e*p_Nvgeo + RYID];
			  const dfloat dsdx = vgeo[e*p_Nvgeo + SXID];
			  const dfloat dsdy = vgeo[e*p_Nvgeo + SYID];
	      //
				dfloat dudr  = 0.f, duds  = 0.f;
				occaUnroll(p_Np)
				for(iint i=0;i<p_Np;++i){
					const dfloat Drni = DrT[n+i*p_Np];
					const dfloat Dsni = DsT[n+i*p_Np];
					//
					dudr  += Drni*s_U[es][i];
					duds  += Dsni*s_U[es][i];
				}
				
				const iint id = e*p_Np+n;
				Ux[id] = drdx*dudr + dsdx*duds;				     
				Uy[id] = drdy*dudr + dsdy*duds;
	 
	}
      }
    }
 }
}



//
kernel void insGradientSurface2D(const iint Nelements,
				     const dfloat * restrict sgeo,
				     const dfloat * restrict LIFTT,
				     const iint   * restrict vmapM,
				     const iint   * restrict vmapP,
				     const iint   * restrict EToB,
				     const dfloat * restrict x,
				     const dfloat * restrict y,
				     const dfloat time,
				     const dfloat dt,
				     const iint solverID, 
				     const dfloat * restrict U,
				           dfloat * restrict Ux,
				           dfloat * restrict Uy){
  
  // for all elements
  for(iint eo=0;eo<Nelements;eo+=p_NblockS;outer0){
    //
    shared dfloat s_fluxUx[p_NblockS][p_Nfp*p_Nfaces];
    shared dfloat s_fluxUy[p_NblockS][p_Nfp*p_Nfaces];

     // for all face nodes of all elements
    for(iint es=0;es<p_NblockS;++es;inner1){
      for(iint n=0;n<p_maxNodes;++n;inner0){ // maxNodes = max(Nfp*Nfaces,Np)
	    iint e = eo + es;
	     if(e<Nelements){
	      if(n<p_Nfp*p_Nfaces){
		    // find face that owns this node
		    iint face = n/p_Nfp;
		    // load surface geofactors for this face
		    iint sid    = p_Nsgeo*(e*p_Nfaces+face);
		    dfloat nx   = sgeo[sid+NXID];
		    dfloat ny   = sgeo[sid+NYID];
		    dfloat sJ   = sgeo[sid+SJID];
		    dfloat invJ = sgeo[sid+IJID];
		   
		    // indices of negative and positive traces of face node
		    iint id  = e*p_Nfp*p_Nfaces + n;
		    iint idM = vmapM[id];
		    iint idP = vmapP[id];

		   if(idP<0) idP = idM; // 
		  // load negative and positive trace node values of U
			   dfloat  um = U[idM], up = U[idP];

		    // apply boundary condition
		    iint bc = EToB[face+p_Nfaces*e];
		    if(bc>0){
		      boundaryConditions2D(bc, time, x[idM], y[idM], nx, ny, um, &up); 

          if(solverID == PRI){
          	// implement later 
          	dfloat upo =0.f;
          	boundaryConditions2D(bc, time-dt, x[idM], y[idM], nx, ny, um, &upo);
          	up -= upo; 
		      }
		    }

        // evaluate "flux" terms: LLF
        const dfloat sc = invJ * sJ ; 
        // Centered flux for pr p*-p = 0.5(up-um) // Central Flux
        s_fluxUx[es][n]  = sc*(.5f*nx*(up-um));
        s_fluxUy[es][n]  = sc*(.5f*ny*(up-um));
       	 }
    		}
			}
		}
    
   
    // wait for all flux functions are written to shared 
    barrier(localMemFence);

    // for each node in the element
    for(iint es=0;es<p_NblockS;++es;inner1){
			for(iint n=0;n<p_maxNodes;++n;inner0){
				iint e = eo + es;
					if(e<Nelements){
						if(n<p_Np){
							iint id = e*p_Np + n;
							dfloat ux  = Ux[id];
							dfloat uy  = Uy[id];
							// Lift
							occaUnroll(p_NfacesNfp)
							for(int m=0;m<p_Nfaces*p_Nfp;++m){
								dfloat L = LIFTT[n+m*p_Np];
								ux   += L*s_fluxUx[es][m];
								uy   += L*s_fluxUy[es][m];
					}
					//  rhsu = grad(p) // Note that multiplied with M^-1
					Ux[id] = ux;
					Uy[id] = uy;
				  }
				}
      }
    }
  }


}

