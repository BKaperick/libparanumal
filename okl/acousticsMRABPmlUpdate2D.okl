
kernel void acousticsMRABPmlUpdate2D(const iint pmlNelements,
           const iint   * restrict pmlIds,
           const dfloat dt, 
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           const dfloat * restrict pmlrhsq,
           dfloat * restrict pmlq,
           const iint   rhsShift){
  
  for(iint et=0;et<pmlNelements;++et;outer0){  // for all elements
    for(iint n=0; n < p_Np; ++n; inner0){  
      const iint pmlId = pmlIds[et];
      const iint id = p_pmlNfields*(pmlId*p_Np + n);

      const iint rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
      const iint rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
      const iint rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;
 
      dfloat rhsutilde = dt*(a1*pmlrhsq[rhsId1+0] + a2*pmlrhsq[rhsId2+0] + a3*pmlrhsq[rhsId3+0]);
      dfloat rhsvtilde = dt*(a1*pmlrhsq[rhsId1+1] + a2*pmlrhsq[rhsId2+1] + a3*pmlrhsq[rhsId3+1]);
      dfloat rhsptilde = dt*(a1*pmlrhsq[rhsId1+2] + a2*pmlrhsq[rhsId2+2] + a3*pmlrhsq[rhsId3+2]);

      //write update
      pmlq[id+0] += rhsutilde;
      pmlq[id+1] += rhsvtilde;
      pmlq[id+2] += rhsptilde; 
    }
  }
}
