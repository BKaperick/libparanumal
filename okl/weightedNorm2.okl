kernel void weightedNorm2(const dlong N,
			  const dfloat * restrict w,
			  const dfloat * restrict x,
			  dfloat * restrict wxx){
  

  for(dlong b=0;b<(N+p_blockSize-1)/p_blockSize;++b;outer0){
    
    volatile shared dfloat s_wxx[p_blockSize];
    
    for(int t=0;t<p_blockSize;++t;inner0){
      const dlong id = t + p_blockSize*b;
      const dfloat xid = (id<N)?x[id]:0;
      const dfloat wid = (id<N)?w[id]:0;
      s_wxx[t] = wid*xid*xid;
    }
    
    barrier(localMemFence);
#if p_blockSize>512
    for(int t=0;t<p_blockSize;++t;inner0) if(t<512) s_wxx[t] += s_wxx[t+512];
    barrier(localMemFence);
#endif
#if p_blockSize>256
    for(int t=0;t<p_blockSize;++t;inner0) if(t<256) s_wxx[t] += s_wxx[t+256];
    barrier(localMemFence);
#endif

    for(int t=0;t<p_blockSize;++t;inner0) if(t<128) s_wxx[t] += s_wxx[t+128];
    barrier(localMemFence);

    for(int t=0;t<p_blockSize;++t;inner0) if(t< 64) s_wxx[t] += s_wxx[t+64];
    barrier(localMemFence);

    for(int t=0;t<p_blockSize;++t;inner0) if(t< 32) s_wxx[t] += s_wxx[t+32];
    for(int t=0;t<p_blockSize;++t;inner0) if(t< 16) s_wxx[t] += s_wxx[t+16];
    for(int t=0;t<p_blockSize;++t;inner0) if(t<  8) s_wxx[t] += s_wxx[t+8];
    for(int t=0;t<p_blockSize;++t;inner0) if(t<  4) s_wxx[t] += s_wxx[t+4];
    for(int t=0;t<p_blockSize;++t;inner0) if(t<  2) s_wxx[t] += s_wxx[t+2];

    for(int t=0;t<p_blockSize;++t;inner0) if(t<  1) wxx[b] = s_wxx[0] + s_wxx[1];
  }
}

