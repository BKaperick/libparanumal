#define p_patchNelements (p_Nfaces+1)
#define p_patchNp (p_Np*(p_Nfaces+1))


// experimental overlapping patch solver
kernel void ellipticPatchGather2D(const int Nelements,
                                  const iint   * restrict EToE,
                                  const iint   * restrict EToF,
                                  const dfloat * restrict q,
                                  dfloat * restrict Gq){

  // assume one patch per outer iteration (tune later)
  for(iint eo=0;eo<Nelements;eo+=p_NblockP;outer0){

    for(iint e=eo;e<eo+p_NblockP;++e;inner1){
      for(iint n=0;n<p_Np;++n;inner0){

	if(e<Nelements){

	  dfloat Gqn = 0;

	  Gqn = q[p_patchNp*e+n];
	  
	  for(iint f=0;f<p_Nfaces;++f){
	    
	    const iint eP = EToE[e*p_Nfaces+f]; // load element e first
	    const iint fP = EToF[e*p_Nfaces+f];
	
	    if(eP>=0){
	      Gqn += q[eP*p_patchNp+(fP+1)*p_Np+n]; 
	    }
	  }

	  Gq[e*p_Np+n] = Gqn;
	}
      }
    }
  }
}

