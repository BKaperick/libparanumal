#define QXID1 0  
#define QXID2 1  
#define QXID3 2
#define QXID4 3  
#define QXID5 4  
#define QXID6 5  
#define QXID8 6 
//
#define QYID1 7  
#define QYID2 8  
#define QYID3 9
#define QYID4 10  
#define QYID5 11  
#define QYID7 12  
#define QYID9 13 
//
#define QZID1 14  
#define QZID2 15  
#define QZID3 16
#define QZID4 17  
#define QZID6 18  
#define QZID7 19  
#define QZID10  20  

#define NXID 0  
#define NYID 1  
#define NZID 2 
#define SJID 3  
#define IJID 4  



#define p_isq12 (1.f/occaSqrt(12.f))
#define p_isq6 (1.f/occaSqrt(6.f))
#define PML_ENABLED 1 

void upwind3D(const dfloat nx,  const dfloat ny,  const dfloat nz,
              const dfloat q1M, const dfloat q2M, const dfloat q3M, const dfloat q4M, const dfloat q5M,
              const dfloat q6M, const dfloat q7M, const dfloat q8M, const dfloat q9M, const dfloat q10M,
              const dfloat q1B, const dfloat q2B, const dfloat q3B, const dfloat q4B, const dfloat q5B, 
              const dfloat q6B, const dfloat q7B, const dfloat q8B, const dfloat q9B, const dfloat q10B, 
              dfloat * restrict q1P, dfloat * restrict q2P, dfloat * restrict q3P, dfloat * restrict q4P, dfloat * restrict q5P, 
              dfloat * restrict q6P, dfloat * restrict q7P, dfloat * restrict q8P, dfloat * restrict q9P, dfloat * restrict q10P){ 
  
  *q1P  = 0.5f*(q1B  + q1M)  - p_isq12*(nx*(q2B-q2M) + ny*(q3B-q3M) + nz*(q4B-q4M));
  *q2P  = 0.5f*(q2B  + q2M)  - p_isq12*nx*(q1B-q1M) - p_isq6*nx*(q8B-q8M) - 0.5f*ny*(q5B-q5M) - 0.5f*nz*(q6B-q6M);
  *q3P  = 0.5f*(q3B  + q3M)  - 0.5f*nx*(q5B-q5M) - p_isq12*ny*(q1B-q1M) - p_isq6*ny*(q9B-q9M) - 0.5f*nz*(q7B-q7M);
  *q4P  = 0.5f*(q4B  + q4M)  - 0.5f*nx*(q6B-q6M) - 0.5f*ny*(q7B-q7M) - p_isq6*nz*(q10B-q10M) - p_isq12*nz*(q1B-q1M);
  *q5P  = 0.5f*(q5B  + q5M)  - 0.5f*nx*(q3B-q3M) - 0.5f*ny*(q2B-q2M);
  *q6P  = 0.5f*(q6B  + q6M)  - 0.5f*nx*(q4B-q4M) - 0.5f*nz*(q2B-q2M);
  *q7P  = 0.5f*(q7B  + q7M)  - 0.5f*ny*(q4B-q4M) - 0.5f*nz*(q3B-q3M);
  *q8P  = 0.5f*(q8B  + q8M)  - p_isq6*nx*(q2B-q2M);
  *q9P  = 0.5f*(q9B  + q9M)  - p_isq6*ny*(q3B-q3M);
  *q10P = 0.5f*(q10B + q10M) - p_isq6*nz*(q4B-q4M);
  
}


void boundaryConditions3D(const iint bc, const dfloat  t, const dfloat  x, const dfloat  y, const dfloat  z,
			  			  const dfloat  nx, const dfloat  ny, const dfloat  nz,
			              const dfloat ramp,
			              const dfloat  q1M, const dfloat  q2M, const dfloat  q3M, const dfloat  q4M, const dfloat  q5M, 
			              const dfloat  q6M, const dfloat  q7M, const dfloat  q8M, const dfloat  q9M, const dfloat  q10M,
			                    dfloat * restrict q1B, dfloat * restrict q2B, dfloat * restrict q3B, dfloat * restrict q4B, dfloat * restrict q5B,
			                    dfloat * restrict q6B, dfloat * restrict q7B, dfloat * restrict q8B, dfloat * restrict q9B, dfloat * restrict q10B ){
#if PML_ENABLED
  if (1 == bc)       // Wall
  {
    *q1B  =  q1M; 
    *q2B  = -q2M; // u=0;
    *q3B  = -q3M; // v=0;
    *q4B  = -q4M; // w=0; 
    *q5B  =  q5M;
    *q6B  =  q6M;
    *q7B  =  q7M;
    *q8B  =  q8M;
    *q9B  =  q9M;
    *q10B =  q10M;
  }
  else  
  { 
    *q1B  = 2.f*p_q1bar - q1M; 
    *q2B  = 2.f*ramp*p_q2bar - q2M; 
    *q3B  = 2.f*ramp*p_q3bar - q3M; 
    *q4B  = 2.f*ramp*p_q4bar - q4M;
    *q5B  = 2.f*ramp*ramp*p_q5bar  - q5M;
    *q6B  = 2.f*ramp*ramp*p_q6bar  - q6M;
    *q7B  = 2.f*ramp*ramp*p_q7bar  - q7M;
    *q8B  = 2.f*ramp*ramp*p_q8bar  - q8M;
    *q9B  = 2.f*ramp*ramp*p_q9bar  - q9M;
    *q10B = 2.f*ramp*ramp*p_q10bar - q10M;
  }
  


 #else
  if(bc==1){ // Wall 
    *q1B  =  q1M; 
    *q2B  = -q2M; // u=0;
    *q3B  = -q3M; // v=0;
    *q4B  = -q4M; // w=0; 
    *q5B  =  q5M;
    *q6B  =  q6M;
    *q7B  =  q7M;
    *q8B  =  q8M;
    *q9B  =  q9M;
    *q10B =  q10M;
  }
  if(bc==2){ // Inflow
    *q1B  =  q1M; 
    *q2B  =  1.f /p_sqrtRT; // Uniform flow;
    *q3B  =  0.f; // v=0;
    *q4B  =  0.f; // w=0; 
    *q5B  =  q5M;
    *q6B  =  q6M;
    *q7B  =  q7M;
    *q8B  =  q8M;
    *q9B  =  q9M;
    *q10B =  q10M;
  }
  if(bc==3){ // Outflow // do nothing
    *q1B = 1.0f; // Define atleast one parameter, Do nothing for others
  }

  if(bc==4){ // Slip for q2/ no slip for q3
    *q1B  =  q1M; 
    *q2B  =  q2M; // sli[p for u;
    *q3B  = -q3M; // v=0;
    *q4B  = -q4M; // w=0; 
    *q5B  =  q5M;
    *q6B  =  q6M;
    *q7B  =  q7M;
    *q8B  =  q8M;
    *q9B  =  q9M;
    *q10B =  q10M;
  }


  #endif
  
}


kernel void boltzmannSurface3D(const iint Nelements,
				     const iint * restrict elementIds,
				     const dfloat * restrict sgeo,
				     const dfloat * restrict LIFTT,
				     const iint   * restrict vmapM,
				     const iint   * restrict vmapP,
				     const iint   * restrict EToB,
				     const dfloat time,
				     const dfloat * restrict x,
				     const dfloat * restrict y,
				     const dfloat * restrict z,
				     const dfloat ramp,
				     const dfloat4 * restrict q,
				           dfloat4 * restrict rhsq){
  
  // for all elements
  for(iint eo=0;eo<Nelements;eo+=p_NblockS;outer0){

    // shared storage for flux terms
    shared dfloat s_fluxq[p_NblockS][10][p_Nfp*p_Nfaces];
    exclusive iint element;

    // for all face nodes of all elements
    for(iint es=0;es<p_NblockS;++es;inner1){
      for(iint n=0;n<p_maxNodes;++n;inner0){ // maxNodes = max(Nfp*Nfaces,Np)
	iint e = eo + es;
	if(e<Nelements){

	  element = elementIds[e];

	  if(n<p_Nfp*p_Nfaces){
	    // find face that owns this node
	    iint face = n/p_Nfp;  
	   // load surface geofactors for this face
	    iint sid = p_Nsgeo*(element*p_Nfaces+face);
			dfloat nx   = sgeo[sid+NXID];
			dfloat ny   = sgeo[sid+NYID];
			dfloat nz   = sgeo[sid+NZID];
			dfloat sJ   = sgeo[sid+SJID];
			dfloat invJ = sgeo[sid+IJID];

	    // indices of negative and positive traces of face node
	    iint id  = element*p_Nfp*p_Nfaces + n;
	    iint idM = vmapM[id];
	    iint idP = vmapP[id];

	    if(idP<0) idP = idM;
	  
	    // load negative and positive trace node values of q
	    dfloat4 qMa = q[3*idM], qMb = q[3*idM+1], qMc = q[3*idM+2];
	    dfloat q1M = qMa.x, q2M  = qMa.y, q3M = qMa.z, q4M = qMa.w;
	    dfloat q5M = qMb.x, q6M  = qMb.y, q7M = qMb.z, q8M = qMb.w;
	    dfloat q9M = qMc.x, q10M = qMc.y;

      dfloat4 qPa = q[3*idP], qPb = q[3*idP+1], qPc = q[3*idP+2];
      dfloat q1P  = qPa.x, q2P  = qPa.y, q3P = qPa.z, q4P = qPa.w;
	    dfloat q5P  = qPb.x, q6P  = qPb.y, q7P = qPb.z, q8P = qPb.w;
	    dfloat q9P  = qPc.x, q10P = qPc.y;
	    	    
	    // apply boundary condition
	    iint bc = EToB[face+p_Nfaces*element];
	    if(bc>0){
	      boundaryConditions3D(bc, time, x[idM], y[idM], z[idM], nx, ny, nz,ramp,
				               q1M, q2M, q3M, q4M, q5M, q6M, q7M, q8M, q9M, q10M,
				               &q1P, &q2P, &q3P, &q4P, &q5P, &q6P, &q7P, &q8P, &q9P, &q10P);
	      
	    }
	    // compute (q^*)
	    dfloat q1U, q2U, q3U, q4U, q5U, q6U, q7U, q8U, q9U, q10U;		    
	    
	    upwind3D(nx, ny, nz, 
	    	     q1M, q2M, q3M, q4M, q5M, q6M, q7M, q8M, q9M, q10M, 
	    	     q1P, q2P, q3P, q4P, q5P, q6P, q7P, q8P, q9P, q10P, 
	    	     &q1U, &q2U, &q3U, &q4U, &q5U, &q6U, &q7U, &q8U, &q9U, &q10U);

	      // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
	    const dfloat sc = invJ*sJ;
	    dfloat dq1, dq2, dq3, dq4, dq5, dq6, dq7, dq8, dq9, dq10;
	    //		    
	    dq1  = q1U - q1M;
	    dq2  = q2U - q2M;
	    dq3  = q3U - q3M;
	    dq4  = q4U - q4M;
	    dq5  = q5U - q5M;
	    dq6  = q6U - q6M;
	    dq7  = q7U - q7M;
	    dq8  = q8U - q8M;
	    dq9  = q9U - q9M;
	    dq10 = q10U- q10M;

	    // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny+C*nz)*(q^* - q^-)
	    s_fluxq[es][0][n] = sc*p_sqrtRT*(-nx*dq2-ny*dq3-nz*dq4);
	    s_fluxq[es][1][n] = sc*p_sqrtRT*(-nx*(dq1+p_sqrt2*dq8)-ny*dq5-nz*dq6);
	    s_fluxq[es][2][n] = sc*p_sqrtRT*(-nx*dq5-ny*(dq1+p_sqrt2*dq9)-nz*dq7);
	    s_fluxq[es][3][n] = sc*p_sqrtRT*(-nx*dq6-ny*dq7-nz*(dq1+p_sqrt2*dq10));
	    s_fluxq[es][4][n] = sc*p_sqrtRT*(-nx*dq3-ny*dq2);
	    s_fluxq[es][5][n] = sc*p_sqrtRT*(-nx*dq4-nz*dq2);
	    s_fluxq[es][6][n] = sc*p_sqrtRT*(-ny*dq4-nz*dq3);
	    s_fluxq[es][7][n] = sc*p_sqrtRT*p_sqrt2*(-nx*dq2);
	    s_fluxq[es][8][n] = sc*p_sqrtRT*p_sqrt2*(-ny*dq3);
	    s_fluxq[es][9][n] = sc*p_sqrtRT*p_sqrt2*(-nz*dq4);
	    
	  }
	}
      }
    }
    
    // wait for all shared memory writes of the previous inner loop to complete
    barrier(localMemFence);

    // for each node in the element
    for(iint es=0;es<p_NblockS;++es;inner1){
      for(iint n=0;n<p_maxNodes;++n;inner0){
	iint e = eo + es;
	if(e<Nelements){
	  if(n<p_Np){
	    iint id = 3*(p_Np*element + n);
	    
	    // load RHS
	    dfloat4 rhsqna = rhsq[id+0], rhsqnb = rhsq[id+1], rhsqnc = rhsq[id+2];

	    // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
	    occaUnroll(p_NfacesNfp)
	      for(int m=0;m<p_NfacesNfp;++m){
		dfloat L = LIFTT[n+m*p_Np];
		rhsqna.x += L*s_fluxq[es][0][m];
		rhsqna.y += L*s_fluxq[es][1][m];
		rhsqna.z += L*s_fluxq[es][2][m];
		rhsqna.w += L*s_fluxq[es][3][m];
        //
		rhsqnb.x += L*s_fluxq[es][4][m];
		rhsqnb.y += L*s_fluxq[es][5][m];
		rhsqnb.z += L*s_fluxq[es][6][m];
		rhsqnb.w += L*s_fluxq[es][7][m];
		//
		rhsqnc.x += L*s_fluxq[es][8][m];
		rhsqnc.y += L*s_fluxq[es][9][m];
	      }
	    // store incremented rhs
	    rhsq[id+0] = rhsqna;
	    rhsq[id+1] = rhsqnb;
	    rhsq[id+2] = rhsqnc;
	  }
	}
      }
    }
  }
}





// batch process elements
kernel void boltzmannPmlSurface3D(const iint Nelements,
				       const iint * restrict elementIds,
				       const dfloat * restrict sgeo,
				       const dfloat * restrict LIFTT,
				       const iint   * restrict vmapM,
				       const iint   * restrict vmapP,
				       const iint   * restrict EToB,
				       const dfloat time,
				       const dfloat * restrict x,
				       const dfloat * restrict y,
				       const dfloat * restrict z, 
				       const dfloat ramp,
				       const dfloat4 * restrict q,
				             dfloat4 * restrict rhsq,
				             dfloat * restrict rhspmlq){
  
  // for all elements
  for(iint eo=0;eo<Nelements;eo+=p_NblockS;outer0){
    // shared storage for q*
    shared dfloat s_dq1[p_NblockS][p_maxNodes];
    shared dfloat s_dq2[p_NblockS][p_maxNodes];
    shared dfloat s_dq3[p_NblockS][p_maxNodes];
    shared dfloat s_dq4[p_NblockS][p_maxNodes];
    shared dfloat s_dq5[p_NblockS][p_maxNodes];
    shared dfloat s_dq6[p_NblockS][p_maxNodes];   
    shared dfloat s_dq8[p_NblockS][p_maxNodes];
    shared dfloat s_dq9[p_NblockS][p_maxNodes];   
    shared dfloat s_dq10[p_NblockS][p_maxNodes];
    exclusive iint element, nx, ny, nz;

    // for all face nodes of all elements
    for(iint es=0;es<p_NblockS;++es;inner1){
      for(iint n=0;n<p_maxNodes;++n;inner0){ // maxNodes = max(Nfp*Nfaces,Np)
	iint e = eo + es;
	if(e<Nelements){
	  
	  element = elementIds[e];

	  if(n<p_NfacesNfp){
	    // find face that owns this node
	    const iint face = n/p_Nfp;
	   // load surface geofactors for this face
	    iint sid = p_Nsgeo*(element*p_Nfaces+face);
			dfloat nx   = sgeo[sid+NXID];
			dfloat ny   = sgeo[sid+NYID];
			dfloat nz   = sgeo[sid+NZID];
			dfloat sJ   = sgeo[sid+SJID];
			dfloat invJ = sgeo[sid+IJID];

	    // indices of negative and positive traces of face node
	    const iint id  = element*p_Nfp*p_Nfaces + n;
	    iint idM = vmapM[id];
	    iint idP = vmapP[id];

	    if(idP<0) idP = idM;
    
	    // load negative and positive trace node values of q
	    dfloat4 qMa = q[3*idM], qMb = q[3*idM+1], qMc = q[3*idM+2];
	    dfloat q1M = qMa.x, q2M  = qMa.y, q3M = qMa.z, q4M = qMa.w;
	    dfloat q5M = qMb.x, q6M  = qMb.y, q7M = qMb.z, q8M = qMb.w;
	    dfloat q9M = qMc.x, q10M = qMc.y;

      dfloat4 qPa = q[3*idP], qPb = q[3*idP+1], qPc = q[3*idP+2];
      dfloat q1P = qPa.x, q2P  = qPa.y, q3P = qPa.z, q4P = qPa.w;
	    dfloat q5P = qPb.x, q6P  = qPb.y, q7P = qPb.z, q8P = qPb.w;
	    dfloat q9P = qPc.x, q10P = qPc.y;

	    // apply boundary condition
	    iint bc = EToB[face+p_Nfaces*element];
	    if(bc>0)
	     boundaryConditions3D(bc, time, x[idM], y[idM], z[idM], nx, ny, nz,ramp,
				               q1M, q2M, q3M, q4M, q5M, q6M, q7M, q8M, q9M, q10M,
				               &q1P, &q2P, &q3P, &q4P, &q5P, &q6P, &q7P, &q8P, &q9P, &q10P);

	    // compute (q^*)
	    dfloat q1U, q2U, q3U, q4U, q5U, q6U, q7U, q8U, q9U, q10U;		    
	    
	    upwind3D(nx, ny, nz, q1M, q2M, q3M, q4M, q5M, q6M, q7M, q8M, q9M, q10M, 
	    	                 q1P, q2P, q3P, q4P, q5P, q6P, q7P, q8P, q9P, q10P, 
	    	       &q1U, &q2U, &q3U, &q4U, &q5U, &q6U, &q7U, &q8U, &q9U, &q10U);

	      // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
	    const dfloat sc = invJ*sJ;

	    s_dq1[es][n]   = sc*(q1U -q1M);
	    s_dq2[es][n]   = sc*(q2U -q2M);
	    s_dq3[es][n]   = sc*(q3U -q3M);
	    s_dq4[es][n]   = sc*(q4U -q4M);
	    s_dq5[es][n]   = sc*(q5U -q5M);
	    s_dq6[es][n]   = sc*(q6U -q6M);
	    s_dq8[es][n]   = sc*(q8U -q8M);
	    s_dq9[es][n]   = sc*(q9U -q9M);
	    s_dq10[es][n]  = sc*(q10U -q10M);
	    
	  }
	}
      }
    }
    
    // wait for all shared memory writes of the previous inner loop to complete
    barrier(localMemFence);
    // for each node in the element
    for(iint es=0;es<p_NblockS;++es;inner1){
      for(iint n=0;n<p_maxNodes;++n;inner0){
	      const iint e = eo + es;
	        if(e<Nelements){
	           if(n<p_Np){
	        
	    // load rhs data from volume fluxes
	    dfloat ndq1 = 0.f, ndq2 = 0.f, ndq3 = 0.f, ndq4 = 0.f, ndq5 = 0.f;
	    dfloat ndq6 = 0.f, ndq7 = 0.f, ndq8 = 0.f, ndq9 = 0.f, ndq10 = 0.f; 
	    	    
	    // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
	    occaUnroll(p_Nfaces)
	    for(int m=0;m<p_NfacesNfp;++m){
	      const dfloat L = LIFTT[n+m*p_Np];
	      ndq1   += L*s_dq1[es][m];
	      ndq2   += L*s_dq2[es][m];
	      ndq3   += L*s_dq3[es][m];
	      ndq4   += L*s_dq4[es][m];
	      ndq5   += L*s_dq5[es][m];
	      ndq6   += L*s_dq6[es][m];
	      ndq8   += L*s_dq8[es][m]; 
	      ndq9   += L*s_dq9[es][m];
	      ndq10  += L*s_dq10[es][m];
	    }

	  const iint base = element*p_Np*p_pmlNfields+n;

		dfloat Aqx1  = -p_sqrtRT*nx*(ndq2);
		dfloat Aqx2  = -p_sqrtRT*nx*(ndq1+p_sqrt2*ndq8);
		dfloat Aqx3  = -p_sqrtRT*nx*(ndq5);
		dfloat Aqx4  = -p_sqrtRT*nx*(ndq6);
		dfloat Aqx5  = -p_sqrtRT*nx*(ndq3);
		dfloat Aqx6  = -p_sqrtRT*nx*(ndq4);
		dfloat Aqx8  = -p_sqrtRT*p_sqrt2*nx*(ndq2);

		// B*dq/dy
		dfloat Bqy1 = -p_sqrtRT*ny*(ndq3);
		dfloat Bqy2 = -p_sqrtRT*ny*(ndq5);	
		dfloat Bqy3 = -p_sqrtRT*ny*(ndq1 + p_sqrt2*ndq9);	
		dfloat Bqy4 = -p_sqrtRT*ny*(ndq7);
		dfloat Bqy5 = -p_sqrtRT*ny*(ndq2);	
		dfloat Bqy7 = -p_sqrtRT*ny*(ndq4);	
		dfloat Bqy9 = -p_sqrtRT*ny*(p_sqrt2*ndq3);

		// C*dq/dz
		dfloat Cqz1  = -p_sqrtRT*nz*(ndq4);
		dfloat Cqz2  = -p_sqrtRT*nz*(ndq6);	
		dfloat Cqz3  = -p_sqrtRT*nz*(ndq7);	
		dfloat Cqz4  = -p_sqrtRT*nz*(ndq1 + p_sqrt2*ndq10);
		dfloat Cqz6  = -p_sqrtRT*nz*(ndq2);
		dfloat Cqz7  = -p_sqrtRT*nz*(ndq3);
		dfloat Cqz10 = -p_sqrtRT*nz*(p_sqrt2*ndq4);

		// Rhs for qx    	  
		rhspmlq[base+QXID1*p_Np]+= Aqx1;
		rhspmlq[base+QXID2*p_Np]+= Aqx2;
		rhspmlq[base+QXID3*p_Np]+= Aqx3;
		rhspmlq[base+QXID4*p_Np]+= Aqx4;
		rhspmlq[base+QXID5*p_Np]+= Aqx5;
		rhspmlq[base+QXID6*p_Np]+= Aqx6;
		rhspmlq[base+QXID8*p_Np]+= Aqx8;
		//
		// Rhs for qx    	  
		rhspmlq[base+QYID1*p_Np]+= Bqy1;
		rhspmlq[base+QYID2*p_Np]+= Bqy2;
		rhspmlq[base+QYID3*p_Np]+= Bqy3;
		rhspmlq[base+QYID4*p_Np]+= Bqy4;
		rhspmlq[base+QYID5*p_Np]+= Bqy5;
		rhspmlq[base+QYID7*p_Np]+= Bqy7;
		rhspmlq[base+QYID9*p_Np]+= Bqy9;
		//
		// Rhs for qx    	  
		rhspmlq[base+QZID1 *p_Np]+= Cqz1 ;
		rhspmlq[base+QZID2 *p_Np]+= Cqz2 ;
		rhspmlq[base+QZID3 *p_Np]+= Cqz3 ;
		rhspmlq[base+QZID4 *p_Np]+= Cqz4 ;
		rhspmlq[base+QZID6 *p_Np]+= Cqz6 ;
		rhspmlq[base+QZID7 *p_Np]+= Cqz7 ;
		rhspmlq[base+QZID10*p_Np]+= Cqz10;
		  //
	  const int id = 3*(element*p_Np+n);	  
	  dfloat4 tmp;
	  tmp.x = Aqx1 + Bqy1 +Cqz1;
	  tmp.y = Aqx2 + Bqy2 +Cqz2;
	  tmp.z = Aqx3 + Bqy3 +Cqz3;
	  tmp.w = Aqx4 + Bqy4 +Cqz4;

	  rhsq[id+0] += tmp;

	  tmp.x = Aqx5 + Bqy5 + 0.f  ;
	  tmp.y = Aqx6 + 0.f  + Cqz6 ;
	  tmp.z = 0.f  + Bqy7 + Cqz7 ; 
	  tmp.w = Aqx8 + 0.f  + 0.f  ;

	  rhsq[id+1] += tmp;

    tmp.x = 0.f + Bqy9 + 0.f;
	  tmp.y = 0.f + 0.f  + Cqz10;
	  tmp.z = 0.f;
	  tmp.w = 0.f;

	  rhsq[id+2] += tmp;


	    //
	  }
	}
      }
    }
  }
}




// For variable geometric properties hold flux unction seperately
kernel void boltzmannPmlSurface3D_c0(const iint Nelements,
				       const iint * restrict elementIds,
				       const dfloat * restrict sgeo,
				       const dfloat * restrict LIFTT,
				       const iint   * restrict vmapM,
				       const iint   * restrict vmapP,
				       const iint   * restrict EToB,
				       const dfloat time,
				       const dfloat * restrict x,
				       const dfloat * restrict y,
				       const dfloat * restrict z, 
				       const dfloat ramp,
				       const dfloat4 * restrict q,
				             dfloat4 * restrict rhsq,
				             dfloat * restrict rhspmlq){
  
  // for all elements
  for(iint eo=0;eo<Nelements;eo+=p_NblockS;outer0){
    // shared storage for flux terms
    shared dfloat s_nxdq1[p_NblockS][p_maxNodes];
    shared dfloat s_nxdq2[p_NblockS][p_maxNodes];
    shared dfloat s_nxdq3[p_NblockS][p_maxNodes];
    shared dfloat s_nxdq4[p_NblockS][p_maxNodes];
    shared dfloat s_nxdq5[p_NblockS][p_maxNodes];
    shared dfloat s_nxdq6[p_NblockS][p_maxNodes];   
    shared dfloat s_nxdq8[p_NblockS][p_maxNodes];
   
    // shared storage for flux terms
    shared dfloat s_nydq1[p_NblockS][p_maxNodes];
    shared dfloat s_nydq2[p_NblockS][p_maxNodes];
    shared dfloat s_nydq3[p_NblockS][p_maxNodes];
    shared dfloat s_nydq4[p_NblockS][p_maxNodes];
    shared dfloat s_nydq5[p_NblockS][p_maxNodes];
    shared dfloat s_nydq7[p_NblockS][p_maxNodes];
    shared dfloat s_nydq9[p_NblockS][p_maxNodes];
    
    // shared storage for flux terms
    shared dfloat s_nzdq1[p_NblockS][p_maxNodes];
    shared dfloat s_nzdq2[p_NblockS][p_maxNodes];
    shared dfloat s_nzdq3[p_NblockS][p_maxNodes];
    shared dfloat s_nzdq4[p_NblockS][p_maxNodes];
    shared dfloat s_nzdq6[p_NblockS][p_maxNodes];
    shared dfloat s_nzdq7[p_NblockS][p_maxNodes];
    shared dfloat s_nzdq10[p_NblockS][p_maxNodes];

    exclusive iint element;

    // for all face nodes of all elements
    for(iint es=0;es<p_NblockS;++es;inner1){
      for(iint n=0;n<p_maxNodes;++n;inner0){ // maxNodes = max(Nfp*Nfaces,Np)
	iint e = eo + es;
	if(e<Nelements){
	  
	  element = elementIds[e];

	  if(n<p_NfacesNfp){
	    // find face that owns this node
	    const iint face = n/p_Nfp;
	   // load surface geofactors for this face
	    iint sid = p_Nsgeo*(element*p_Nfaces+face);
			dfloat nx   = sgeo[sid+NXID];
			dfloat ny   = sgeo[sid+NYID];
			dfloat nz   = sgeo[sid+NZID];
			dfloat sJ   = sgeo[sid+SJID];
			dfloat invJ = sgeo[sid+IJID];

	    // indices of negative and positive traces of face node
	    const iint id  = element*p_Nfp*p_Nfaces + n;
	    iint idM = vmapM[id];
	    iint idP = vmapP[id];

	    if(idP<0) idP = idM;
    
	    // load negative and positive trace node values of q
	    dfloat4 qMa = q[3*idM], qMb = q[3*idM+1], qMc = q[3*idM+2];
	    dfloat q1M = qMa.x, q2M  = qMa.y, q3M = qMa.z, q4M = qMa.w;
	    dfloat q5M = qMb.x, q6M  = qMb.y, q7M = qMb.z, q8M = qMb.w;
	    dfloat q9M = qMc.x, q10M = qMc.y;

      dfloat4 qPa = q[3*idP], qPb = q[3*idP+1], qPc = q[3*idP+2];
      dfloat q1P = qPa.x, q2P  = qPa.y, q3P = qPa.z, q4P = qPa.w;
	    dfloat q5P = qPb.x, q6P  = qPb.y, q7P = qPb.z, q8P = qPb.w;
	    dfloat q9P = qPc.x, q10P = qPc.y;

	    // apply boundary condition
	    iint bc = EToB[face+p_Nfaces*element];
	    if(bc>0)
	     boundaryConditions3D(bc, time, x[idM], y[idM], z[idM], nx, ny, nz,ramp,
				               q1M, q2M, q3M, q4M, q5M, q6M, q7M, q8M, q9M, q10M,
				               &q1P, &q2P, &q3P, &q4P, &q5P, &q6P, &q7P, &q8P, &q9P, &q10P);

	    // compute (q^*)
	    dfloat q1U, q2U, q3U, q4U, q5U, q6U, q7U, q8U, q9U, q10U;		    
	    
	    upwind3D(nx, ny, nz, q1M, q2M, q3M, q4M, q5M, q6M, q7M, q8M, q9M, q10M, 
	    	                 q1P, q2P, q3P, q4P, q5P, q6P, q7P, q8P, q9P, q10P, 
	    	       &q1U, &q2U, &q3U, &q4U, &q5U, &q6U, &q7U, &q8U, &q9U, &q10U);

	      // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
	    const dfloat sc = invJ*sJ;

	    s_nxdq1[es][n]  = sc*(nx*(q1U -q1M));
	    s_nxdq2[es][n]  = sc*(nx*(q2U -q2M));
	    s_nxdq3[es][n]  = sc*(nx*(q3U -q3M));
	    s_nxdq4[es][n]  = sc*(nx*(q4U -q4M));
	    s_nxdq5[es][n]  = sc*(nx*(q5U -q5M));
	    s_nxdq6[es][n]  = sc*(nx*(q6U -q6M));
	    s_nxdq8[es][n]  = sc*(nx*(q8U -q8M));
	    

	    s_nydq1[es][n]  = sc*(ny*(q1U -q1M));
	    s_nydq2[es][n]  = sc*(ny*(q2U -q2M));
	    s_nydq3[es][n]  = sc*(ny*(q3U -q3M));
	    s_nydq4[es][n]  = sc*(ny*(q4U -q4M));
	    s_nydq5[es][n]  = sc*(ny*(q5U -q5M));
	    s_nydq7[es][n]  = sc*(ny*(q7U -q7M));
	    s_nydq9[es][n]  = sc*(ny*(q9U -q9M));
	   

	    s_nzdq1[es][n]  = sc*(nz*(q1U -q1M));
	    s_nzdq2[es][n]  = sc*(nz*(q2U -q2M));
	    s_nzdq3[es][n]  = sc*(nz*(q3U -q3M));
	    s_nzdq4[es][n]  = sc*(nz*(q4U -q4M));
	    s_nzdq6[es][n]  = sc*(nz*(q6U -q6M));
	    s_nzdq7[es][n]  = sc*(nz*(q7U -q7M));
	    s_nzdq10[es][n] = sc*(nz*(q10U-q10M));
	  }
	}
      }
    }
    
    // wait for all shared memory writes of the previous inner loop to complete
    barrier(localMemFence);
    // for each node in the element
    for(iint es=0;es<p_NblockS;++es;inner1){
      for(iint n=0;n<p_maxNodes;++n;inner0){
	const iint e = eo + es;
	if(e<Nelements){
	  if(n<p_Np){
	        
	    // load rhs data from volume fluxes
	    dfloat nxdq1 = 0.f, nxdq2 = 0.f, nxdq3 = 0.f, nxdq4 = 0.f, nxdq5 = 0.f,nxdq6 = 0.f,  nxdq8 = 0.f; 
	    dfloat nydq1 = 0.f, nydq2 = 0.f, nydq3 = 0.f, nydq4 = 0.f, nydq5 = 0.f, nydq7 = 0.f, nydq9 = 0.f;
	    dfloat nzdq1 = 0.f, nzdq2 = 0.f, nzdq3 = 0.f, nzdq4 = 0.f, nzdq6 = 0.f, nzdq7 = 0.f, nzdq10 = 0.f;
	    
	    // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
	    occaUnroll(p_Nfaces)
	    for(int m=0;m<p_NfacesNfp;++m){
	      const dfloat L = LIFTT[n+m*p_Np];
	      nxdq1  += L*s_nxdq1[es][m];
	      nxdq2  += L*s_nxdq2[es][m];
	      nxdq3  += L*s_nxdq3[es][m];
	      nxdq4  += L*s_nxdq4[es][m];
	      nxdq5  += L*s_nxdq5[es][m];
	      nxdq6  += L*s_nxdq6[es][m];
	      nxdq8  += L*s_nxdq8[es][m]; 
	      //
	      nydq1  += L*s_nydq1[es][m];
	      nydq2  += L*s_nydq2[es][m];
	      nydq3  += L*s_nydq3[es][m];
	      nydq4  += L*s_nydq4[es][m];
	      nydq5  += L*s_nydq5[es][m];
	      nydq7  += L*s_nydq7[es][m];
	      nydq9  += L*s_nydq9[es][m];    
	      //
	      nzdq1  += L*s_nzdq1[es][m];
	      nzdq2  += L*s_nzdq2[es][m];
	      nzdq3  += L*s_nzdq3[es][m];
	      nzdq4  += L*s_nzdq4[es][m];
	      nzdq6  += L*s_nzdq6[es][m];
	      nzdq7  += L*s_nzdq7[es][m];
	      nzdq10 += L*s_nzdq10[es][m];
	    }

	  const iint base = element*p_Np*p_pmlNfields+n;

		dfloat Aqx1  = -p_sqrtRT*(nxdq2);
		dfloat Aqx2  = -p_sqrtRT*(nxdq1+p_sqrt2*nxdq8);
		dfloat Aqx3  = -p_sqrtRT*(nxdq5);
		dfloat Aqx4  = -p_sqrtRT*(nxdq6);
		dfloat Aqx5  = -p_sqrtRT*(nxdq3);
		dfloat Aqx6  = -p_sqrtRT*(nxdq4);
		dfloat Aqx8  = -p_sqrtRT*p_sqrt2*(nxdq2);

		// B*dq/dy
		dfloat Bqy1 = -p_sqrtRT*(nydq3);
		dfloat Bqy2 = -p_sqrtRT*(nydq5);	
		dfloat Bqy3 = -p_sqrtRT*(nydq1 + p_sqrt2*nydq9);	
		dfloat Bqy4 = -p_sqrtRT*(nydq7);
		dfloat Bqy5 = -p_sqrtRT*(nydq2);	
		dfloat Bqy7 = -p_sqrtRT*(nydq4);	
		dfloat Bqy9 = -p_sqrtRT*(p_sqrt2*nydq3);

		// C*dq/dz
		dfloat Cqz1  = -p_sqrtRT*(nzdq4);
		dfloat Cqz2  = -p_sqrtRT*(nzdq6);	
		dfloat Cqz3  = -p_sqrtRT*(nzdq7);	
		dfloat Cqz4  = -p_sqrtRT*(nzdq1 + p_sqrt2*nzdq10);
		dfloat Cqz6  = -p_sqrtRT*(nzdq2);
		dfloat Cqz7  = -p_sqrtRT*(nzdq3);
		dfloat Cqz10 = -p_sqrtRT*(p_sqrt2*nzdq4);

		// Rhs for qx    	  
		rhspmlq[base+QXID1*p_Np]+= Aqx1;
		rhspmlq[base+QXID2*p_Np]+= Aqx2;
		rhspmlq[base+QXID3*p_Np]+= Aqx3;
		rhspmlq[base+QXID4*p_Np]+= Aqx4;
		rhspmlq[base+QXID5*p_Np]+= Aqx5;
		rhspmlq[base+QXID6*p_Np]+= Aqx6;
		rhspmlq[base+QXID8*p_Np]+= Aqx8;
		//
		// Rhs for qx    	  
		rhspmlq[base+QYID1*p_Np]+= Bqy1;
		rhspmlq[base+QYID2*p_Np]+= Bqy2;
		rhspmlq[base+QYID3*p_Np]+= Bqy3;
		rhspmlq[base+QYID4*p_Np]+= Bqy4;
		rhspmlq[base+QYID5*p_Np]+= Bqy5;
		rhspmlq[base+QYID7*p_Np]+= Bqy7;
		rhspmlq[base+QYID9*p_Np]+= Bqy9;
		//
		// Rhs for qx    	  
		rhspmlq[base+QZID1 *p_Np]+= Cqz1 ;
		rhspmlq[base+QZID2 *p_Np]+= Cqz2 ;
		rhspmlq[base+QZID3 *p_Np]+= Cqz3 ;
		rhspmlq[base+QZID4 *p_Np]+= Cqz4 ;
		rhspmlq[base+QZID6 *p_Np]+= Cqz6 ;
		rhspmlq[base+QZID7 *p_Np]+= Cqz7 ;
		rhspmlq[base+QZID10*p_Np]+= Cqz10;
		  //
	  const int id = 3*(element*p_Np+n);	  
	  dfloat4 tmp;
	  tmp.x = Aqx1 + Bqy1 +Cqz1;
	  tmp.y = Aqx2 + Bqy2 +Cqz2;
	  tmp.z = Aqx3 + Bqy3 +Cqz3;
	  tmp.w = Aqx4 + Bqy4 +Cqz4;

	  rhsq[id+0] += tmp;

	  tmp.x = Aqx5 + Bqy5 + 0.f  ;
	  tmp.y = Aqx6 + 0.f  + Cqz6 ;
	  tmp.z = 0.f  + Bqy7 + Cqz7 ; 
	  tmp.w = Aqx8 + 0.f  + 0.f  ;

	  rhsq[id+1] += tmp;

    tmp.x = 0.f + Bqy9 + 0.f;
	  tmp.y = 0.f + 0.f  + Cqz10;
	  tmp.z = 0.f;
	  tmp.w = 0.f;

	  rhsq[id+2] += tmp;


	    //
	  }
	}
      }
    }
  }
}