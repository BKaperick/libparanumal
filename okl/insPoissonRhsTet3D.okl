// Computes volume contribution of div(UI)
@kernel void insPoissonRhsForcingTet3D(const dlong Nelements,
                                      @restrict const  dfloat *  vgeo,
                                      @restrict const  dfloat *  MM,
                                      const dfloat dt,
                                      const dfloat g0,
                                            @restrict dfloat *  rhs){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){  // for all elements
    @shared dfloat s_rhs[p_NblockV][p_Np];

    for(int es=0;es<p_NblockV;++es;@inner(1)){// for all elements in block
      for(int n=0;n<p_Np;++n;@inner(0)){     // for all nodes in this element
        const dlong e = eo+es; // element in block
        if(e<Nelements){
          const dlong id = e*p_Np+n;
          s_rhs[es][n] = rhs[id];
        }
      }
    }

    // Make sure all node data is loaded into @shared
    @barrier("local");
    // Multiply with Mass Matrix
    for(int es=0;es<p_NblockV;++es;@inner(1)){// for all elements in block
      for(int n=0;n<p_Np;++n;@inner(0)){     // for all nodes in this element
        const dlong e = eo+es; // element in block
        if(e<Nelements){
          const dfloat J = vgeo[e*p_Nvgeo + p_JID];
          dfloat rhsn = 0.f;

          #pragma unroll p_Np
            for(int i=0;i<p_Np;++i){
              const dfloat M = MM[n+i*p_Np];
              rhsn += M*s_rhs[es][i];
            }

          const dlong id = e*p_Np+n;
          rhs[id] = -J*g0*rhsn/dt;
        }
      }
    }
  }
}

// Actually solves for Pr increamnet not presssure
@kernel void insPoissonRhsIpdgBCTet3D(const dlong Nelements,
                                     const int pressure_solve,
                                     @restrict const  dlong  *  vmapM,
                                     const dfloat tau,
                                     const dfloat time,
                                     const dfloat dt,
                                     @restrict const  dfloat *  x,
                                     @restrict const  dfloat *  y,
                                     @restrict const  dfloat *  z,
                                     @restrict const  dfloat *  vgeo,
                                     @restrict const  dfloat *  sgeo,
                                     @restrict const  int    *  EToB,
                                     @restrict const  dfloat *  DrT,
                                     @restrict const  dfloat *  DsT,
                                     @restrict const  dfloat *  DtT,
                                     @restrict const  dfloat *  LIFTT,
                                     @restrict const  dfloat *  MM,
                                           @restrict dfloat *  rhsP){
  for(dlong e=0;e<Nelements;++e;@outer(0)){
    @shared  dfloat s_dpdx[p_Np];
    @shared  dfloat s_dpdy[p_Np];
    @shared  dfloat s_dpdz[p_Np];
    @shared  dfloat s_lapp[p_Np];

    @shared  dfloat s_nxdp[p_NfacesNfp];
    @shared  dfloat s_nydp[p_NfacesNfp];
    @shared  dfloat s_nzdp[p_NfacesNfp];

    @shared  dfloat s_lappflux[p_NfacesNfp];
    @shared  dfloat s_Lnxdp[p_Np];
    @shared  dfloat s_Lnydp[p_Np];
    @shared  dfloat s_Lnzdp[p_Np];

    @exclusive dlong idM;
    @exclusive dfloat nx, ny,nz, sJ, invJ, hinv;
    
    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_NfacesNfp){
        const dlong id  = n + e*p_Nfaces*p_Nfp;
        idM = vmapM[id];          
     
        const int face = n/p_Nfp;
        // load surface geofactors for this face
        const dlong sid = p_Nsgeo*(e*p_Nfaces+face);
        nx = sgeo[sid+p_NXID];
        ny = sgeo[sid+p_NYID];
        nz = sgeo[sid+p_NZID];
        sJ = sgeo[sid+p_SJID];
        invJ = sgeo[sid+p_IJID];
        hinv = sgeo[sid+p_IHID];
        
        dfloat dpdxP=0.f, dpdyP=0.f, dpdzP=0.f, pP=0;        

        const int bc = EToB[face+p_Nfaces*e];
        if(bc>0) {
          insPressureDirichletConditions3D(bc,time, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, &pP);
          insPressureNeumannConditions3D(bc,time, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f,0.f, &dpdxP, &dpdyP, &dpdzP);
          if(pressure_solve==0){
            dfloat pPm1=0.f, dpdxPm1=0.f, dpdyPm1=0.f, dpdzPm1=0.f;
            insPressureDirichletConditions3D(bc,time-dt, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, &pPm1);
            insPressureNeumannConditions3D(bc,time-dt, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f,0.f, &dpdxPm1, &dpdyPm1, &dpdzPm1);          
            pP = pP - pPm1;
            dpdxP = dpdxP - dpdxPm1;
            dpdyP = dpdyP - dpdyPm1;
            dpdzP = dpdzP - dpdzPm1;
          }
        }
        const dfloat dp = pP;

        s_nxdp[n] = sJ*invJ*nx*dp;
        s_nydp[n] = sJ*invJ*ny*dp;
        s_nzdp[n] = sJ*invJ*nz*dp;

        s_lappflux[n] = sJ*invJ*(-nx*(dpdxP)-ny*(dpdyP)-nz*(dpdzP)-tau*hinv*dp);
      }
    }

    @barrier("local");

    // dqdx += LIFT*(sJ/J)*nx*dq
    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np){
        const dlong gid = e*p_Nvgeo;
        const dfloat drdx = vgeo[gid + p_RXID];
        const dfloat drdy = vgeo[gid + p_RYID];
        const dfloat drdz = vgeo[gid + p_RZID];

        const dfloat dsdx = vgeo[gid + p_SXID];
        const dfloat dsdy = vgeo[gid + p_SYID];
        const dfloat dsdz = vgeo[gid + p_SZID];

        const dfloat dtdx = vgeo[gid + p_TXID];
        const dfloat dtdy = vgeo[gid + p_TYID];
        const dfloat dtdz = vgeo[gid + p_TZID];

        dfloat Lnxdp = 0.f;
        dfloat Lnydp = 0.f;
        dfloat Lnzdp = 0.f;

        #pragma unroll p_NfacesNfp
          for(int i=0;i<p_NfacesNfp;++i){
            Lnxdp += LIFTT[n+i*p_Np]*s_nxdp[i];
            Lnydp += LIFTT[n+i*p_Np]*s_nydp[i];
            Lnzdp += LIFTT[n+i*p_Np]*s_nzdp[i];
          }

        const dfloat dpdx = Lnxdp;
        const dfloat dpdy = Lnydp;
        const dfloat dpdz = Lnzdp;

        s_dpdx[n] = drdx*dpdx + drdy*dpdy + drdz*dpdz; // abuse of notation
        s_dpdy[n] = dsdx*dpdx + dsdy*dpdy + dsdz*dpdz;
        s_dpdz[n] = dtdx*dpdx + dtdy*dpdy + dtdz*dpdz;

        s_Lnxdp[n] = Lnxdp;
        s_Lnydp[n] = Lnydp;
        s_Lnzdp[n] = Lnzdp;
      }
    }

    @barrier("local");

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_NfacesNfp){
        const int id = idM%p_Np;
        s_lappflux[n] += sJ*invJ*(nx*s_Lnxdp[id]+ny*s_Lnydp[id]+nz*s_Lnzdp[id]);
      }

      if(n<p_Np){
        dfloat lapr = 0.f, laps = 0.f, lapt = 0.f;
        #pragma unroll p_Np
        for(int i=0;i<p_Np;++i) {
          lapr += DrT[n+i*p_Np]*s_dpdx[i];
          laps += DsT[n+i*p_Np]*s_dpdy[i];
          lapt += DtT[n+i*p_Np]*s_dpdz[i];
        }

        s_lapp[n] = -(lapr+laps+lapt);
      }

    }

    @barrier("local");

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np){
        dfloat lap = 0.f;
        // lift remaining surface terms
        #pragma unroll p_NfacesNfp
        for(int i=0;i<p_NfacesNfp;++i){
          lap += LIFTT[n+i*p_Np]*s_lappflux[i];
        }
        s_lapp[n] += lap;
      }
    }

    @barrier("local");

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np){
        const dfloat J = vgeo[e*p_Nvgeo + p_JID];
        dfloat Mlapp = 0;
        // multiply by mass matrix
        #pragma unroll p_Np
        for(int i=0;i<p_Np;++i){
          Mlapp += MM[n+i*p_Np]*s_lapp[i];
        }

        const dlong id = e*p_Np+n;
        rhsP[id] -=  J*Mlapp;
      }
    }
  }
}

//RHS contributions for continuous solver
@kernel void insPoissonRhsBCTet3D(const dlong Nelements,
                                 const int pressure_solve,
                                 @restrict const  dfloat *  ggeo,
                                 @restrict const  dfloat *  sgeo,
                                 @restrict const  dfloat *  SrrT,
                                 @restrict const  dfloat *  SrsT,
                                 @restrict const  dfloat *  SrtT,
                                 @restrict const  dfloat *  SsrT,
                                 @restrict const  dfloat *  SssT,
                                 @restrict const  dfloat *  SstT,
                                 @restrict const  dfloat *  StrT,
                                 @restrict const  dfloat *  StsT,
                                 @restrict const  dfloat *  SttT,
                                 @restrict const  dfloat *  MM,
                                 @restrict const  dlong  *  vmapM,
                                 @restrict const  dfloat *  sMT,
                                 const dfloat time,
                                 const dfloat dt,
                                 @restrict const  dfloat *  x,
                                 @restrict const  dfloat *  y,
                                 @restrict const  dfloat *  z,
                                 @restrict const  int    *  mapB,
                                       @restrict dfloat *  rhsP){
  
  for(dlong e=0;e<Nelements;e++;@outer(0)){
    @shared dfloat s_q[p_Np];
    @shared dfloat s_ndq[p_Nfp*p_Nfaces];

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np){
        s_q[n] = 0.;
      }
      if(n<p_NfacesNfp){
        s_ndq[n] = 0.;
      }
    }

    @barrier("local");

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_NfacesNfp){
        const dlong id  = n + e*p_Nfaces*p_Nfp;
        const dlong idM = vmapM[id];          
        const int nid = idM%p_Np; 

        const int face = n/p_Nfp;

        dfloat dpdxP=0, dpdyP=0, dpdzP=0, pP=0;
        
        // load surface geofactors for this face
        const dlong sid = p_Nsgeo*(e*p_Nfaces+face);
        const dfloat nx = sgeo[sid+p_NXID];
        const dfloat ny = sgeo[sid+p_NYID];
        const dfloat nz = sgeo[sid+p_NZID];
        const dfloat sJ = sgeo[sid+p_SJID];

        const int bc = mapB[idM];
        if(bc>0) {
          insPressureDirichletConditions3D(bc,time, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, &pP);
          insPressureNeumannConditions3D(bc,time, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f, 0.f, &dpdxP, &dpdyP, &dpdzP);
          if(pressure_solve==0){
            dfloat pPm1=0.f, dpdxPm1=0.f, dpdyPm1=0.f, dpdzPm1=0.f;
            insPressureDirichletConditions3D(bc,time-dt, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, &pPm1);
            insPressureNeumannConditions3D(bc,time-dt, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f, 0.f, &dpdxPm1, &dpdyPm1, &dpdzPm1);          
            pP = pP - pPm1;
            dpdxP = dpdxP - dpdxPm1;
            dpdyP = dpdyP - dpdyPm1;
            dpdzP = dpdzP - dpdzPm1;
          }
        } 

        s_q[nid] = pP;
        s_ndq[n] = sJ*(nx*dpdxP + ny*dpdyP + nz*dpdzP);
      }
    }

    @barrier("local");
    
    for(int n=0;n<p_maxNodes;++n;@inner(0)){ 
      if(n<p_Np){
        //volume Dirichlet data
        const dlong id = n + e*p_Np;
        const dlong gid = e*p_Nggeo;
        const dfloat Grr = ggeo[gid + p_G00ID];
        const dfloat Grs = ggeo[gid + p_G01ID];
        const dfloat Grt = ggeo[gid + p_G02ID];
        const dfloat Gss = ggeo[gid + p_G11ID];
        const dfloat Gst = ggeo[gid + p_G12ID];
        const dfloat Gtt = ggeo[gid + p_G22ID];
        const dfloat J   = ggeo[gid + p_GWJID];

        dfloat qrr = 0.;
        dfloat qrs = 0.;
        dfloat qrt = 0.;
        dfloat qsr = 0.;
        dfloat qss = 0.;
        dfloat qst = 0.;
        dfloat qtr = 0.;
        dfloat qts = 0.;
        dfloat qtt = 0.;

        #pragma unroll p_Np
          for (int k=0;k<p_Np;k++) {
            qrr += SrrT[n+k*p_Np]*s_q[k];
            qrs += SrsT[n+k*p_Np]*s_q[k];
            qrt += SrtT[n+k*p_Np]*s_q[k];
            qsr += SsrT[n+k*p_Np]*s_q[k];
            qss += SssT[n+k*p_Np]*s_q[k];
            qst += SstT[n+k*p_Np]*s_q[k];
            qtr += StrT[n+k*p_Np]*s_q[k];
            qts += StsT[n+k*p_Np]*s_q[k];
            qtt += SttT[n+k*p_Np]*s_q[k];
          }

        dfloat Lndq = 0;            
        // surface mass * surface terms
        #pragma unroll p_NfacesNfp
          for(int i=0;i<p_NfacesNfp;++i){
            Lndq += sMT[n+i*p_Np]*s_ndq[i];
          }

        rhsP[id] -= Grr*qrr+Grs*qrs+Grt*qrt
                   +Grs*qsr+Gss*qss+Gst*qst 
                   +Grt*qtr+Gst*qts+Gtt*qtt  - Lndq;
      }
    }
  }
}

@kernel void insPoissonAddBCTet3D(const dlong Nelements,
                                 const int pressure_solve,
                                 const dfloat time,
                                 const dfloat dt,
                                 @restrict const  dfloat *  x,
                                 @restrict const  dfloat *  y,
                                 @restrict const  dfloat *  z,
                                 @restrict const  dlong  *  vmapM,
                                 @restrict const  int    *  mapB,
                                       @restrict dfloat *  P){
  
  for(dlong e=0;e<Nelements;e++;@outer(0)){
    for(int n=0;n<p_Nfp*p_Nfaces;++n;@inner(0)){
      const dlong idM = vmapM[e*p_Nfp*p_Nfaces + n];
      const int bc = mapB[idM];

      if(bc>0) {
        const dfloat pM = P[idM];
        dfloat pP = 0.f;
        insPressureDirichletConditions3D(bc,time, x[idM], y[idM], z[idM], nx, ny, nz, pM, &pP);
        if(pressure_solve==0 && bc==3){ // if on an outflow BC and the pressure increment is in use
          dfloat pPm1 = 0.f;
          insPressureDirichletConditions3D(bc,time-dt, x[idM], y[idM], z[idM], nx, ny, nz, pM, &pPm1);
          pP = pP - pPm1;
        }
        P[idM] = pP;
      }    
    }
  }
}