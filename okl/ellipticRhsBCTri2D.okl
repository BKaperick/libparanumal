kernel void ellipticRhsBCTri2D(const int Nelements,
                              const dfloat * restrict ggeo,
                              const dfloat * restrict sgeo,
                              const dfloat * restrict SrrT,
                              const dfloat * restrict SrsT,
                              const dfloat * restrict SsrT,
                              const dfloat * restrict SssT,
                              const dfloat * restrict MM,
                              const iint   * restrict vmapM,
                              const dfloat * restrict sMT,
                              const dfloat lambda,
                              const dfloat t,
                              const dfloat * restrict x,
                              const dfloat * restrict y,
                              const int    * restrict mapB,
                              dfloat  * restrict rhs){
  
  for(iint e=0;e<Nelements;e++;outer0){
    shared dfloat s_q[p_Np];
    shared dfloat s_ndq[p_Nfp*p_Nfaces];

    for(int n=0;n<p_Nmax;++n;inner0){
      if(n<p_Np){
        s_q[n] = 0.;
      }
      if(n<p_NfacesNfp){
        s_ndq[n] = 0.;
      }
    }

    barrier(localMemFence);

    for(int n=0;n<p_Nmax;++n;inner0){
      if(n<p_NfacesNfp){
        const iint id  = n + e*p_Nfaces*p_Nfp;
        const iint idM = vmapM[id];          
        const iint nid = idM%p_Np; 

        const iint face = n/p_Nfp;

        dfloat dudxP=0, dudyP=0, uP=0;
        
        // load surface geofactors for this face
        const iint sid = p_Nsgeo*(e*p_Nfaces+face);
        const dfloat nx = sgeo[sid+p_NXID];
        const dfloat ny = sgeo[sid+p_NYID];
        const dfloat sJ = sgeo[sid+p_SJID];

        const int bc = mapB[idM];
        if(bc>0) {
          ellipticBoundaryConditions2D(bc, t, x[idM], y[idM], nx, ny, \
                                        0.f, 0.f, 0.f,                \
                                        uP, dudxP, dudyP);
        }  

        s_q[nid] = uP;
        s_ndq[n] = sJ*(nx*dudxP + ny*dudyP);
      }
    }

    barrier(localMemFence);
    
    for(int n=0;n<p_Nmax;++n;inner0){ 
      if(n<p_Np){
        //volume Dirichlet data
        const iint id = n + e*p_Np;
        const iint gid = e*p_Nggeo;
        const dfloat Grr = ggeo[gid + p_G00ID];
        const dfloat Grs = ggeo[gid + p_G01ID];
        const dfloat Gss = ggeo[gid + p_G11ID];
        const dfloat J   = ggeo[gid + p_GWJID];

        dfloat qrr = 0.;
        dfloat qrs = 0.;
        dfloat qsr = 0.;
        dfloat qss = 0.;
        dfloat qM = 0.;

        occaUnroll(p_Np)
          for (int k=0;k<p_Np;k++) {
            qrr += SrrT[n+k*p_Np]*s_q[k];
            qrs += SrsT[n+k*p_Np]*s_q[k];
            qsr += SsrT[n+k*p_Np]*s_q[k];
            qss += SssT[n+k*p_Np]*s_q[k];
            qM  += MM[n+k*p_Np]*s_q[k];
          }

        dfloat Lndq = 0;            
        // surface mass * surface terms
        occaUnroll(p_NfacesNfp)
          for(int i=0;i<p_NfacesNfp;++i){
            Lndq += sMT[n+i*p_Np]*s_ndq[i];
          }

        rhs[id] -= Grr*qrr+Grs*qrs+Grs*qsr+Gss*qss + J*lambda*qM - Lndq;
      }
    }
  }
}
