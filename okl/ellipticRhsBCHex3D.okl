/* assumes zero Neumann - nasty hack for h */
#define surfaceTerms(sk, i, j, k)                                       \
  {                                                                     \
    const dlong  idM = vmapM[sk];                                       \
                                                                        \
    const dfloat nx  = sgeo[sk*p_Nsgeo+p_NXID];                         \
    const dfloat ny  = sgeo[sk*p_Nsgeo+p_NYID];                         \
    const dfloat nz  = sgeo[sk*p_Nsgeo+p_NZID];                         \
    const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];                        \
                                                                        \
    dfloat dudxP=0, dudyP=0, dudzP=0, uP=0;                             \
                                                                        \
    const int bc = mapB[idM];                                           \
    if(bc>0) {                                                          \
      ellipticBoundaryConditions3D(bc, t, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f, 0.f, 0.f, uP, dudxP, dudyP, dudzP);  \
    }                                                                   \
                                                                        \
    s_q  [k][j][i] = uP;                                                \
    s_ndq[k][j][i] -= WsJ*(nx*dudxP + ny*dudyP + nz*dudzP);             \
  }

kernel void ellipticRhsBCHex3D(const dlong Nelements,
                              const dfloat * restrict ggeo,
                              const dfloat * restrict sgeo,
                              const dfloat * restrict D,
                              const dlong   * restrict vmapM,
                              const dfloat lambda,
                              const dfloat t,
                              const dfloat * restrict x,
                              const dfloat * restrict y,
                              const dfloat * restrict z,
                              const int    * restrict mapB,
                              dfloat  * restrict rhs){
  
  for(dlong e=0;e<Nelements;e++;outer0){
    shared dfloat s_q[p_Nq][p_Nq][p_Nq];
    shared dfloat s_ndq[p_Nq][p_Nq][p_Nq];
    shared dfloat s_D[p_Nq][p_Nq];

    exclusive dfloat r_qr[p_Nq], r_qs[p_Nq], r_qt[p_Nq], r_Aq[p_Nq];
    exclusive dfloat r_G00[p_Nq], r_G01[p_Nq], r_G02[p_Nq], r_G11[p_Nq], r_G12[p_Nq], r_G22[p_Nq], r_GwJ[p_Nq];

    // loop over slabs
    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;inner1){
        for(int i=0;i<p_Nq;++i;inner0){
          s_q[k][j][i] = 0.;
          s_ndq[k][j][i] = 0.;

          if(k==0)
            s_D[j][i] = D[j*p_Nq+i];
        }
      }
    }

    barrier(localMemFence);

    // face 0 & 5
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + j*p_Nq + i;
        const dlong sk5 = e*p_Nfp*p_Nfaces + 5*p_Nfp + j*p_Nq + i;

        surfaceTerms(sk0,i,j,     0);
        surfaceTerms(sk5,i,j,p_Nq-1); 
      }
    }
  
    barrier(localMemFence);

    // face 1 & 3
    for(int k=0;k<p_Nq;++k;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + k*p_Nq + i;
        const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + k*p_Nq + i;

        surfaceTerms(sk1,i,     0,k);
        surfaceTerms(sk3,i,p_Nq-1,k); 
      }
    }

    barrier(localMemFence);

    // face 2 & 4
    for(int k=0;k<p_Nq;++k;inner1){
      for(int j=0;j<p_Nq;++j;inner0){
        const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + k*p_Nq + j;
        const dlong sk4 = e*p_Nfp*p_Nfaces + 4*p_Nfp + k*p_Nq + j;
        
        surfaceTerms(sk2,p_Nq-1,j,k);
        surfaceTerms(sk4,     0,j,k); 
      }
    }

    barrier(localMemFence);
    
    // loop over slabs
    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;inner1){
        for(int i=0;i<p_Nq;++i;inner0){
          const dlong base = e*p_Nggeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

          // assumes w*J built into G entries
          r_GwJ[k] = ggeo[base+p_GWJID*p_Np];

          r_G00[k] = ggeo[base+p_G00ID*p_Np];
          r_G01[k] = ggeo[base+p_G01ID*p_Np];
          r_G02[k] = ggeo[base+p_G02ID*p_Np];

          r_G11[k] = ggeo[base+p_G11ID*p_Np];
          r_G12[k] = ggeo[base+p_G12ID*p_Np];
          r_G22[k] = ggeo[base+p_G22ID*p_Np];

          dfloat qr = 0.f, qs = 0.f, qt = 0.f;

          for(int n=0; n<p_Nq; ++n) {
            qr += s_D[i][n]*s_q[k][j][n];
            qs += s_D[j][n]*s_q[k][n][i];
            qt += s_D[k][n]*s_q[n][j][i];
          }

          r_qr[k] = qr; r_qs[k] = qs; r_qt[k] = qt;

          r_Aq[k] = r_GwJ[k]*lambda*s_q[k][j][i];
        }
      }
    }

    // r term ----->
    barrier(localMemFence);

    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;inner1){
        for(int i=0;i<p_Nq;++i;inner0){
          s_q[k][j][i] = r_G00[k]*r_qr[k] + r_G01[k]*r_qs[k] + r_G02[k]*r_qt[k];
        }
      }
    }

    barrier(localMemFence);

    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;inner1){
        for(int i=0;i<p_Nq;++i;inner0){
          dfloat tmp = 0.f;
          for(int n=0; n<p_Nq; ++n)
            tmp += s_D[n][i]*s_q[k][j][n];

          r_Aq[k] += tmp;
        }
      }
    }

    // s term ---->
    barrier(localMemFence);

    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;inner1){
        for(int i=0;i<p_Nq;++i;inner0){
          s_q[k][j][i] = r_G01[k]*r_qr[k] + r_G11[k]*r_qs[k] + r_G12[k]*r_qt[k];
        }
      }
    }

    barrier(localMemFence);

    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;inner1){
        for(int i=0;i<p_Nq;++i;inner0){
          dfloat tmp = 0.f;
          for(int n=0; n<p_Nq; ++n)
            tmp += s_D[n][j]*s_q[k][n][i];

          r_Aq[k] += tmp;
        }
      }
    }

    // t term ---->
    barrier(localMemFence);

    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;inner1){
        for(int i=0;i<p_Nq;++i;inner0){
          s_q[k][j][i] = r_G02[k]*r_qr[k] + r_G12[k]*r_qs[k] + r_G22[k]*r_qt[k];
        }
      }
    }

    barrier(localMemFence);

    for(int k=0;k<p_Nq;++k){
      for(int j=0;j<p_Nq;++j;inner1){
        for(int i=0;i<p_Nq;++i;inner0){
          dfloat tmp = 0.f;
          for(int n=0; n<p_Nq; ++n)
            tmp += s_D[n][k]*s_q[n][j][i];

          r_Aq[k] += tmp;

          const dlong base = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
          rhs[base] -= r_Aq[k] + s_ndq[k][i][j];
        }
      }
    }
  }
}
