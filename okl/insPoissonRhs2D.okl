//
#define UXID 0
#define UYID 1

#define RXID 0  
#define RYID 1  
#define SXID 2  
#define SYID 3  
#define  JID 4
#define JWID 5

/* offsets for nx, ny, sJ, 1/J */
#define NXID 0  
#define NYID 1  
#define SJID 2  
#define IJID 3  
#define WSJID 4
#define IHID 5

void boundaryConditionsIpdg2D(const iint bc,
			                           const dfloat  t,    const dfloat  x, const dfloat  y,
			                           const dfloat  nx,   const dfloat  ny,
			                           const dfloat  prM,  dfloat * restrict prB){

  if(bc==1){ // Wall 
    


  }
  if(bc==2){ // Inflow
  	

  }
  if(bc==3){ // Outflow 
  
  }
   
   if(bc==4){ // Slip
    

  }




}

void boundaryConditionsRhs2D(const iint bc,
			              const dfloat  t,    const dfloat  x, const dfloat  y,
			              const dfloat  nx,   const dfloat  ny,
			              const dfloat  uxM,  const dfloat  uyM,
			                    dfloat * restrict uxB, dfloat * restrict uyB){

  if(bc==1){ // Wall 
    *uxB = 0.f; 
    *uyB = 0.f;
  }
  if(bc==2){ // Inflow
  	dfloat nu   = 1.0/40.0;
  	dfloat lamda = 1.f/(2.f * nu) - occaSqrt(1.f/(4.f*nu*nu) + 4.f*OCCA_PI*OCCA_PI) ;
    *uxB = 1.0f - occaExp(lamda*x)*occaCos(2.f*OCCA_PI*y) ; 
    *uyB = 0.5f*lamda/(OCCA_PI)*occaExp(lamda*x)*occaSin(2.f*OCCA_PI*y);
  }
  if(bc==3){ // Outflow 
  	dfloat nu   = 1.0/40.0;
  	dfloat lamda = 1.f/(2.f * nu) - occaSqrt(1.f/(4.f*nu*nu) + 4.f*OCCA_PI*OCCA_PI) ;
  	//
    *uxB = -lamda*occaExp(lamda*x)*occaCos(2.f*OCCA_PI*y);
    *uyB =  lamda*(0.5f*lamda/OCCA_PI)*occaExp(lamda*x)*occaSin(2.f*OCCA_PI*y);
  }
}


// Computes volume contribution of div(UI)
kernel void insPoissonRhsVolume2D(const iint Nelements,
																		const dfloat * restrict vgeo,
																		const dfloat * restrict DrT,
																		const dfloat * restrict DsT,
																		const dfloat * restrict MM, 
																		const dfloat * restrict U,
																		      dfloat * restrict rhsPr){
  
  for(iint eo=0;eo<Nelements;eo+=p_NblockV;outer0){  // for all elements
   
   // Hold Flux Vector on Shared, use symmetry f21 = f12
   shared dfloat s_Ux[p_NblockV][p_Np];
   shared dfloat s_Uy[p_NblockV][p_Np];
   shared dfloat s_FU[p_NblockV][p_Np];
   // Hold Pressure on Shared
   shared dfloat s_Pr[p_NblockV][p_Np];

    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element
				iint e = eo+es; // element in block
				if(e<Nelements){ 
					const iint id = e*p_Np+n;
					const dfloat ux = U[id + UXID*p_NtotalDofs];
					const dfloat uy = U[id + UYID*p_NtotalDofs];
					//
					s_Ux[es][n] = ux;
					s_Uy[es][n] = uy;          
				}
      }
    }

     // Make sure all node data is loaded into shared
    barrier(localMemFence);


    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element
	
			iint e = eo+es; // element in block
			if(e<Nelements){	  
			  // prefetch geometric factors (constant on triangle)
			  const dfloat drdx = vgeo[e*p_Nvgeo + RXID];
			  const dfloat drdy = vgeo[e*p_Nvgeo + RYID];
			  const dfloat dsdx = vgeo[e*p_Nvgeo + SXID];
			  const dfloat dsdy = vgeo[e*p_Nvgeo + SYID];
			   const dfloat J   = vgeo[e*p_Nvgeo +  JID];

	  // compute 'r' and 's' derivatives of (q_m) at node n
				dfloat duxdr = 0.f, duxds = 0.f; 
				dfloat duydr = 0.f, duyds = 0.f; 
				occaUnroll(p_Np)
				for(iint i=0;i<p_Np;++i){
					const dfloat Drni = DrT[n+i*p_Np];
					const dfloat Dsni = DsT[n+i*p_Np];
					// 
					duxdr += Drni*s_Ux[es][i];
					duxds += Dsni*s_Ux[es][i];
					duydr += Drni*s_Uy[es][i];
					duyds += Dsni*s_Uy[es][i];
				}
				// chain rule
        dfloat duxdx   = drdx*duxdr + dsdx*duxds;
        dfloat duydy   = drdy*duydr + dsdy*duyds;
        // To be mutiplied with Mass Matrix
        s_FU[es][n]    = J*(duxdx + duydy);
	 
	     }
      }
    }

    // Make sure all node data is loaded into shared
    barrier(localMemFence);
   // Multiply with Mass Matrix
    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element
	
			iint e = eo+es; // element in block
			if(e<Nelements){	  
				dfloat fu = 0.f; 
				occaUnroll(p_Np)
				for(iint i=0;i<p_Np;++i){
					const dfloat mm = MM[n+i*p_Np];
				  // 
					fu += mm*s_FU[es][i];	
				}
				const iint id = e*p_Np+n;
				// rhsU = - grad P
				rhsPr[id] = fu ; 
        
	 
	     }
      }
    }
 }
}




kernel void insPoissonRhsSurface2D(const iint Nelements,
		         const dfloat dt,
	           const dfloat g0,
				     const dfloat * restrict sgeo,
				     const dfloat * restrict FMMT,
				     const iint   * restrict vmapM,
				     const iint   * restrict vmapP,
				     const iint   * restrict EToB,
				     const dfloat time,
				     const dfloat * restrict x,
				     const dfloat * restrict y,
				     const dfloat * restrict U,
				           dfloat * restrict rhsPr){
  
  // for all elements
  for(iint eo=0;eo<Nelements;eo+=p_NblockS;outer0){

    shared dfloat s_fluxU[p_NblockS][p_Nfp*p_Nfaces];
     // for all face nodes of all elements
    for(iint es=0;es<p_NblockS;++es;inner1){
      for(iint n=0;n<p_maxNodes;++n;inner0){ // maxNodes = max(Nfp*Nfaces,Np)
	   iint e = eo + es;
	    if(e<Nelements){
	      if(n<p_Nfp*p_Nfaces){
		    // find face that owns this node
		    iint face = n/p_Nfp;
		    // load surface geofactors for this face
		    iint sid    = p_Nsgeo*(e*p_Nfaces+face);
		    dfloat nx   = sgeo[sid+NXID];
		    dfloat ny   = sgeo[sid+NYID];
		    dfloat sJ   = sgeo[sid+SJID];
		    //dfloat invJ = sgeo[sid+3];
		   
		    // indices of negative and positive traces of face node
		    iint id  = e*p_Nfp*p_Nfaces + n;
		    iint idM = vmapM[id];
		    iint idP = vmapP[id];

		   if(idP<0) idP = idM;
		  
	  // load negative and positive trace node values of q
	     dfloat  uxm = U[idM + UXID*p_NtotalDofs];
	     dfloat  uxp = U[idP + UXID*p_NtotalDofs];
	     //
		   dfloat  uym = U[idM + UYID*p_NtotalDofs];
		   dfloat  uyp = U[idP + UYID*p_NtotalDofs];
		   
		    // apply boundary condition
		    iint bc = EToB[face+p_Nfaces*e];
		    if(bc>0)
		      boundaryConditionsRhs2D(bc, time, x[idM], y[idM], nx, ny, uxm, uym,&uxp, &uyp);

		    // !!!!!!!!!!! Use just Central Flux, may change !!!!!!!!!!!
        s_fluxU[es][n] = 0.5f*sJ*(nx*(uxp-uxm) + ny*(uyp-uym)); // Multiplied with mass matrix no invJ
       	 }
    		}
			}
		}
    
   
    // wait for all shared memory writes of the previous inner loop to complete
    barrier(localMemFence);

    // for each node in the element
    for(iint es=0;es<p_NblockS;++es;inner1){
			for(iint n=0;n<p_maxNodes;++n;inner0){
				iint e = eo + es;
					if(e<Nelements){
						if(n<p_Np){
							iint id = e*p_Np + n;

							dfloat rhspr = rhsPr[id];
							// Lift
							occaUnroll(p_NfacesNfp)
							for(int m=0;m<p_Nfaces*p_Nfp;++m){
								dfloat FM = FMMT[n+m*p_Np];
								//
								rhspr += FM*s_fluxU[es][m];
					}
          //  rhsu = -grad(p) 
					rhsPr[id] = g0*rhspr/dt; // Hold inverse dt later !!!!!
				  }
				}
      }
    }
  }


}


// Update RhsU
			




