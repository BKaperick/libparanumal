// Compute RHS Forcing i.e. 1/nu*(-grad(Pr) + sum(a_i x u_i)^(n-i) -sum(b_i x N(u)^(n-i))
kernel void insHelmholtzRhsForcingHex3D(const dlong Nelements,
                                         const int subcycling,  
                                         const dfloat * restrict vgeo,
                                         const dfloat idt,
                                         const dfloat inu,
                                         const dfloat a0,
                                         const dfloat a1,
                                         const dfloat a2,
                                         const dfloat b0,
                                         const dfloat b1,
                                         const dfloat b2,
                                         const dfloat c0,
                                         const dfloat c1,
                                         const dfloat c2,
                                         const int index,
                                         const dlong offset,
                                         const dfloat * restrict U,
                                         const dfloat * restrict V,
                                         const dfloat * restrict W,
                                         const dfloat * restrict NU,
                                         const dfloat * restrict NV,
                                         const dfloat * restrict NW,
                                         const dfloat * restrict Px,
                                         const dfloat * restrict Py,
                                         const dfloat * restrict Pz,
                                               dfloat * restrict rhsU,
                                               dfloat * restrict rhsV,
                                               dfloat * restrict rhsW){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;outer0){

    for(int es=0;es<p_NblockV;++es;inner3){   
      for(int k=0;k<p_Nq;++k;inner2){ 
        for(int j=0;j<p_Nq;++j;inner1){ 
          for(int i=0;i<p_Nq;++i;inner0){ 
            const dlong e = eo+es; // element in block
            if(e<Nelements){
              //hard coded for 3 stages
              const int index0 = (index+0)%3;
              const int index1 = (index+2)%3; //back one step
              const int index2 = (index+1)%3; //back two steps

              const dlong id0   = i + j*p_Nq + k*p_Nq*p_Nq + p_Np*(e+index0*offset);
              const dlong id1   = i + j*p_Nq + k*p_Nq*p_Nq + p_Np*(e+index1*offset);
              const dlong id2   = i + j*p_Nq + k*p_Nq*p_Nq + p_Np*(e+index2*offset);

              const dlong gid = i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np*p_Nvgeo;
              const dfloat JW = vgeo[gid + p_JWID*p_Np];
              
              // gradP
              const dfloat Pxm0 = Px[id0];
              const dfloat Pxm1 = Px[id1];
              const dfloat Pxm2 = Px[id2];

              const dfloat Pym0 = Py[id0];
              const dfloat Pym1 = Py[id1];
              const dfloat Pym2 = Py[id2];

              const dfloat Pzm0 = Pz[id0];
              const dfloat Pzm1 = Pz[id1];
              const dfloat Pzm2 = Pz[id2];

              const dlong id = i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np;
              if(subcycling==0){ //no subcycling
                //U
                const dfloat Um0  = U[id0];
                const dfloat Um1  = U[id1];
                const dfloat Um2  = U[id2];
                //V
                const dfloat Vm0  = V[id0];
                const dfloat Vm1  = V[id1];
                const dfloat Vm2  = V[id2];
                //W
                const dfloat Wm0  = W[id0];
                const dfloat Wm1  = W[id1];
                const dfloat Wm2  = W[id2];
                
                // NU
                const dfloat NUm0 = NU[id0];
                const dfloat NUm1 = NU[id1];
                const dfloat NUm2 = NU[id2];
                // NV
                const dfloat NVm0 = NV[id0];
                const dfloat NVm1 = NV[id1];
                const dfloat NVm2 = NV[id2];  
                // NW
                const dfloat NWm0 = NW[id0];
                const dfloat NWm1 = NW[id1];
                const dfloat NWm2 = NW[id2];  

                // // -> (-L + gamma/dt*nu I)U = 1/nu*[sum(b_i*U_i)/dt - sum(a_i*NU_i) - sum(a_i*gradP_i)]
                rhsU[id]  = JW*inu*( + (b0*Um0 +b1*Um1 +b2*Um2 )*idt 
                                     - (c0*Pxm0+c1*Pxm1+c2*Pxm2) 
                                     - (a0*NUm0+a1*NUm1+a2*NUm2) );

                rhsV[id]  = JW*inu*( + (b0*Vm0 +b1*Vm1 +b2*Vm2 )*idt 
                                     - (c0*Pym0+c1*Pym1+c2*Pym2) 
                                     - (a0*NVm0+a1*NVm1+a2*NVm2) );

                rhsW[id]  = JW*inu*( + (b0*Wm0 +b1*Wm1 +b2*Wm2 )*idt 
                                     - (c0*Pzm0+c1*Pzm1+c2*Pzm2) 
                                     - (a0*NWm0+a1*NWm1+a2*NWm2) );
              } else{ //with subcycling
                //NU holds \hat{U} after subcycling
                const dfloat NUm0 = NU[id];
                const dfloat NVm0 = NV[id];
                const dfloat NWm0 = NW[id];

                // New Substeping Update
                rhsU[id]  = JW*inu*(NUm0*idt - (c0*Pxm0+c1*Pxm1+c2*Pxm2));                                          
                rhsV[id]  = JW*inu*(NVm0*idt - (c0*Pym0+c1*Pym1+c2*Pym2));                                                
                rhsW[id]  = JW*inu*(NWm0*idt - (c0*Pzm0+c1*Pzm1+c2*Pzm2));                                                
              }
            }
          }
        }
      }
    }
  }
}


#define surfaceTerms(sk,face,i, j, k)                                   \
{                                                                       \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat nz = sgeo[sk*p_Nsgeo+p_NZID];                            \
  const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];                          \
  const dfloat hinv= sgeo[sk*p_Nsgeo+p_IHID];                           \
                                                                        \
  dfloat dudxP=0, dudyP=0, dudzP=0, uP=0;                               \
  dfloat dvdxP=0, dvdyP=0, dvdzP=0, vP=0;                               \
  dfloat dwdxP=0, dwdyP=0, dwdzP=0, wP=0;                               \
                                                                        \
  const int bc = EToB[face+p_Nfaces*e];                                 \
  if(bc>0) {                                                            \
    const dlong idM = vmapM[sk];                                        \
    insVelocityDirichletConditions3D(bc, t, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f, 0.f, &uP, &vP, &wP);\
    insVelocityNeumannConditions3D(bc, t, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, &dudxP, &dudyP, &dudzP, &dvdxP, &dvdyP, &dvdzP, &dwdxP, &dwdyP, &dwdzP);\
  }                                                                     \
                                                                        \
  const dfloat du = uP;                                                 \
  const dfloat dv = vP;                                                 \
  const dfloat dw = wP;                                                 \
                                                                        \
  s_dudx[k][j][i] += WsJ*nx*du;                                         \
  s_dudy[k][j][i] += WsJ*ny*du;                                         \
  s_dudz[k][j][i] += WsJ*nz*du;                                         \
  s_dvdx[k][j][i] += WsJ*nx*dv;                                         \
  s_dvdy[k][j][i] += WsJ*ny*dv;                                         \
  s_dvdz[k][j][i] += WsJ*nz*dv;                                         \
  s_dwdx[k][j][i] += WsJ*nx*dw;                                         \
  s_dwdy[k][j][i] += WsJ*ny*dw;                                         \
  s_dwdz[k][j][i] += WsJ*nz*dw;                                         \
                                                                        \
  s_rhsu[k][j][i] -= WsJ*(nx*dudxP + ny*dudyP+ nz*dudzP+ tau*du*hinv);  \
  s_rhsv[k][j][i] -= WsJ*(nx*dvdxP + ny*dvdyP+ nz*dvdzP+ tau*dv*hinv);  \
  s_rhsw[k][j][i] -= WsJ*(nx*dwdxP + ny*dwdyP+ nz*dwdzP+ tau*dw*hinv);  \
}

kernel void insHelmholtzRhsIpdgBCHex3D(const dlong Nelements,
                                        const dlong  * restrict vmapM,
                                        const dfloat tau,
                                        const dfloat t,
                                        const dfloat * restrict x,
                                        const dfloat * restrict y,
                                        const dfloat * restrict vgeo,
                                        const dfloat * restrict sgeo,
                                        const int    * restrict EToB,
                                        const dfloat * restrict D,
                                              dfloat * restrict rhsU,
                                              dfloat * restrict rhsV){

  for(dlong e=0;e<Nelements;++e;outer0){

    shared dfloat s_dudx[p_Nq][p_Nq][p_Nq];
    shared dfloat s_dudy[p_Nq][p_Nq][p_Nq];
    shared dfloat s_dudz[p_Nq][p_Nq][p_Nq];
    shared dfloat s_dvdx[p_Nq][p_Nq][p_Nq];
    shared dfloat s_dvdy[p_Nq][p_Nq][p_Nq];
    shared dfloat s_dvdz[p_Nq][p_Nq][p_Nq];
    shared dfloat s_dwdx[p_Nq][p_Nq][p_Nq];
    shared dfloat s_dwdy[p_Nq][p_Nq][p_Nq];
    shared dfloat s_dwdz[p_Nq][p_Nq][p_Nq];
    shared dfloat s_rhsu[p_Nq][p_Nq][p_Nq];
    shared dfloat s_rhsv[p_Nq][p_Nq][p_Nq];
    shared dfloat s_rhsw[p_Nq][p_Nq][p_Nq];
    shared dfloat s_D[p_Nq][p_Nq];

    // loop over slabs
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
        for(int k=0;k<p_Nq;++k){          
          s_dudx[k][j][i] = 0.f;
          s_dudy[k][j][i] = 0.f;
          s_dudz[k][j][i] = 0.f;
          s_dvdx[k][j][i] = 0.f;
          s_dvdy[k][j][i] = 0.f;
          s_dvdz[k][j][i] = 0.f;
          s_dwdx[k][j][i] = 0.f;
          s_dwdy[k][j][i] = 0.f;
          s_dwdz[k][j][i] = 0.f;
          s_rhsu[k][j][i] = 0.f;
          s_rhsv[k][j][i] = 0.f;
          s_rhsw[k][j][i] = 0.f;
        }

        s_D[j][i] = D[j*p_Nq+i];
      }
    }

    barrier(localMemFence);

    // for all face nodes of all elements
    // face 0 & 5
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong e = eo + es;
        if(e<Nelements){
          const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + j*p_Nq + i;
          const dlong sk5 = e*p_Nfp*p_Nfaces + 5*p_Nfp + j*p_Nq + i;

          surfaceTerms(sk0,0,i,j,0     );
          surfaceTerms(sk5,5,i,j,p_Nq-1);
        }
      }
    }


    barrier(localMemFence);

    // for all face nodes of all elements
    // face 1 & 3
    for(int k=0;k<p_Nq;++k;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong e = eo + es;
        if(e<Nelements){
          const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + k*p_Nq + i;
          const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + k*p_Nq + i;

          surfaceTerms(sk1,1,i,0     ,k);
          surfaceTerms(sk3,3,i,p_Nq-1,k);
        }
      }
    }

    barrier(localMemFence);

    // for all face nodes of all elements
    // face 2 & 4
    for(int k=0;k<p_Nq;++k;inner1){
      for(int j=0;j<p_Nq;++j;inner0){
        const dlong e = eo + es;
        if(e<Nelements){
          const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + k*p_Nq + j;
          const dlong sk4 = e*p_Nfp*p_Nfaces + 4*p_Nfp + k*p_Nq + j;

          surfaceTerms(sk2,2,p_Nq-1,j,k);
          surfaceTerms(sk4,4,0     ,j,k);
        }
      }
    }

    barrier(localMemFence);

    // prescale by geofacs
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        // does need the nasty geofacs
        for(int k=0;k<p_Nq;++k){
          const dlong gid = i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np*p_Nvgeo;

          const dfloat drdx = vgeo[gid + p_RXID*p_Np];
          const dfloat drdy = vgeo[gid + p_RYID*p_Np];
          const dfloat drdz = vgeo[gid + p_RZID*p_Np];
          const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
          const dfloat dsdy = vgeo[gid + p_SYID*p_Np];
          const dfloat dsdz = vgeo[gid + p_SZID*p_Np];
          const dfloat dtdx = vgeo[gid + p_TXID*p_Np];
          const dfloat dtdy = vgeo[gid + p_TYID*p_Np];
          const dfloat dtdz = vgeo[gid + p_TZID*p_Np];

          const dfloat dudx = s_dudx[k][j][i];
          const dfloat dudy = s_dudy[k][j][i];
          const dfloat dudz = s_dudz[k][j][i];
          const dfloat dvdx = s_dvdx[k][j][i];
          const dfloat dvdy = s_dvdy[k][j][i];
          const dfloat dvdz = s_dvdz[k][j][i];
          const dfloat dwdx = s_dwdx[k][j][i];
          const dfloat dwdy = s_dwdy[k][j][i];
          const dfloat dwdz = s_dwdz[k][j][i];

          s_dudx[k][j][i] = (drdx*dudx + drdy*dudy + drdz*dudz);
          s_dudy[k][j][i] = (dsdx*dudx + dsdy*dudy + dsdz*dudz);
          s_dudz[k][j][i] = (dtdx*dudx + dtdy*dudy + dtdz*dudz);
          s_dvdx[k][j][i] = (drdx*dvdx + drdy*dvdy + drdz*dvdz);
          s_dvdy[k][j][i] = (dsdx*dvdx + dsdy*dvdy + dsdz*dvdz);
          s_dvdz[k][j][i] = (dtdx*dvdx + dtdy*dvdy + dtdz*dvdz);
          s_dwdx[k][j][i] = (drdx*dwdx + drdy*dwdy + drdz*dwdz);
          s_dwdy[k][j][i] = (dsdx*dwdx + dsdy*dwdy + dsdz*dwdz);
          s_dwdz[k][j][i] = (dtdx*dwdx + dtdy*dwdy + dtdz*dwdz);
        }
      }
    }

    barrier(localMemFence);

    // loop over slabs
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
        for(int k=0;k<p_Nq;++k){
          dfloat dur = 0, dus = 0, dut = 0;
          dfloat dvr = 0, dvs = 0, dvt = 0;
          dfloat dwr = 0, dws = 0, dwt = 0;

          occaUnroll(p_Nq)
          for(int n=0;n<p_Nq;++n){
            const dfloat Dr = s_D[i][n];
            const dfloat Ds = s_D[j][n];
            const dfloat Dt = s_D[k][n];

            dur += Dr*s_dudx[k][j][n];
            dus += Ds*s_dudy[k][n][i];
            dut += Dt*s_dudz[n][j][i];
            dvr += Dr*s_dvdx[k][j][n];
            dvs += Ds*s_dvdy[k][n][i];
            dvt += Dt*s_dvdz[n][j][i];
            dwr += Dr*s_dwdx[k][j][n];
            dws += Ds*s_dwdy[k][n][i];
            dwt += Dt*s_dwdz[n][j][i];
          }

          const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
          rhsU[id] -= s_rhsu[k][j][i]  + dur + dus + dut;
          rhsV[id] -= s_rhsv[k][j][i]  + dvr + dvs + dvt;
          rhsW[id] -= s_rhsw[k][j][i]  + dwr + dws + dwt;
        }
      }
    }
  }
}
#undef surfaceTerms


#define surfaceTerms(sk,face,i, j, k)                                   \
{                                                                       \
  const dlong idM = vmapM[sk];                                          \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat nz = sgeo[sk*p_Nsgeo+p_NZID];                            \
  const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];                          \
                                                                        \
  dfloat dudxP=0.f, dudyP=0.f, dudzP=0.f, uP=0.f;                       \
  dfloat dvdxP=0.f, dvdyP=0.f, dvdzP=0.f, vP=0.f;                       \
  dfloat dwdxP=0.f, dwdyP=0.f, dwdzP=0.f, wP=0.f;                       \
                                                                        \
  const int bc = mapB[idM];                                             \
  if(bc>0) {                                                            \
    insVelocityDirichletConditions3D(bc, t, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f, 0.f, &uP, &vP, &wP);\
    insVelocityNeumannConditions3D(bc, t, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, &dudxP, &dudyP, &dudzP, &dvdxP, &dvdyP, &dvdzP, &dwdxP, &dwdyP, &dwdzP);\
  }                                                                     \
                                                                        \
  s_u  [k][j][i]  = uP;                                                 \
  s_v  [k][j][i]  = vP;                                                 \
  s_w  [k][j][i]  = wP;                                                 \
  s_ndu[k][j][i] -= WsJ*(nx*dudxP + ny*dudyP + nz*dudzP);               \
  s_ndv[k][j][i] -= WsJ*(nx*dvdxP + ny*dvdyP + nz*dvdzP);               \
  s_ndw[k][j][i] -= WsJ*(nx*dwdxP + ny*dwdyP + nz*dwdzP);               \
}

//RHS contributions for continuous solver
kernel void insHelmholtzRhsBCHex3D(const dlong Nelements,
                              const dfloat * restrict ggeo,
                              const dfloat * restrict sgeo,
                              const dfloat * restrict D,
                              const dlong  * restrict vmapM,
                              const dfloat lambda,
                              const dfloat time,
                              const dfloat * restrict x,
                              const dfloat * restrict y,
                              const dfloat * restrict z,
                              const int    * restrict mapB,
                                    dfloat * restrict rhsU,
                                    dfloat * restrict rhsV,
                                    dfloat * restrict rhsW){

  for(dlong e=0;e<Nelements;e++;outer0){
    shared dfloat s_u[p_Nq][p_Nq][p_Nq];
    shared dfloat s_v[p_Nq][p_Nq][p_Nq];
    shared dfloat s_w[p_Nq][p_Nq][p_Nq];
    shared dfloat s_ndu[p_Nq][p_Nq][p_Nq];
    shared dfloat s_ndv[p_Nq][p_Nq][p_Nq];
    shared dfloat s_ndw[p_Nq][p_Nq][p_Nq];
    
    shared dfloat s_D[p_Nq][p_Nq];

    exclusive dfloat r_ur[p_Nq], r_us[p_Nq], r_ut[p_Nq], r_rhsu[p_Nq];
    exclusive dfloat r_vr[p_Nq], r_vs[p_Nq], r_vt[p_Nq], r_rhsv[p_Nq];
    exclusive dfloat r_wr[p_Nq], r_ws[p_Nq], r_wt[p_Nq], r_rhsw[p_Nq];
    
    exclusive dfloat r_G00[p_Nq], r_G01[p_Nq], r_G02[p_Nq], r_G11[p_Nq];
    exclusive dfloat r_G12[p_Nq], r_G22[p_Nq], r_GwJ[p_Nq];

    // loop over slabs
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
        for(int k=0;k<p_Nq;++k){
          s_u  [k][j][i] = 0.;
          s_v  [k][j][i] = 0.;
          s_w  [k][j][i] = 0.;
          s_ndu[k][j][i] = 0.;
          s_ndv[k][j][i] = 0.;
          s_ndw[k][j][i] = 0.;
        }
        
        s_D[j][i] = D[j*p_Nq+i];
      }
    }

    barrier(localMemFence);

    // for all face nodes of all elements
    // face 0 & 5
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong e = eo + es;
        if(e<Nelements){
          const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + j*p_Nq + i;
          const dlong sk5 = e*p_Nfp*p_Nfaces + 5*p_Nfp + j*p_Nq + i;

          surfaceTerms(sk0,0,i,j,0     );
          surfaceTerms(sk5,5,i,j,p_Nq-1);
        }
      }
    }


    barrier(localMemFence);

    // for all face nodes of all elements
    // face 1 & 3
    for(int k=0;k<p_Nq;++k;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        const dlong e = eo + es;
        if(e<Nelements){
          const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + k*p_Nq + i;
          const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + k*p_Nq + i;

          surfaceTerms(sk1,1,i,0     ,k);
          surfaceTerms(sk3,3,i,p_Nq-1,k);
        }
      }
    }

    barrier(localMemFence);

    // for all face nodes of all elements
    // face 2 & 4
    for(int k=0;k<p_Nq;++k;inner1){
      for(int j=0;j<p_Nq;++j;inner0){
        const dlong e = eo + es;
        if(e<Nelements){
          const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + k*p_Nq + j;
          const dlong sk4 = e*p_Nfp*p_Nfaces + 4*p_Nfp + k*p_Nq + j;

          surfaceTerms(sk2,2,p_Nq-1,j,k);
          surfaceTerms(sk4,4,0     ,j,k);
        }
      }
    }

    barrier(localMemFence);
    
    // loop over slabs
    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
        for(int k=0;k<p_Nq;++k){
          const dlong base = e*p_Nggeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

          // assumes w*J built into G entries
          r_GwJ[k] = ggeo[base+p_GWJID*p_Np];
          r_G00[k] = ggeo[base+p_G00ID*p_Np];
          r_G01[k] = ggeo[base+p_G01ID*p_Np];
          r_G02[k] = ggeo[base+p_G02ID*p_Np];
          r_G11[k] = ggeo[base+p_G11ID*p_Np];
          r_G12[k] = ggeo[base+p_G12ID*p_Np];
          r_G22[k] = ggeo[base+p_G22ID*p_Np];

          dfloat ur = 0.f, us = 0.f, ut = 0.f;
          dfloat vr = 0.f, vs = 0.f, vt = 0.f;
          dfloat wr = 0.f, ws = 0.f, wt = 0.f;
          
          occaUnroll(p_Nq)
            for(int n=0; n<p_Nq; ++n){
              const dfloat Dr = s_D[i][n];
              const dfloat Ds = s_D[j][n];
              const dfloat Dt = s_D[k][n];

              ur += Dr*s_u[k][j][n];
              us += Ds*s_u[k][n][i];
              ut += Dt*s_u[n][j][i];
              vr += Dr*s_v[k][j][n];
              vs += Ds*s_v[k][n][i];
              vt += Dt*s_v[n][j][i];
              wr += Dr*s_w[k][j][n];
              ws += Ds*s_w[k][n][i];
              wt += Dt*s_w[n][j][i];
            }
          
          r_ur[k] = ur; r_us[k] = us; r_ut[k] = ut; 
          r_vr[k] = vr; r_vs[k] = vs; r_vt[k] = vt; 
          r_wr[k] = wr; r_ws[k] = ws; r_wt[k] = wt; 
          r_rhsu[k] = r_GwJ[k]*lambda*s_u[k][j][i];
          r_rhsv[k] = r_GwJ[k]*lambda*s_v[k][j][i];
          r_rhsw[k] = r_GwJ[k]*lambda*s_w[k][j][i];
        }
      }
    }

    // r term ----->
    barrier(localMemFence);

    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
        for(int k=0;k<p_Nq;++k){
          s_u[k][j][i] = r_G00[k]*r_ur[k] + r_G01[k]*r_us[k] + r_G02[k]*r_ut[k];
          s_v[k][j][i] = r_G00[k]*r_vr[k] + r_G01[k]*r_vs[k] + r_G02[k]*r_vt[k];
          s_w[k][j][i] = r_G00[k]*r_wr[k] + r_G01[k]*r_ws[k] + r_G02[k]*r_wt[k];
        }
      }
    }
      
    barrier(localMemFence);

    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
        for(int k=0;k<p_Nq;++k){
          dfloat utmp = 0.f;
          dfloat vtmp = 0.f;
          dfloat wtmp = 0.f;
          occaUnroll(p_Nq)
            for(int n=0;n<p_Nq;++n) {
              const dfloat Dr = s_D[n][i];
              utmp += Dr*s_u[k][j][n];
              vtmp += Dr*s_v[k][j][n];
              wtmp += Dr*s_w[k][j][n];
            }

          r_rhsu[k] += utmp;
          r_rhsv[k] += vtmp;
          r_rhsw[k] += wtmp;
        }
      }
    }

    // s term ----->
    barrier(localMemFence);

    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
        for(int k=0;k<p_Nq;++k){
          s_u[k][j][i] = r_G01[k]*r_ur[k] + r_G11[k]*r_us[k] + r_G12[k]*r_ut[k];
          s_v[k][j][i] = r_G01[k]*r_vr[k] + r_G11[k]*r_vs[k] + r_G12[k]*r_vt[k];
          s_w[k][j][i] = r_G01[k]*r_wr[k] + r_G11[k]*r_ws[k] + r_G12[k]*r_wt[k];
        }
      }
    }
      
    barrier(localMemFence);

    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
        for(int k=0;k<p_Nq;++k){
          dfloat utmp = 0.f;
          dfloat vtmp = 0.f;
          dfloat wtmp = 0.f;
          occaUnroll(p_Nq)
            for(int n=0;n<p_Nq;++n) {
              const dfloat Ds = s_D[n][j];
              utmp += Ds*s_u[k][n][i];
              vtmp += Ds*s_v[k][n][i];
              wtmp += Ds*s_w[k][n][i];
            }

          r_rhsu[k] += utmp;
          r_rhsv[k] += vtmp;
          r_rhsw[k] += wtmp;
        }
      }
    }

    // t term ---->
    barrier(localMemFence);

    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
        for(int k=0;k<p_Nq;++k){
          s_u[k][j][i] = r_G02[k]*r_ur[k] + r_G12[k]*r_us[k] + r_G22[k]*r_ut[k];
          s_v[k][j][i] = r_G02[k]*r_vr[k] + r_G12[k]*r_vs[k] + r_G22[k]*r_vt[k];
          s_w[k][j][i] = r_G02[k]*r_wr[k] + r_G12[k]*r_ws[k] + r_G22[k]*r_wt[k];
        }
      }
    }
      
    barrier(localMemFence);

    for(int j=0;j<p_Nq;++j;inner1){
      for(int i=0;i<p_Nq;++i;inner0){
        occaUnroll(p_Nq)
        for(int k=0;k<p_Nq;++k){
          dfloat utmp = 0.f;
          dfloat vtmp = 0.f;
          dfloat wtmp = 0.f;

          occaUnroll(p_Nq) 
            for(int n=0;n<p_Nq;++n) {
              const dfloat Dt = s_D[n][k];
              utmp += Dt*s_u[n][j][i];
              vtmp += Dt*s_v[n][j][i];
              wtmp += Dt*s_w[n][j][i];
            }
          
          r_rhsu[k] += utmp;
          r_rhsv[k] += vtmp;
          r_rhsw[k] += wtmp;

          const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
          rhsU[id] -= r_rhsu[k] + s_ndu[k][j][i];
          rhsV[id] -= r_rhsv[k] + s_ndv[k][j][i];
          rhsW[id] -= r_rhsw[k] + s_ndw[k][j][i];
        }
      }
    }
  }
}

kernel void insHelmholtzAddBCHex3D(const dlong Nelements,
                                    const dfloat time,
                                    const dfloat * restrict x,
                                    const dfloat * restrict y,
                                    const dfloat * restrict z,
                                    const dlong  * restrict vmapM,
                                    const int    * restrict mapB,
                                          dfloat * restrict U,
                                          dfloat * restrict V,
                                          dfloat * restrict W){

  for(dlong e=0;e<Nelements;e++;outer0){
    for(int n=0;n<p_Nfp*p_Nfaces;++n;inner0){
      const dlong idM = vmapM[e*p_Nfp*p_Nfaces + n];
      const int bc = mapB[idM];

      if(bc>0) {
        const dfloat uM = U[idM];
        const dfloat vM = V[idM];
        const dfloat wM = W[idM];
        dfloat uP = 0.f;
        dfloat vP = 0.f;
        dfloat wP = 0.f;
        insVelocityDirichletConditions3D(bc, t, x[idM], y[idM], z[idM], nx, ny, nz, uM, vM, wM, &uP, &vP, &wP);
        U[idM] = uP;
        V[idM] = vP;
        W[idM] = wP;
      }    
    }
  }
}