
// Computes volume contribution of div(UI)
kernel void insDivergenceVolume3D(const iint Nelements,
				  const dfloat * restrict vgeo,
				  const dfloat * restrict DrT,
          const dfloat * restrict DsT,
          const dfloat * restrict DtT,
				  const iint offset,
				  const dfloat * restrict U,
          const dfloat * restrict V,
          const dfloat * restrict W,
				  dfloat * restrict divU){
  
  for(iint eo=0;eo<Nelements;eo+=p_NblockV;outer0){  // for all elements

    shared dfloat s_U[p_NblockV][p_Np];
    shared dfloat s_V[p_NblockV][p_Np];
    shared dfloat s_W[p_NblockV][p_Np];
  
    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element
      	iint e = eo+es; // element in block
      	if(e<Nelements){ 
      	  const iint id = (e+offset)*p_Np+n;
      	  s_U[es][n] = U[id];
          s_V[es][n] = V[id];         
          s_W[es][n] = W[id];         
      	}
      }
    }

    // Make sure all node data is loaded into shared
    barrier(localMemFence);

    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element
      	iint e = eo+es; // element in block
      	if(e<Nelements){	  
      	  // prefetch geometric factors (constant on triangle)
      	  // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
          const dfloat drdz = vgeo[e*p_Nvgeo + p_RZID];

          const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
          const dfloat dsdz = vgeo[e*p_Nvgeo + p_SZID];

          const dfloat dtdx = vgeo[e*p_Nvgeo + p_TXID];
          const dfloat dtdy = vgeo[e*p_Nvgeo + p_TYID];
          const dfloat dtdz = vgeo[e*p_Nvgeo + p_TZID];
          
      	  //const dfloat J    = vgeo[e*p_Nvgeo + p_JID];

      	  // compute 'r' and 's' derivatives of (q_m) at node n
      	  dfloat dudr = 0.f, duds = 0.f, dudt = 0.f; 
          dfloat dvdr = 0.f, dvds = 0.f, dvdt = 0.f; 
          dfloat dwdr = 0.f, dwds = 0.f, dwdt = 0.f; 
      	  occaUnroll(p_Np)
    	    for(iint i=0;i<p_Np;++i){
    	      const dfloat Drni = DrT[n+i*p_Np];
            const dfloat Dsni = DsT[n+i*p_Np];
            const dfloat Dtni = DtT[n+i*p_Np];
    	      // 
    	      dudr += Drni*s_U[es][i];
            duds += Dsni*s_U[es][i];
            dudt += Dtni*s_U[es][i];

            dvdr += Drni*s_V[es][i];
            dvds += Dsni*s_V[es][i];
            dvdt += Dtni*s_V[es][i];

            dwdr += Drni*s_W[es][i];
            dwds += Dsni*s_W[es][i];
            dwdt += Dtni*s_W[es][i];
    	    }

      	  // chain rule
          dfloat dudx   = drdx*dudr + dsdx*duds + dtdx*dudt;
          dfloat dvdy   = drdy*dvdr + dsdy*dvds + dtdy*dvdt;
          dfloat dwdz   = drdz*dwdr + dsdz*dwds + dtdz*dwdt;

      	  const iint id = e*p_Np+n;
      	  divU[id] = dudx + dvdy + dwdz;
      	}
      }
    }
  }
}

kernel void insDivergenceSurface3D(const iint Nelements,
				   const dfloat * restrict sgeo,
				   const dfloat * restrict LIFTT,
				   const iint   * restrict vmapM,
				   const iint   * restrict vmapP,
				   const iint   * restrict EToB,
				   const dfloat time,
				   const dfloat * restrict x,
           const dfloat * restrict y,
           const dfloat * restrict z,
           const iint offset,
				   const dfloat * restrict U,
           const dfloat * restrict V,
           const dfloat * restrict W,
				   dfloat * restrict divU){ 

  for(iint eo=0;eo<Nelements;eo+=p_NblockS;outer0){
    shared dfloat s_fluxU[p_NblockS][p_Nfp*p_Nfaces];

    for(iint es=0;es<p_NblockS;++es;inner1){
      for(iint n=0;n<p_maxNodes;++n;inner0){ // maxNodes = max(Nfp*Nfaces,Np)
      	iint e = eo + es;
      	if(e<Nelements){
      	  if(n<p_Nfp*p_Nfaces){
      	    // find face that owns this node
      	    iint face = n/p_Nfp;
      	    // load surface geofactors for this face
      	    iint sid    = p_Nsgeo*(e*p_Nfaces+face);
      	    dfloat nx   = sgeo[sid+p_NXID];
            dfloat ny   = sgeo[sid+p_NYID];
            dfloat nz   = sgeo[sid+p_NZID];
            dfloat sJ   = sgeo[sid+p_SJID];
            dfloat invJ = sgeo[sid+p_IJID];

      	    // indices of negative and positive traces of face node
      	    iint id  = e*p_Nfp*p_Nfaces + n;
      	    iint idM = vmapM[id]+offset*p_Np;
      	    iint idP = vmapP[id]+offset*p_Np;

      	    if(idP<0) idP = idM;
      		  
      	    // load negative and positive trace node values of q
      	    dfloat  uM = U[idM];
      	    dfloat  uP = U[idP];

            dfloat  vM = V[idM];
            dfloat  vP = V[idP];
            
            dfloat  wM = W[idM];
            dfloat  wP = W[idP];
      		   
      	    // apply boundary condition
      	    iint bc = EToB[face+p_Nfaces*e];
      	    if(bc>0) {
              idM = vmapM[id];
	            insDivergenceBoundaryConditions3D(bc,time, x[idM],y[idM],z[idM], nx,ny,nz, uM,vM,wM, &uP,&vP,&wP);
              // // Use strong form of the BCs
              uP = 2.f*uP-uM;        
              vP = 2.f*vP-vM;         
              wP = 2.f*wP-wM;         
            }
	    
      	    const dfloat sc = invJ * sJ ; 
      	    s_fluxU[es][n] = 0.5f*sc*(nx*(uP-uM) + ny*(vP-vM) + nz*(wP-wM)); 
      	  }
      	}
      }
    }
    
    // wait for all shared memory writes of the previous inner loop to complete
    barrier(localMemFence);

    // for each node in the element
    for(iint es=0;es<p_NblockS;++es;inner1){
      for(iint n=0;n<p_maxNodes;++n;inner0){
      	iint e = eo + es;
      	if(e<Nelements){
      	  if(n<p_Np){
      	    iint id = e*p_Np + n;
      	    dfloat divu = divU[id];    
      	    
            occaUnroll(p_NfacesNfp)
    	      for(int m=0;m<p_Nfaces*p_Nfp;++m){
          		dfloat L = LIFTT[n+m*p_Np];
          		divu += L*s_fluxU[es][m];
    	      }
      	    // Update
      	    divU[id] = divu; 
      	  }
      	}
      }
    }
  }
}


