#define RXID 0  
#define RYID 1  
#define SXID 2  
#define SYID 3

kernel void boltzmannNonPmlVolume2D(const iint Nelements,
				    const iint * restrict elementIds,
				    const dfloat ramp,
				    const dfloat drampdt,
				    const dfloat * restrict vgeo,
				    const dfloat * restrict DrT,
				    const dfloat * restrict DsT,
				    const dfloat4 * restrict q,
				    dfloat4 * restrict rhsq){
  
  for(iint eo=0;eo<Nelements;eo+=p_NblockV;outer0){  // for all elements

    shared dfloat s_q[p_NblockV][p_Nfields][p_Np];
    exclusive iint element;

    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element

	iint e = eo+es; // element in block

	if(e<Nelements){
	  element = elementIds[e];

	  const iint id = element*p_Np+n;
	  dfloat4 qan = q[2*id];
	  dfloat4 qbn = q[2*id+1];

	  s_q[es][0][n] = qan.x;
	  s_q[es][1][n] = qan.y;
	  s_q[es][2][n] = qan.z;
	  s_q[es][3][n] = qan.w;

	  s_q[es][4][n] = qbn.x;
	  s_q[es][5][n] = qbn.y;

	}
      }
    }

    // make sure all node data is loaded into shared
    barrier(localMemFence);

    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element
	
	iint e = eo+es; // element in block
	if(e<Nelements){
	  
	  // prefetch geometric factors (constant on triangle)
	  const dfloat drdx = vgeo[element*p_Nvgeo + RXID];
	  const dfloat drdy = vgeo[element*p_Nvgeo + RYID];
	  const dfloat dsdx = vgeo[element*p_Nvgeo + SXID];
	  const dfloat dsdy = vgeo[element*p_Nvgeo + SYID];

	  // compute 'r' and 's' derivatives of (q_m) at node n
	  dfloat dq1dr = 0, dq2dr = 0, dq3dr = 0, dq4dr = 0, dq5dr = 0, dq6dr = 0;
	  dfloat dq1ds = 0, dq2ds = 0, dq3ds = 0, dq4ds = 0, dq5ds = 0, dq6ds = 0;

	  occaUnroll(p_Np)
	  for(iint i=0;i<p_Np;++i){
	    const dfloat Drni = DrT[n+i*p_Np];
	    const dfloat Dsni = DsT[n+i*p_Np];
	    
	    // differentiate q components with respect to 'r' and 's'
	    dq1dr += Drni*s_q[es][0][i];
	    dq1ds += Dsni*s_q[es][0][i];
	    dq2dr += Drni*s_q[es][1][i];
	    dq2ds += Dsni*s_q[es][1][i];
	    dq3dr += Drni*s_q[es][2][i];
	    dq3ds += Dsni*s_q[es][2][i];
	    dq4dr += Drni*s_q[es][3][i];
	    dq4ds += Dsni*s_q[es][3][i];
	    dq5dr += Drni*s_q[es][4][i];
	    dq5ds += Dsni*s_q[es][4][i];
	    dq6dr += Drni*s_q[es][5][i];
	    dq6ds += Dsni*s_q[es][5][i];
	  }
	  
	  // chain rule
	  dfloat dq1dx = drdx*dq1dr + dsdx*dq1ds;
	  dfloat dq2dx = drdx*dq2dr + dsdx*dq2ds;
	  dfloat dq3dx = drdx*dq3dr + dsdx*dq3ds;
	  dfloat dq4dx = drdx*dq4dr + dsdx*dq4ds;
	  dfloat dq5dx = drdx*dq5dr + dsdx*dq5ds;
	  dfloat dq6dx = drdx*dq6dr + dsdx*dq6ds;
	  
	  dfloat dq1dy = drdy*dq1dr + dsdy*dq1ds;
	  dfloat dq2dy = drdy*dq2dr + dsdy*dq2ds;
	  dfloat dq3dy = drdy*dq3dr + dsdy*dq3ds;
	  dfloat dq4dy = drdy*dq4dr + dsdy*dq4ds;
	  dfloat dq5dy = drdy*dq5dr + dsdy*dq5ds;
	  dfloat dq6dy = drdy*dq6dr + dsdy*dq6ds;
	  
	  // transport operator
	  dfloat rhsq1 = -p_sqrtRT*(dq2dx + dq3dy);
	  dfloat rhsq2 = -p_sqrtRT*(dq1dx + p_sqrt2*dq5dx + dq4dy);	
	  dfloat rhsq3 = -p_sqrtRT*(dq4dx + dq1dy + p_sqrt2*dq6dy);	
	  dfloat rhsq4 = -p_sqrtRT*(dq3dx + dq2dy);		
	  dfloat rhsq5 = -p_sqrtRT*p_sqrt2*dq2dx;			
	  dfloat rhsq6 = -p_sqrtRT*p_sqrt2*dq3dy;                   

#if 0
	  // BGK relaxation approximation to the Boltzmann collision operator
	  rhsq4 -= p_tauInv*(s_q[es][3][n] - (s_q[es][1][n]*s_q[es][2][n]/s_q[es][0][n]));
	  rhsq5 -= p_tauInv*(s_q[es][4][n] - p_invsqrt2*(s_q[es][1][n]*s_q[es][1][n]/s_q[es][0][n]));
	  rhsq6 -= p_tauInv*(s_q[es][5][n] - p_invsqrt2*(s_q[es][2][n]*s_q[es][2][n]/s_q[es][0][n]));
#endif
	  // add mean flow forcing
	  rhsq2 += drampdt*p_q2bar;
	  rhsq3 += drampdt*p_q3bar;
	  rhsq4 += 2.f*ramp*drampdt*p_q4bar;
	  rhsq5 += 2.f*ramp*drampdt*p_q5bar;
	  rhsq6 += 2.f*ramp*drampdt*p_q6bar;

	  const int id = element*p_Np+n;	  
	  dfloat4 tmp;
	  tmp.x = rhsq1;
	  tmp.y = rhsq2;
	  tmp.z = rhsq3;
	  tmp.w = rhsq4;

	  rhsq[2*id] = tmp;

	  tmp.x = rhsq5;
	  tmp.y = rhsq6;
	  tmp.z = 0.f;
	  tmp.w = 0.f;

	  rhsq[2*id+1] = tmp;
	}
      }
    }
  }
}



kernel void boltzmannNonPmlVolume2Dbbdg(const iint Nelements,
					const iint * restrict elementIds,
					const dfloat ramp,
					const dfloat drampdt,
					const dfloat * restrict vgeo,
					const iint * restrict D1ids,
					const iint * restrict D2ids,
					const iint * restrict D3ids,
					const dfloat * restrict Dvals,		
					const dfloat4 * restrict q,
					dfloat4 * restrict rhsq){
  
  for(iint eo=0;eo<Nelements;eo+=p_NblockV;outer0){  // for all elements

    shared dfloat s_q[p_NblockV][p_Nfields][p_Np];
    exclusive iint element;

    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element

	iint e = eo+es; // element in block

	if(e<Nelements){
	  element = elementIds[e];

	  const iint id = element*p_Np+n;
	  dfloat4 qan = q[2*id];
	  dfloat4 qbn = q[2*id+1];

	  s_q[es][0][n] = qan.x;
	  s_q[es][1][n] = qan.y;
	  s_q[es][2][n] = qan.z;
	  s_q[es][3][n] = qan.w;

	  s_q[es][4][n] = qbn.x;
	  s_q[es][5][n] = qbn.y;

	}
      }
    }

    // make sure all node data is loaded into shared
    barrier(localMemFence);

    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element
	
	iint e = eo+es; // element in block
	if(e<Nelements){
	  
	  // prefetch geometric factors (constant on triangle)
	  const dfloat drdx = vgeo[element*p_Nvgeo + RXID];
	  const dfloat drdy = vgeo[element*p_Nvgeo + RYID];
	  const dfloat dsdx = vgeo[element*p_Nvgeo + SXID];
	  const dfloat dsdy = vgeo[element*p_Nvgeo + SYID];

	  // compute 'r' and 's' derivatives of (q_m) at node n
	  //dfloat dq1dr = 0, dq2dr = 0, dq3dr = 0, dq4dr = 0, dq5dr = 0, dq6dr = 0;
	  //dfloat dq1ds = 0, dq2ds = 0, dq3ds = 0, dq4ds = 0, dq5ds = 0, dq6ds = 0;

	  const iint D1i1 = D1ids[n];
	  const iint D2i1 = D2ids[n];
	  const iint D3i1 = D3ids[n];
	  const dfloat Dval1 = Dvals[n];
	  
	  const iint D1i2 = D1ids[n + p_Np];
	  const iint D2i2 = D2ids[n + p_Np];
	  const iint D3i2 = D3ids[n + p_Np];
	  const dfloat Dval2 = Dvals[n + p_Np];

	  const iint D1i3 = D1ids[n + 2*p_Np];
	  const iint D2i3 = D2ids[n + 2*p_Np];
	  const iint D3i3 = D3ids[n + 2*p_Np];	  
	  const dfloat Dval3 = Dvals[n + 2*p_Np];

	  const dfloat dq1dr = .5f*(Dval1*(s_q[es][0][D2i1] - s_q[es][0][D1i1]) +
				    Dval2*(s_q[es][0][D2i2] - s_q[es][0][D1i2]) +
				    Dval3*(s_q[es][0][D2i3] - s_q[es][0][D1i3]));
	  const dfloat dq1ds = .5f*(Dval1*(s_q[es][0][D3i1] - s_q[es][0][D1i1]) +
				    Dval2*(s_q[es][0][D3i2] - s_q[es][0][D1i2]) +
				    Dval3*(s_q[es][0][D3i3] - s_q[es][0][D1i3]));
	  
	  const dfloat dq2dr = .5f*(Dval1*(s_q[es][1][D2i1] - s_q[es][1][D1i1]) +
				    Dval2*(s_q[es][1][D2i2] - s_q[es][1][D1i2]) +
				    Dval3*(s_q[es][1][D2i3] - s_q[es][1][D1i3]));
	  const dfloat dq2ds = .5f*(Dval1*(s_q[es][1][D3i1] - s_q[es][1][D1i1]) +
				    Dval2*(s_q[es][1][D3i2] - s_q[es][1][D1i2]) +
				    Dval3*(s_q[es][1][D3i3] - s_q[es][1][D1i3]));
	  
	  const dfloat dq3dr = .5f*(Dval1*(s_q[es][2][D2i1] - s_q[es][2][D1i1]) +
				    Dval2*(s_q[es][2][D2i2] - s_q[es][2][D1i2]) +
				    Dval3*(s_q[es][2][D2i3] - s_q[es][2][D1i3]));
	  const dfloat dq3ds = .5f*(Dval1*(s_q[es][2][D3i1] - s_q[es][2][D1i1]) +
				    Dval2*(s_q[es][2][D3i2] - s_q[es][2][D1i2]) +
				    Dval3*(s_q[es][2][D3i3] - s_q[es][2][D1i3]));
	  
	  const dfloat dq4dr = .5f*(Dval1*(s_q[es][3][D2i1] - s_q[es][3][D1i1]) +
				    Dval2*(s_q[es][3][D2i2] - s_q[es][3][D1i2]) +
				    Dval3*(s_q[es][3][D2i3] - s_q[es][3][D1i3]));
	  const dfloat dq4ds = .5f*(Dval1*(s_q[es][3][D3i1] - s_q[es][3][D1i1]) +
				    Dval2*(s_q[es][3][D3i2] - s_q[es][3][D1i2]) +
				    Dval3*(s_q[es][3][D3i3] - s_q[es][3][D1i3]));
	  
	  const dfloat dq5dr = .5f*(Dval1*(s_q[es][4][D2i1] - s_q[es][4][D1i1]) +
				    Dval2*(s_q[es][4][D2i2] - s_q[es][4][D1i2]) +
				    Dval3*(s_q[es][4][D2i3] - s_q[es][4][D1i3]));
	  const dfloat dq5ds = .5f*(Dval1*(s_q[es][4][D3i1] - s_q[es][4][D1i1]) +
				    Dval2*(s_q[es][4][D3i2] - s_q[es][4][D1i2]) +
				    Dval3*(s_q[es][4][D3i3] - s_q[es][4][D1i3])); 

	  const dfloat dq6dr = .5f*(Dval1*(s_q[es][5][D2i1] - s_q[es][5][D1i1]) +
				    Dval2*(s_q[es][5][D2i2] - s_q[es][5][D1i2]) +
				    Dval3*(s_q[es][5][D2i3] - s_q[es][5][D1i3]));
	  const dfloat dq6ds = .5f*(Dval1*(s_q[es][5][D3i1] - s_q[es][5][D1i1]) +
				    Dval2*(s_q[es][5][D3i2] - s_q[es][5][D1i2]) +
				    Dval3*(s_q[es][5][D3i3] - s_q[es][5][D1i3])); 
	  
	  // chain rule
	  dfloat dq1dx = drdx*dq1dr + dsdx*dq1ds;
	  dfloat dq2dx = drdx*dq2dr + dsdx*dq2ds;
	  dfloat dq3dx = drdx*dq3dr + dsdx*dq3ds;
	  dfloat dq4dx = drdx*dq4dr + dsdx*dq4ds;
	  dfloat dq5dx = drdx*dq5dr + dsdx*dq5ds;
	  dfloat dq6dx = drdx*dq6dr + dsdx*dq6ds;
	  
	  dfloat dq1dy = drdy*dq1dr + dsdy*dq1ds;
	  dfloat dq2dy = drdy*dq2dr + dsdy*dq2ds;
	  dfloat dq3dy = drdy*dq3dr + dsdy*dq3ds;
	  dfloat dq4dy = drdy*dq4dr + dsdy*dq4ds;
	  dfloat dq5dy = drdy*dq5dr + dsdy*dq5ds;
	  dfloat dq6dy = drdy*dq6dr + dsdy*dq6ds;
	  
	  // transport operator
	  dfloat rhsq1 = -p_sqrtRT*(dq2dx + dq3dy);
	  dfloat rhsq2 = -p_sqrtRT*(dq1dx + p_sqrt2*dq5dx + dq4dy);	
	  dfloat rhsq3 = -p_sqrtRT*(dq4dx + dq1dy + p_sqrt2*dq6dy);	
	  dfloat rhsq4 = -p_sqrtRT*(dq3dx + dq2dy);		
	  dfloat rhsq5 = -p_sqrtRT*p_sqrt2*dq2dx;			
	  dfloat rhsq6 = -p_sqrtRT*p_sqrt2*dq3dy;                   

#if 0
	  // BGK relaxation approximation to the Boltzmann collision operator
	  rhsq4 -= p_tauInv*(s_q[es][3][n] - (s_q[es][1][n]*s_q[es][2][n]/s_q[es][0][n]));
	  rhsq5 -= p_tauInv*(s_q[es][4][n] - p_invsqrt2*(s_q[es][1][n]*s_q[es][1][n]/s_q[es][0][n]));
	  rhsq6 -= p_tauInv*(s_q[es][5][n] - p_invsqrt2*(s_q[es][2][n]*s_q[es][2][n]/s_q[es][0][n]));
#endif
	  // add mean flow forcing
	  rhsq2 += drampdt*p_q2bar;
	  rhsq3 += drampdt*p_q3bar;
	  rhsq4 += 2.f*ramp*drampdt*p_q4bar;
	  rhsq5 += 2.f*ramp*drampdt*p_q5bar;
	  rhsq6 += 2.f*ramp*drampdt*p_q6bar;

	  const int id = element*p_Np+n;	  
	  dfloat4 tmp;
	  tmp.x = rhsq1;
	  tmp.y = rhsq2;
	  tmp.z = rhsq3;
	  tmp.w = rhsq4;

	  rhsq[2*id] = tmp;

	  tmp.x = rhsq5;
	  tmp.y = rhsq6;
	  tmp.z = 0.f;
	  tmp.w = 0.f;

	  rhsq[2*id+1] = tmp;
	}
      }
    }
  }
}

