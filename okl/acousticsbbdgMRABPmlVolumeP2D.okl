
kernel void acousticsbbdgMRABPmlVolumeP2D(const iint pmlNelements,
          const iint * restrict pmlElementIds,
          const iint * restrict pmlIds,
          const dfloat * restrict vgeo,
          const iint * restrict D1ids,
          const iint * restrict D2ids,
          const iint * restrict D3ids,
          const dfloat * restrict Dvals,
          const dfloat * restrict pmlSigmaX,
          const dfloat * restrict pmlSigmaY,
          const dfloat * restrict cubInterp,
          const dfloat * restrict cubProject,
          const dfloat * restrict q,
          const dfloat * restrict pmlq,
          dfloat * restrict rhsq,
          dfloat * restrict pmlrhsq,
          const iint rhsShift){

  for(iint eo=0;eo<pmlNelements;eo+=p_NblockCub;outer0){  // for all elements

    shared dfloat s_u[p_NblockCub][p_cubNp];
    shared dfloat s_v[p_NblockCub][p_cubNp];
    shared dfloat s_p[p_NblockCub][p_Np];

    shared dfloat s_px[p_NblockCub][p_cubNp];
    shared dfloat s_py[p_NblockCub][p_cubNp];

    exclusive iint e, pmlId;
    exclusive dfloat r_u, r_v, r_px, r_py;

    for(iint es=0;es<p_NblockCub;++es;inner1){// for all elements in block
      for(iint n=0;n<p_cubNp;++n;inner0){     // for all nodes in this element

        iint et = eo+es; // element in block
        if(et<pmlNelements){
          e = pmlElementIds[et];
          pmlId = pmlIds[et];
        }
        if((et<pmlNelements)&&(n<p_Np)){
          const iint id = p_Nfields*(e*p_NpMax + n);
          s_u[es][n] = q[id+0];
          s_v[es][n] = q[id+1];
          s_p[es][n] = q[id+2];

          const iint pid = p_pmlNfields*(pmlId*p_NpMax + n);
          s_px[es][n] = pmlq[pid+0];
          s_py[es][n] = pmlq[pid+1];
        }
      }
    }

    // make sure all node data is loaded into shared
    barrier(localMemFence);

    for(iint es=0;es<p_NblockCub;++es;inner1){// for all elements in block
      for(iint n=0;n<p_cubNp;++n;inner0){

        iint et = eo+es; // element in block
        if((et<pmlNelements)&&(n<p_Np)){
          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
          const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];

          // compute 'r' and 's' derivatives of (q_m) at node n
          const iint D1i1 = D1ids[n];
          const iint D2i1 = D2ids[n];
          const iint D3i1 = D3ids[n];
          const dfloat Dval1 = Dvals[n];

          const iint D1i2 = D1ids[n+p_Np];
          const iint D2i2 = D2ids[n+p_Np];
          const iint D3i2 = D3ids[n+p_Np];
          const dfloat Dval2 = Dvals[n+p_Np];

          const iint D1i3 = D1ids[n+2*p_Np];
          const iint D2i3 = D2ids[n+2*p_Np];
          const iint D3i3 = D3ids[n+2*p_Np];
          const dfloat Dval3 = Dvals[n+2*p_Np];

          const dfloat dudr = .5f*(Dval1*(s_u[es][D2i1] - s_u[es][D1i1]) +
                  Dval2*(s_u[es][D2i2] - s_u[es][D1i2]) +
                  Dval3*(s_u[es][D2i3] - s_u[es][D1i3]));
          const dfloat duds = .5f*(Dval1*(s_u[es][D3i1] - s_u[es][D1i1]) +
                  Dval2*(s_u[es][D3i2] - s_u[es][D1i2]) +
                  Dval3*(s_u[es][D3i3] - s_u[es][D1i3]));

          const dfloat dvdr = .5f*(Dval1*(s_v[es][D2i1] - s_v[es][D1i1]) +
                  Dval2*(s_v[es][D2i2] - s_v[es][D1i2]) +
                  Dval3*(s_v[es][D2i3] - s_v[es][D1i3]));
          const dfloat dvds = .5f*(Dval1*(s_v[es][D3i1] - s_v[es][D1i1]) +
                  Dval2*(s_v[es][D3i2] - s_v[es][D1i2]) +
                  Dval3*(s_v[es][D3i3] - s_v[es][D1i3]));

          const dfloat dpdr = .5f*(Dval1*(s_p[es][D2i1] - s_p[es][D1i1]) +
                  Dval2*(s_p[es][D2i2] - s_p[es][D1i2]) +
                  Dval3*(s_p[es][D2i3] - s_p[es][D1i3]));
          const dfloat dpds = .5f*(Dval1*(s_p[es][D3i1] - s_p[es][D1i1]) +
                  Dval2*(s_p[es][D3i2] - s_p[es][D1i2]) +
                  Dval3*(s_p[es][D3i3] - s_p[es][D1i3]));

          // chain rule
          dfloat dudx = drdx*dudr + dsdx*duds;
          dfloat dvdy = drdy*dvdr + dsdy*dvds;
          dfloat dpdx = drdx*dpdr + dsdx*dpds;
          dfloat dpdy = drdy*dpdr + dsdy*dpds;

          const iint id = p_Nfields*(e*p_NpMax + n);
          const iint rhsId = 3*id + p_Nfields*rhsShift;
          const iint pmlrhsId = 3*p_pmlNfields*(pmlId*p_NpMax + n) + p_pmlNfields*rhsShift;

          rhsq[rhsId+0] = -dpdx;
          rhsq[rhsId+1] = -dpdy;

          pmlrhsq[pmlrhsId+0] = -dudx;
          pmlrhsq[pmlrhsId+1] = -dvdy;
        }
      }
    }

    barrier(localMemFence);

    //Interpolate to cubature nodes
    for(iint es=0;es<p_NblockCub;++es;inner1){// for all elements in block
      for(iint n=0;n<p_cubNp;++n;inner0){
        iint et = eo+es; // element in block
        if(et<pmlNelements){
          // Prefetch sigmas
          const dfloat sigmax = pmlSigmaX[n + pmlId*p_cubNpMax];
          const dfloat sigmay = pmlSigmaY[n + pmlId*p_cubNpMax];

          r_u = 0.f;
          r_v = 0.f;
          r_px = 0.f;
          r_py = 0.f;
          for (int i=0;i<p_Np;++i){
            r_u += cubInterp[n + i*p_cubNp] * s_u[es][i];
            r_v += cubInterp[n + i*p_cubNp] * s_v[es][i];
            r_px += cubInterp[n + i*p_cubNp] * s_px[es][i];
            r_py += cubInterp[n + i*p_cubNp] * s_py[es][i];
          }
          r_u *= -sigmax;
          r_v *= -sigmay;
          r_px *= -sigmax;
          r_py *= -sigmay;
        }
      }
    }
    barrier(localMemFence);

    //write back to shared
    for(iint es=0;es<p_NblockCub;++es;inner1){// for all elements in block
      for(iint n=0;n<p_cubNp;++n;inner0){
        iint et = eo+es; // element in block
        if(et<pmlNelements){
          s_u[es][n] = r_u;
          s_v[es][n] = r_v;
          s_px[es][n] = r_px;
          s_py[es][n] = r_py;
        }
      }
    }
    barrier(localMemFence);

    // Project result back down
    for(iint es=0;es<p_NblockCub;++es;inner1){// for all elements in block
      for(iint n=0;n<p_cubNp;++n;inner0){
        iint et = eo+es; // element in block
        if((et<pmlNelements)&&(n<p_Np)){
          dfloat sigmaxu = 0.f;
          dfloat sigmayv = 0.f;
          dfloat sigmaxpx = 0.f;
          dfloat sigmaypy = 0.f;
          for (int i=0;i<p_cubNp;++i){
            sigmaxu += cubProject[n + i*p_Np] * s_u[es][i];
            sigmayv += cubProject[n + i*p_Np] * s_v[es][i];
            sigmaxpx += cubProject[n + i*p_Np] * s_px[es][i];
            sigmaypy += cubProject[n + i*p_Np] * s_py[es][i];
          }

          const iint id = p_Nfields*(e*p_NpMax + n);
          const iint rhsId = 3*id + p_Nfields*rhsShift;
          const iint pmlrhsId = 3*p_pmlNfields*(pmlId*p_NpMax + n) + p_pmlNfields*rhsShift;

          rhsq[rhsId+0] += sigmaxu;
          rhsq[rhsId+1] += sigmayv;

          pmlrhsq[pmlrhsId+0] += sigmaxpx;
          pmlrhsq[pmlrhsId+1] += sigmaypy;
        }
      }
    }
  }
}
