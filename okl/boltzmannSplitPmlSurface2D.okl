
void upwind1D(const dfloat nx, const dfloat ny,
              const dfloat q1M, const dfloat q2M, const dfloat q3M,
	      const dfloat q4M, const dfloat q5M, const dfloat q6M,
              const dfloat q1B, const dfloat q2B, const dfloat q3B,
	      const dfloat q4B, const dfloat q5B, const dfloat q6B,
              dfloat * restrict q1P, dfloat * restrict q2P, dfloat * restrict q3P,
	      dfloat * restrict q4P, dfloat * restrict q5P, dfloat * restrict q6P){
  
  *q1P = 0.5f*(q1B + q1M) - p_isq12*(nx*(q2B-q2M) + ny*(q3B-q3M));
  *q2P = 0.5f*(q2B + q2M) - p_isq12*(nx*(q1B-q1M)) - p_isq6*nx*(q5B-q5M) - 0.5f*ny*(q4B-q4M);
  *q3P = 0.5f*(q3B + q3M) - p_isq12*(ny*(q1B-q1M)) - p_isq6*ny*(q6B-q6M) - 0.5f*nx*(q4B-q4M);
  *q4P = 0.5f*(q4B + q4M) - 0.5f*nx*(q3B-q3M) - 0.5f*ny*(q2B-q2M);
  *q5P = 0.5f*(q5B + q5M) - p_isq6*nx*(q2B-q2M);
  *q6P = 0.5f*(q6B + q6M) - p_isq6*ny*(q3B-q3M);
  
}


void boundaryConditions2D(const int bc,
			  const dfloat  t, const dfloat  x, const dfloat  y,
			  const dfloat  nx, const dfloat  ny,
			  const dfloat ramp,
			  const dfloat  q1M, const dfloat  q2M, const dfloat  q3M,
			  const dfloat  q4M, const dfloat  q5M, const dfloat  q6M,
			  dfloat * restrict q1B, dfloat * restrict q2B, dfloat * restrict q3B,
			  dfloat * restrict q4B, dfloat * restrict q5B, dfloat * restrict q6B){

  if(bc==1){
    *q1B = q1M; 
    *q2B = -q2M;
    *q3B = -q3M;
    *q4B = q4M;
    *q5B = q5M;
    *q6B = q6M;
  }
  if(bc>1){ // wall for non-mean flow
    *q1B = 2.f*p_q1bar - q1M; 
    *q2B = 2.f*ramp*p_q2bar - q2M; 
    *q3B = 2.f*ramp*p_q3bar - q3M; 
    *q4B = 2.f*ramp*ramp*p_q4bar - q4M;
    *q5B = 2.f*ramp*ramp*p_q5bar - q5M;
    *q6B = 2.f*ramp*ramp*p_q6bar - q6M;
  }
}



// batch process elements
kernel void boltzmannSplitPmlSurface2D(const int Nelements,
				       const int * restrict elementIds,
				       const dfloat * restrict sgeo,
				       const dfloat * restrict LIFTT,
				       const int   * restrict vmapM,
				       const int   * restrict vmapP,
				       const int   * restrict EToB,
				       const dfloat time,
				       const dfloat * restrict x,
				       const dfloat * restrict y,
				       const dfloat ramp,
				       const dfloat4 * restrict q,
				       dfloat       * restrict rhspmlqx,
				       dfloat       * restrict rhspmlqy){
  
  // for all elements
  for(int eo=0;eo<Nelements;eo+=p_NblockS;outer0){
    
    // shared storage for flux terms
    shared dfloat s_nxdq1[p_NblockS][p_maxNodes];
    shared dfloat s_nxdq2[p_NblockS][p_maxNodes];
    shared dfloat s_nxdq3[p_NblockS][p_maxNodes];
    shared dfloat s_nxdq4[p_NblockS][p_maxNodes];
    shared dfloat s_nxdq5[p_NblockS][p_maxNodes];
    shared dfloat s_nxdq6[p_NblockS][p_maxNodes];

    shared dfloat s_nydq1[p_NblockS][p_maxNodes];
    shared dfloat s_nydq2[p_NblockS][p_maxNodes];
    shared dfloat s_nydq3[p_NblockS][p_maxNodes];
    shared dfloat s_nydq4[p_NblockS][p_maxNodes];
    shared dfloat s_nydq5[p_NblockS][p_maxNodes];
    shared dfloat s_nydq6[p_NblockS][p_maxNodes];

    exclusive int element;

    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int n=0;n<p_maxNodes;++n;inner0){ // maxNodes = max(Nfp*Nfaces,Np)
	int e = eo + es;
	if(e<Nelements){
	  element = elementIds[e];

	  if(n<p_NfacesNfp){
	    // find face that owns this node
	    const int face = n/p_Nfp;
	  
	    // load surface geofactors for this face
	    const int sid = p_Nsgeo*(element*p_Nfaces+face);
	    const dfloat nx = sgeo[sid+0];
	    const dfloat ny = sgeo[sid+1];
	    const dfloat sJ = sgeo[sid+2];
	    const dfloat invJ = sgeo[sid+3];

	    // indices of negative and positive traces of face node
	    const int id  = element*p_Nfp*p_Nfaces + n;
	    int idM = vmapM[id];
	    int idP = vmapP[id];

	    if(idP<0) idP = idM;
    
	    // load negative and positive trace node values of q
	    const dfloat4 qMa = q[2*idM], qMb = q[2*idM+1];
	    const dfloat4 qPa = q[2*idP], qPb = q[2*idP+1];

	    const dfloat q1M = qMa.x, q2M = qMa.y, q3M = qMa.z, q4M = qMa.w, q5M = qMb.x, q6M = qMb.y;
	    dfloat q1P = qPa.x, q2P = qPa.y, q3P = qPa.z, q4P = qPa.w, q5P = qPb.x, q6P = qPb.y;

	    // apply boundary condition
	    int bc = EToB[face+p_Nfaces*element];
	    if(bc>0)
	      boundaryConditions2D(bc, time, x[idM], y[idM], nx, ny, ramp,
				   q1M, q2M, q3M, q4M, q5M, q6M,
				   &q1P, &q2P, &q3P, &q4P, &q5P, &q6P);

	    // compute (q^*)
	    dfloat q1U, q2U, q3U, q4U, q5U, q6U;		    
	    
	    upwind1D(nx, ny, q1M, q2M, q3M, q4M, q5M, q6M, q1P, q2P, q3P, q4P, q5P, q6P, &q1U, &q2U, &q3U, &q4U, &q5U, &q6U);
	      // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
	    const dfloat sc = invJ*sJ;

	    s_nxdq1[es][n] = sc*(nx*(q1U-q1M));
	    s_nxdq2[es][n] = sc*(nx*(q2U-q2M));
	    s_nxdq3[es][n] = sc*(nx*(q3U-q3M));
	    s_nxdq4[es][n] = sc*(nx*(q4U-q4M));
	    s_nxdq5[es][n] = sc*(nx*(q5U-q5M));
	    s_nxdq6[es][n] = sc*(nx*(q6U-q6M));
	    
	    s_nydq1[es][n] = sc*(ny*(q1U-q1M));
	    s_nydq2[es][n] = sc*(ny*(q2U-q2M));
	    s_nydq3[es][n] = sc*(ny*(q3U-q3M));
	    s_nydq4[es][n] = sc*(ny*(q4U-q4M));
	    s_nydq5[es][n] = sc*(ny*(q5U-q5M));
	    s_nydq6[es][n] = sc*(ny*(q6U-q6M));
	  }
	}
      }
    }
    
    // wait for all shared memory writes of the previous inner loop to complete
    barrier(localMemFence);

#if 1
    // for each node in the element
    for(int es=0;es<p_NblockS;++es;inner1){
      for(int n=0;n<p_maxNodes;++n;inner0){
	const int e = eo + es;
	if(e<Nelements){
	  if(n<p_Np){
	    const int id = p_Np*element + n;
	    
	    // load rhs data from volume fluxes
	    dfloat Lnxdq1 = 0.f, Lnxdq2 = 0.f, Lnxdq3 = 0.f, Lnxdq4 = 0.f, Lnxdq5 = 0.f, Lnxdq6 = 0.f;
	    dfloat Lnydq1 = 0.f, Lnydq2 = 0.f, Lnydq3 = 0.f, Lnydq4 = 0.f, Lnydq5 = 0.f, Lnydq6 = 0.f;
	    
	    // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
	    occaUnroll(p_Nfaces)
	    for(int m=0;m<p_NfacesNfp;++m){
	      const dfloat L = LIFTT[n+m*p_Np];
	      Lnxdq1 += L*s_nxdq1[es][m];
	      Lnxdq2 += L*s_nxdq2[es][m];
	      Lnxdq3 += L*s_nxdq3[es][m];
	      Lnxdq4 += L*s_nxdq4[es][m];
	      Lnxdq5 += L*s_nxdq5[es][m];
	      Lnxdq6 += L*s_nxdq6[es][m];
	      
	      Lnydq1 += L*s_nydq1[es][m];
	      Lnydq2 += L*s_nydq2[es][m];
	      Lnydq3 += L*s_nydq3[es][m];
	      Lnydq4 += L*s_nydq4[es][m];
	      Lnydq5 += L*s_nydq5[es][m];
	      Lnydq6 += L*s_nydq6[es][m];
	    }

	    const int base = element*p_Np*p_Nfields+n;
	    rhspmlqx[base+0*p_Np] -= p_sqrtRT*(Lnxdq2);
	    rhspmlqx[base+1*p_Np] -= p_sqrtRT*(Lnxdq1+p_sqrt2*Lnxdq5);
	    rhspmlqx[base+2*p_Np] -= p_sqrtRT*(Lnxdq4);
	    rhspmlqx[base+3*p_Np] -= p_sqrtRT*(Lnxdq3);
	    rhspmlqx[base+4*p_Np] -= p_sqrtRT*(p_sqrt2*Lnxdq2);
	    rhspmlqx[base+5*p_Np] -= 0.f;

	    rhspmlqy[base+0*p_Np] -= p_sqrtRT*(Lnydq3);
	    rhspmlqy[base+1*p_Np] -= p_sqrtRT*(Lnydq4);
	    rhspmlqy[base+2*p_Np] -= p_sqrtRT*(Lnydq1+p_sqrt2*Lnydq6);
	    rhspmlqy[base+3*p_Np] -= p_sqrtRT*(Lnydq2);
	    rhspmlqy[base+4*p_Np] -= 0.f;
	    rhspmlqy[base+5*p_Np] -= p_sqrtRT*(p_sqrt2*Lnydq3);
	  }
	}
      }
    }
#endif
  }
}

