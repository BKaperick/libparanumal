
kernel void acousticsMRABUpdate2D(const iint Nelements,
           const iint   * restrict elementIds,
           const dfloat dt, 
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           const dfloat t,
           const dfloat * restrict x,
           const dfloat * restrict y,
           const dfloat * restrict invVB1D,
           const iint   * restrict EToB,
           const iint   * restrict vmapM,
           const dfloat * restrict rhsq,
           dfloat * restrict q,
           dfloat * restrict fQM,
           dfloat * restrict fQP,
           const iint   rhsShift){
  
  for(iint et=0;et<Nelements;++et;outer0){  // for all elements
    shared dfloat s_q[p_Np*p_Nfields];
    shared dfloat s_sourceu[p_Nfp*p_Nfaces];
    shared dfloat s_sourcev[p_Nfp*p_Nfaces];
    shared dfloat s_sourcep[p_Nfp*p_Nfaces];

    for(iint n=0; n < p_maxNodes; ++n; inner0){  
      if (n < p_Np){
        const iint e = elementIds[et];
        const iint id = p_Nfields*(e*p_Np + n);

        const iint rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
        const iint rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
        const iint rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;

        for (int fld = 0; fld < p_Nfields; ++fld) 
          s_q[p_Nfields*n+fld] = q[id+fld] + dt*(a1*rhsq[rhsId1+fld] + a2*rhsq[rhsId2+fld] + a3*rhsq[rhsId3+fld]);
      }
    }
    barrier(localMemFence);

    for(iint n=0; n < p_maxNodes; ++n; inner0){  
      const iint e = elementIds[et];
      
      //write update
      if (n < p_Np){
        const iint id = p_Nfields*(e*p_Np + n);

        for (int fld = 0; fld < p_Nfields; ++fld) 
          q[id+fld] = s_q[p_Nfields*n+fld];
      }

      //compute source injection if present
      if (n < p_Nfp*p_Nfaces){
        const iint e = elementIds[et];
        const int f  = n/p_Nfp; //face number

        int bc = EToB[e*p_Nfaces+f];
        if ((bc==-10)||(bc==-11)) { //check if this is a special source injection face
          const iint id = n + e*p_Nfaces*p_Nfp;
          const iint idM = vmapM[id];

          //get the nodal values of the incident field along the trace
          const dfloat X = x[idM];
          const dfloat Y = y[idM];

          const dfloat c = sqrt(p_sourceC2);

          dfloat u,v,p;

          acousticsPointSource2D((X-p_sourceX0), (Y-p_sourceY0), (t+p_sourceT0), p_sourceFreq, c, u, v, p);

          s_sourceu[n] = u;
          s_sourcev[n] = v;
          s_sourcep[n] = p;
        }
      }
    }
    barrier(localMemFence);

    for(iint n=0; n < p_maxNodes; ++n; inner0){  
      if (n < p_Nfp*p_Nfaces){
        const iint e = elementIds[et];
        const int f  = n/p_Nfp; //face number
        const int id  = n%p_Nfp; //local node number

        dfloat sourceu = 0.f;
        dfloat sourcev = 0.f;
        dfloat sourcep = 0.f;

        dfloat s = 0.f;

        int bc = EToB[e*p_Nfaces+f];
        if ((bc==-10)||(bc==-11)) { //check if this is a special source injection face
          if (bc==-10) s= 1.f;
          if (bc==-11) s=-1.f;

          occaUnroll(p_Nfp)
          for (int m=0;m<p_Nfp;m++) {
            sourceu += invVB1D[id + p_Nfp*m]*s_sourceu[f*p_Nfp+m];
            sourcev += invVB1D[id + p_Nfp*m]*s_sourcev[f*p_Nfp+m];
            sourcep += invVB1D[id + p_Nfp*m]*s_sourcep[f*p_Nfp+m];
          }
        }

        const iint iid = e*p_Nfp*p_Nfaces + n;
        const iint qidM = p_Nfields*(vmapM[iid]-e*p_Np);
        const iint qid  = p_Nfields*iid; 

        fQP[qid+0] = s_q[qidM+0] + s*sourceu;
        fQP[qid+1] = s_q[qidM+1] + s*sourcev;
        fQP[qid+2] = s_q[qidM+2] + s*sourcep;
        fQM[qid+0] = s_q[qidM+0];
        fQM[qid+1] = s_q[qidM+1];
        fQM[qid+2] = s_q[qidM+2];      
      }
    }
  }
}

kernel void acousticsMRABTraceUpdate2D(const iint Nelements,
           const iint   * restrict elementIds,
           const dfloat dt, 
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           const dfloat t,
           const dfloat * restrict x,
           const dfloat * restrict y,
           const dfloat * restrict invVB1D,
           const iint   * restrict EToB,
           const iint   * restrict vmapM,
           const dfloat * restrict rhsq,
           const dfloat * restrict q,
           dfloat * restrict fQM,
           dfloat * restrict fQP,
           const iint   rhsShift){
  
  for(iint et=0;et<Nelements;++et;outer0){  // for all elements
    shared dfloat s_q[p_Np*p_Nfields];
    shared dfloat s_sourceu[p_Nfp*p_Nfaces];
    shared dfloat s_sourcev[p_Nfp*p_Nfaces];
    shared dfloat s_sourcep[p_Nfp*p_Nfaces];

    for(iint n=0; n < p_maxNodes; ++n; inner0){  
      if (n < p_Np){
        const iint e = elementIds[et];
        const iint id = p_Nfields*(e*p_Np + n);

        const iint rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
        const iint rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
        const iint rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;

        for (int fld = 0; fld < p_Nfields; ++fld) 
          s_q[p_Nfields*n+fld] = q[id+fld] + dt*(a1*rhsq[rhsId1+fld] + a2*rhsq[rhsId2+fld] + a3*rhsq[rhsId3+fld]);
      }
    }
    barrier(localMemFence);

    //compute source injection if present
    for(iint n=0; n < p_maxNodes; ++n; inner0){  
      if (n < p_Nfp*p_Nfaces){
        const iint e = elementIds[et];
        const int f  = n/p_Nfp; //face number

        int bc = EToB[e*p_Nfaces+f];
        if ((bc==-10)||(bc==-11)) { //check if this is a special source injection face
          const iint id = n + e*p_Nfaces*p_Nfp;
          const iint idM = vmapM[id];

          //get the nodal values of the incident field along the trace
          const dfloat X = x[idM];
          const dfloat Y = y[idM];

          const dfloat c = sqrt(p_sourceC2);

          dfloat u,v,p;

          acousticsPointSource2D((X-p_sourceX0), (Y-p_sourceY0), (t+p_sourceT0), p_sourceFreq, c, u, v, p);

          s_sourceu[n] = u;
          s_sourcev[n] = v;
          s_sourcep[n] = p;
        }
      }
    }
    barrier(localMemFence);

    for(iint n=0; n < p_maxNodes; ++n; inner0){  
      if (n < p_Nfp*p_Nfaces){
        const iint e = elementIds[et];
        const int f  = n/p_Nfp; //face number
        const int id  = n%p_Nfp; //local node number

        dfloat sourceu = 0.f;
        dfloat sourcev = 0.f;
        dfloat sourcep = 0.f;

        dfloat s = 0.f;

        int bc = EToB[e*p_Nfaces+f];
        if ((bc==-10)||(bc==-11)) { //check if this is a special source injection face
          if (bc==-10) s= 1.f;
          if (bc==-11) s=-1.f;

          occaUnroll(p_Nfp)
          for (int m=0;m<p_Nfp;m++) {
            sourceu += invVB1D[id + p_Nfp*m]*s_sourceu[f*p_Nfp+m];
            sourcev += invVB1D[id + p_Nfp*m]*s_sourcev[f*p_Nfp+m];
            sourcep += invVB1D[id + p_Nfp*m]*s_sourcep[f*p_Nfp+m];
          }
        }

        const iint iid = e*p_Nfp*p_Nfaces + n;
        const iint qidM = p_Nfields*(vmapM[iid]-e*p_Np);
        const iint qid  = p_Nfields*iid; 

        fQP[qid+0] = s_q[qidM+0] + s*sourceu;
        fQP[qid+1] = s_q[qidM+1] + s*sourcev;
        fQP[qid+2] = s_q[qidM+2] + s*sourcep;
        fQM[qid+0] = s_q[qidM+0];
        fQM[qid+1] = s_q[qidM+1];
        fQM[qid+2] = s_q[qidM+2];      
      }
    }
  }
}

kernel void acousticsMRABUpdate2D_wadg(const iint Nelements,
           const iint   * restrict elementIds,
           const dfloat dt, 
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           const dfloat * restrict cubInterp,
           const dfloat * restrict cubProject,
           const dfloat * restrict c2,
           const dfloat t,
           const dfloat * restrict x,
           const dfloat * restrict y,
           const dfloat * restrict invVB1D,
           const iint   * restrict EToB,
           const iint   * restrict vmapM,
           dfloat * restrict rhsq,
           dfloat * restrict q,
           dfloat * restrict fQM,
           dfloat * restrict fQP,
           const iint   rhsShift){
  
  for(iint et=0;et<Nelements;++et;outer0){  // for all elements
    shared dfloat s_q[p_Np*p_Nfields];

    shared dfloat s_p[p_cubNp];
    exclusive dfloat r_p;

    shared dfloat s_sourceu[p_Nfp*p_Nfaces];
    shared dfloat s_sourcev[p_Nfp*p_Nfaces];
    shared dfloat s_sourcep[p_Nfp*p_Nfaces];

    for(iint n=0; n < p_maxCubNodes; ++n; inner0){  
      if (n < p_Np){
        const iint e = elementIds[et];
        const iint id = p_Nfields*(e*p_Np + n);
        const iint rhsId = 3*id + rhsShift*p_Nfields;
        s_p[n] = rhsq[rhsId + 2]; // extract pressure rhs
      }

      // Initialize register variable
      r_p = 0.f;
    }
    barrier(localMemFence);

    // Interpolate rhs to cubature nodes
    for(iint n=0;n<p_maxCubNodes;++n;inner0){
      if (n<p_cubNp) {
        const iint e = elementIds[et];
        // Prefetch value of c2
        const dfloat c2n = c2[n + e*p_cubNp];
        
        dfloat val = 0.f;
        for (int i=0;i<p_Np;++i){
          val += cubInterp[n + i*p_cubNp] * s_p[i];
        }

        // Multiply result by wavespeed c2 at cubature node
        r_p = val * c2n;
      }
    }
    barrier(localMemFence);

    // Move temporary result back to shared memory
    for(iint n=0;n<p_maxCubNodes;++n;inner0){
      if (n<p_cubNp) {
        s_p[n] = r_p;
      }
    }
    barrier(localMemFence);
    
    // Increment solution, project result back down
    for(iint n=0;n<p_maxCubNodes;++n;inner0){
      if (n < p_Np){
        const iint e = elementIds[et];
        // Extract velocity rhs
        const iint id = p_Nfields*(e*p_Np + n);
        const iint rhsId = 3*id + rhsShift*p_Nfields;
        dfloat rhsqn[p_Nfields];
        rhsqn[0] = rhsq[rhsId + 0];
        rhsqn[1] = rhsq[rhsId + 1];  
        
        // Project scaled rhs down
        dfloat rhsp = 0.f;
        for (int i=0;i<p_cubNp;++i){
          rhsp += cubProject[n + i*p_Np] * s_p[i];
        }
        rhsqn[2] = rhsp;

        const iint rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
        const iint rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
        const iint rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;

        // Increment solutions (saving rhs)
        for (int fld = 0; fld < p_Nfields; ++fld) {
          s_q[p_Nfields*n+fld] = q[id+fld] + dt*(a1*rhsqn[fld] + a2*rhsq[rhsId2+fld] + a3*rhsq[rhsId3+fld]);
          rhsq[rhsId+fld] = rhsqn[fld];
        }
      }      
    }
    barrier(localMemFence);

    //write update
    for(iint n=0; n < p_maxCubNodes; ++n; inner0){  
      if (n < p_Np){
        const iint e = elementIds[et];
        const iint id = p_Nfields*(e*p_Np + n);

        for (int fld = 0; fld < p_Nfields; ++fld) 
          q[id+fld] = s_q[p_Nfields*n+fld];
      }
  
      //compute source injection if present
      if (n < p_Nfp*p_Nfaces){
        const iint e = elementIds[et];
        const int f  = n/p_Nfp; //face number

        int bc = EToB[e*p_Nfaces+f];
        if ((bc==-10)||(bc==-11)) { //check if this is a special source injection face
          const iint id = n + e*p_Nfaces*p_Nfp;
          const iint idM = vmapM[id];

          //get the nodal values of the incident field along the trace
          const dfloat X = x[idM];
          const dfloat Y = y[idM];

          const dfloat c = sqrt(p_sourceC2);

          dfloat u,v,p;

          acousticsPointSource2D((X-p_sourceX0), (Y-p_sourceY0), (t+p_sourceT0), p_sourceFreq, c, u, v, p);

          s_sourceu[n] = u;
          s_sourcev[n] = v;
          s_sourcep[n] = p;
        }
      }
    }
    barrier(localMemFence);

    for(iint n=0; n < p_maxCubNodes; ++n; inner0){  
      if (n < p_Nfp*p_Nfaces){
        const iint e = elementIds[et];
        const int f  = n/p_Nfp; //face number
        const int id  = n%p_Nfp; //local node number

        dfloat sourceu = 0.f;
        dfloat sourcev = 0.f;
        dfloat sourcep = 0.f;

        dfloat s = 0.f;

        int bc = EToB[e*p_Nfaces+f];
        if ((bc==-10)||(bc==-11)) { //check if this is a special source injection face
          if (bc==-10) s= 1.f;
          if (bc==-11) s=-1.f;

          occaUnroll(p_Nfp)
          for (int m=0;m<p_Nfp;m++) {
            sourceu += invVB1D[id + p_Nfp*m]*s_sourceu[f*p_Nfp+m];
            sourcev += invVB1D[id + p_Nfp*m]*s_sourcev[f*p_Nfp+m];
            sourcep += invVB1D[id + p_Nfp*m]*s_sourcep[f*p_Nfp+m];
          }
        }

        const iint iid = e*p_Nfp*p_Nfaces + n;
        const iint qidM = p_Nfields*(vmapM[iid]-e*p_Np);
        const iint qid  = p_Nfields*iid; 

        fQP[qid+0] = s_q[qidM+0] + s*sourceu;
        fQP[qid+1] = s_q[qidM+1] + s*sourcev;
        fQP[qid+2] = s_q[qidM+2] + s*sourcep;
        fQM[qid+0] = s_q[qidM+0];
        fQM[qid+1] = s_q[qidM+1];
        fQM[qid+2] = s_q[qidM+2];      
      }
    }
  }
}

kernel void acousticsMRABTraceUpdate2D_wadg(const iint Nelements,
           const iint   * restrict elementIds,
           const dfloat dt, 
           const dfloat a1,
           const dfloat a2,
           const dfloat a3,
           const dfloat * restrict cubInterp,
           const dfloat * restrict cubProject,
           const dfloat * restrict c2,
           const dfloat t,
           const dfloat * restrict x,
           const dfloat * restrict y,
           const dfloat * restrict invVB1D,
           const iint   * restrict EToB,
           const iint   * restrict vmapM,
           const dfloat * restrict rhsq,
           const dfloat * restrict q,
           dfloat * restrict fQM,
           dfloat * restrict fQP,
           const iint   rhsShift){
  
  for(iint et=0;et<Nelements;++et;outer0){  // for all elements
    shared dfloat s_q[p_Np*p_Nfields];

    shared dfloat s_p[p_cubNp];
    exclusive dfloat r_p;

    shared dfloat s_sourceu[p_Nfp*p_Nfaces];
    shared dfloat s_sourcev[p_Nfp*p_Nfaces];
    shared dfloat s_sourcep[p_Nfp*p_Nfaces];

    for(iint n=0; n < p_maxCubNodes; ++n; inner0){  
      if (n < p_Np){
        const iint e = elementIds[et];
        const iint id = p_Nfields*(e*p_Np + n);
        const iint rhsId = 3*id + rhsShift*p_Nfields;
        s_p[n] = rhsq[rhsId + 2]; // extract pressure rhs
      }

      // Initialize register variable
      r_p = 0.f;
    }
    barrier(localMemFence);

    // Interpolate rhs to cubature nodes
    for(iint n=0;n<p_maxCubNodes;++n;inner0){
      if (n<p_cubNp) {
        const iint e = elementIds[et];
        // Prefetch value of c2
        const dfloat c2n = c2[n + e*p_cubNp];
        
        dfloat val = 0.f;
        for (int i=0;i<p_Np;++i){
          val += cubInterp[n + i*p_cubNp] * s_p[i];
        }

        // Multiply result by wavespeed c2 at cubature node
        r_p = val * c2n;
      }
    }
    barrier(localMemFence);

    // Move temporary result back to shared memory
    for(iint n=0;n<p_maxCubNodes;++n;inner0){
      if (n<p_cubNp) {
        s_p[n] = r_p;
      }
    }
    barrier(localMemFence);
    
    // Increment solution, project result back down
    for(iint n=0;n<p_maxCubNodes;++n;inner0){
      if (n < p_Np){
        const iint e = elementIds[et];
        // Extract velocity rhs
        const iint id = p_Nfields*(e*p_Np + n);
        const iint rhsId = 3*id + rhsShift*p_Nfields;
        dfloat rhsqn[p_Nfields];
        rhsqn[0] = rhsq[rhsId + 0];
        rhsqn[1] = rhsq[rhsId + 1];  
        
        // Project scaled rhs down
        dfloat rhsp = 0.f;
        for (int i=0;i<p_cubNp;++i){
          rhsp += cubProject[n + i*p_Np] * s_p[i];
        }
        rhsqn[2] = rhsp;

        const iint rhsId1 = 3*id + ((rhsShift+0)%3)*p_Nfields;
        const iint rhsId2 = 3*id + ((rhsShift+1)%3)*p_Nfields;
        const iint rhsId3 = 3*id + ((rhsShift+2)%3)*p_Nfields;

        // Increment solutions 
        for (int fld = 0; fld < p_Nfields; ++fld)
          s_q[p_Nfields*n+fld] = q[id+fld] + dt*(a1*rhsqn[fld] + a2*rhsq[rhsId2+fld] + a3*rhsq[rhsId3+fld]);
      }      
    }
    barrier(localMemFence);

    //compute source injection if present
    for(iint n=0; n < p_maxCubNodes; ++n; inner0){  
      if (n < p_Nfp*p_Nfaces){
        const iint e = elementIds[et];
        const int f  = n/p_Nfp; //face number

        int bc = EToB[e*p_Nfaces+f];
        if ((bc==-10)||(bc==-11)) { //check if this is a special source injection face
          const iint id = n + e*p_Nfaces*p_Nfp;
          const iint idM = vmapM[id];

          //get the nodal values of the incident field along the trace
          const dfloat X = x[idM];
          const dfloat Y = y[idM];

          const dfloat c = sqrt(p_sourceC2);

          dfloat u,v,p;

          acousticsPointSource2D((X-p_sourceX0), (Y-p_sourceY0), (t+p_sourceT0), p_sourceFreq, c, u, v, p);

          s_sourceu[n] = u;
          s_sourcev[n] = v;
          s_sourcep[n] = p;
        }
      }
    }
    barrier(localMemFence);

    for(iint n=0; n < p_maxCubNodes; ++n; inner0){  
      if (n < p_Nfp*p_Nfaces){
        const iint e = elementIds[et];
        const int f  = n/p_Nfp; //face number
        const int id  = n%p_Nfp; //local node number

        dfloat sourceu = 0.f;
        dfloat sourcev = 0.f;
        dfloat sourcep = 0.f;

        dfloat s = 0.f;

        int bc = EToB[e*p_Nfaces+f];
        if ((bc==-10)||(bc==-11)) { //check if this is a special source injection face
          if (bc==-10) s= 1.f;
          if (bc==-11) s=-1.f;

          occaUnroll(p_Nfp)
          for (int m=0;m<p_Nfp;m++) {
            sourceu += invVB1D[id + p_Nfp*m]*s_sourceu[f*p_Nfp+m];
            sourcev += invVB1D[id + p_Nfp*m]*s_sourcev[f*p_Nfp+m];
            sourcep += invVB1D[id + p_Nfp*m]*s_sourcep[f*p_Nfp+m];
          }
        }

        const iint iid = e*p_Nfp*p_Nfaces + n;
        const iint qidM = p_Nfields*(vmapM[iid]-e*p_Np);
        const iint qid  = p_Nfields*iid; 

        fQP[qid+0] = s_q[qidM+0] + s*sourceu;
        fQP[qid+1] = s_q[qidM+1] + s*sourcev;
        fQP[qid+2] = s_q[qidM+2] + s*sourcep;
        fQM[qid+0] = s_q[qidM+0];
        fQM[qid+1] = s_q[qidM+1];
        fQM[qid+2] = s_q[qidM+2];      
      }
    }
  }
}

kernel void acousticsUpdate2D_wadg(const iint Nelements,
           const dfloat dt, 
           const dfloat rka,
           const dfloat rkb,
           const dfloat * restrict cubInterp,
           const dfloat * restrict cubProject,
           const dfloat * restrict c2,
           const dfloat * restrict rhsq,
           dfloat * restrict resq,
           dfloat * restrict q){
  
  // Low storage Runge Kutta time step update
  for(iint e=0;e<Nelements;++e;outer0){  // for all elements

    shared dfloat s_p[p_cubNp];
    exclusive dfloat r_p;

    for(iint n=0; n < p_cubNp; ++n; inner0){  

      if (n < p_Np){
        const iint id = p_Nfields*(e*p_Np + n);
        s_p[n] = rhsq[id + 2]; // extract pressure rhs
      }

      // Initialize register variable
      r_p = 0.f;
    }
    barrier(localMemFence);

    // Interpolate rhs to cubature nodes
    for(iint n=0;n<p_cubNp;++n;inner0){

      // Prefetch value of c2
      const dfloat c2n = c2[n + e*p_cubNp];
      
      dfloat val = 0.f;
      for (int i=0;i<p_Np;++i){
        val += cubInterp[n + i*p_cubNp] * s_p[i];
      }

      // Multiply result by wavespeed c2 at cubature node
      r_p = val * c2n;
    }
    barrier(localMemFence);

    // Move temporary result back to shared memory
    for(iint n=0;n<p_cubNp;++n;inner0){
      s_p[n] = r_p;
    }
    barrier(localMemFence);
    
    // Increment solution, project result back down
    for(iint n=0;n<p_cubNp;++n;inner0){

      if (n < p_Np){

        // Extract velocity rhs
        const iint id = p_Nfields*(e*p_Np + n);
        dfloat rhsqn[p_Nfields];
        rhsqn[0] = rhsq[id + 0];
        rhsqn[1] = rhsq[id + 1];  
        
        // Project scaled rhs down
        dfloat rhsp = 0.f;
        for (int i=0;i<p_cubNp;++i){
          rhsp += cubProject[n + i*p_Np] * s_p[i];
        }
        //rhsqn[2] = rhsq[id + 2];
        rhsqn[2] = rhsp;

        // Increment solutions
        for (int fld = 0; fld < p_Nfields; ++fld){ 
          dfloat resqn = resq[id + fld];
          resqn = rka*resqn + dt*rhsqn[fld];
          resq[id + fld] = resqn;
          q[id + fld] += rkb*resqn;
        }
      }      
    }
  }
}